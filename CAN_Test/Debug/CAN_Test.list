
CAN_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000326c  080001f8  080001f8  000011f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003464  08003464  00004464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800347c  0800347c  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  0800347c  0800347c  0000447c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003484  08003484  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003484  08003484  00004484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003488  08003488  00004488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800348c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f4  2000000c  08003498  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000100  08003498  00005100  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b1d5  00000000  00000000  0000503a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001963  00000000  00000000  0001020f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008b0  00000000  00000000  00011b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006a2  00000000  00000000  00012428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002666c  00000000  00000000  00012aca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b184  00000000  00000000  00039136  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f03e8  00000000  00000000  000442ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001346a2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002300  00000000  00000000  001346e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  001369e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	0800344c 	.word	0x0800344c

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	0800344c 	.word	0x0800344c

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96a 	b.w	8000524 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	460c      	mov	r4, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d14e      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000274:	4694      	mov	ip, r2
 8000276:	458c      	cmp	ip, r1
 8000278:	4686      	mov	lr, r0
 800027a:	fab2 f282 	clz	r2, r2
 800027e:	d962      	bls.n	8000346 <__udivmoddi4+0xde>
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0320 	rsb	r3, r2, #32
 8000286:	4091      	lsls	r1, r2
 8000288:	fa20 f303 	lsr.w	r3, r0, r3
 800028c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000290:	4319      	orrs	r1, r3
 8000292:	fa00 fe02 	lsl.w	lr, r0, r2
 8000296:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800029a:	fa1f f68c 	uxth.w	r6, ip
 800029e:	fbb1 f4f7 	udiv	r4, r1, r7
 80002a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002a6:	fb07 1114 	mls	r1, r7, r4, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb04 f106 	mul.w	r1, r4, r6
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f104 30ff 	add.w	r0, r4, #4294967295
 80002be:	f080 8112 	bcs.w	80004e6 <__udivmoddi4+0x27e>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 810f 	bls.w	80004e6 <__udivmoddi4+0x27e>
 80002c8:	3c02      	subs	r4, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a59      	subs	r1, r3, r1
 80002ce:	fa1f f38e 	uxth.w	r3, lr
 80002d2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002d6:	fb07 1110 	mls	r1, r7, r0, r1
 80002da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002de:	fb00 f606 	mul.w	r6, r0, r6
 80002e2:	429e      	cmp	r6, r3
 80002e4:	d90a      	bls.n	80002fc <__udivmoddi4+0x94>
 80002e6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ea:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ee:	f080 80fc 	bcs.w	80004ea <__udivmoddi4+0x282>
 80002f2:	429e      	cmp	r6, r3
 80002f4:	f240 80f9 	bls.w	80004ea <__udivmoddi4+0x282>
 80002f8:	4463      	add	r3, ip
 80002fa:	3802      	subs	r0, #2
 80002fc:	1b9b      	subs	r3, r3, r6
 80002fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000302:	2100      	movs	r1, #0
 8000304:	b11d      	cbz	r5, 800030e <__udivmoddi4+0xa6>
 8000306:	40d3      	lsrs	r3, r2
 8000308:	2200      	movs	r2, #0
 800030a:	e9c5 3200 	strd	r3, r2, [r5]
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d905      	bls.n	8000322 <__udivmoddi4+0xba>
 8000316:	b10d      	cbz	r5, 800031c <__udivmoddi4+0xb4>
 8000318:	e9c5 0100 	strd	r0, r1, [r5]
 800031c:	2100      	movs	r1, #0
 800031e:	4608      	mov	r0, r1
 8000320:	e7f5      	b.n	800030e <__udivmoddi4+0xa6>
 8000322:	fab3 f183 	clz	r1, r3
 8000326:	2900      	cmp	r1, #0
 8000328:	d146      	bne.n	80003b8 <__udivmoddi4+0x150>
 800032a:	42a3      	cmp	r3, r4
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xcc>
 800032e:	4290      	cmp	r0, r2
 8000330:	f0c0 80f0 	bcc.w	8000514 <__udivmoddi4+0x2ac>
 8000334:	1a86      	subs	r6, r0, r2
 8000336:	eb64 0303 	sbc.w	r3, r4, r3
 800033a:	2001      	movs	r0, #1
 800033c:	2d00      	cmp	r5, #0
 800033e:	d0e6      	beq.n	800030e <__udivmoddi4+0xa6>
 8000340:	e9c5 6300 	strd	r6, r3, [r5]
 8000344:	e7e3      	b.n	800030e <__udivmoddi4+0xa6>
 8000346:	2a00      	cmp	r2, #0
 8000348:	f040 8090 	bne.w	800046c <__udivmoddi4+0x204>
 800034c:	eba1 040c 	sub.w	r4, r1, ip
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	fa1f f78c 	uxth.w	r7, ip
 8000358:	2101      	movs	r1, #1
 800035a:	fbb4 f6f8 	udiv	r6, r4, r8
 800035e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000362:	fb08 4416 	mls	r4, r8, r6, r4
 8000366:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036a:	fb07 f006 	mul.w	r0, r7, r6
 800036e:	4298      	cmp	r0, r3
 8000370:	d908      	bls.n	8000384 <__udivmoddi4+0x11c>
 8000372:	eb1c 0303 	adds.w	r3, ip, r3
 8000376:	f106 34ff 	add.w	r4, r6, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x11a>
 800037c:	4298      	cmp	r0, r3
 800037e:	f200 80cd 	bhi.w	800051c <__udivmoddi4+0x2b4>
 8000382:	4626      	mov	r6, r4
 8000384:	1a1c      	subs	r4, r3, r0
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb4 f0f8 	udiv	r0, r4, r8
 800038e:	fb08 4410 	mls	r4, r8, r0, r4
 8000392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000396:	fb00 f707 	mul.w	r7, r0, r7
 800039a:	429f      	cmp	r7, r3
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x148>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 34ff 	add.w	r4, r0, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x146>
 80003a8:	429f      	cmp	r7, r3
 80003aa:	f200 80b0 	bhi.w	800050e <__udivmoddi4+0x2a6>
 80003ae:	4620      	mov	r0, r4
 80003b0:	1bdb      	subs	r3, r3, r7
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	e7a5      	b.n	8000304 <__udivmoddi4+0x9c>
 80003b8:	f1c1 0620 	rsb	r6, r1, #32
 80003bc:	408b      	lsls	r3, r1
 80003be:	fa22 f706 	lsr.w	r7, r2, r6
 80003c2:	431f      	orrs	r7, r3
 80003c4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003c8:	fa04 f301 	lsl.w	r3, r4, r1
 80003cc:	ea43 030c 	orr.w	r3, r3, ip
 80003d0:	40f4      	lsrs	r4, r6
 80003d2:	fa00 f801 	lsl.w	r8, r0, r1
 80003d6:	0c38      	lsrs	r0, r7, #16
 80003d8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003dc:	fbb4 fef0 	udiv	lr, r4, r0
 80003e0:	fa1f fc87 	uxth.w	ip, r7
 80003e4:	fb00 441e 	mls	r4, r0, lr, r4
 80003e8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ec:	fb0e f90c 	mul.w	r9, lr, ip
 80003f0:	45a1      	cmp	r9, r4
 80003f2:	fa02 f201 	lsl.w	r2, r2, r1
 80003f6:	d90a      	bls.n	800040e <__udivmoddi4+0x1a6>
 80003f8:	193c      	adds	r4, r7, r4
 80003fa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003fe:	f080 8084 	bcs.w	800050a <__udivmoddi4+0x2a2>
 8000402:	45a1      	cmp	r9, r4
 8000404:	f240 8081 	bls.w	800050a <__udivmoddi4+0x2a2>
 8000408:	f1ae 0e02 	sub.w	lr, lr, #2
 800040c:	443c      	add	r4, r7
 800040e:	eba4 0409 	sub.w	r4, r4, r9
 8000412:	fa1f f983 	uxth.w	r9, r3
 8000416:	fbb4 f3f0 	udiv	r3, r4, r0
 800041a:	fb00 4413 	mls	r4, r0, r3, r4
 800041e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000422:	fb03 fc0c 	mul.w	ip, r3, ip
 8000426:	45a4      	cmp	ip, r4
 8000428:	d907      	bls.n	800043a <__udivmoddi4+0x1d2>
 800042a:	193c      	adds	r4, r7, r4
 800042c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000430:	d267      	bcs.n	8000502 <__udivmoddi4+0x29a>
 8000432:	45a4      	cmp	ip, r4
 8000434:	d965      	bls.n	8000502 <__udivmoddi4+0x29a>
 8000436:	3b02      	subs	r3, #2
 8000438:	443c      	add	r4, r7
 800043a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800043e:	fba0 9302 	umull	r9, r3, r0, r2
 8000442:	eba4 040c 	sub.w	r4, r4, ip
 8000446:	429c      	cmp	r4, r3
 8000448:	46ce      	mov	lr, r9
 800044a:	469c      	mov	ip, r3
 800044c:	d351      	bcc.n	80004f2 <__udivmoddi4+0x28a>
 800044e:	d04e      	beq.n	80004ee <__udivmoddi4+0x286>
 8000450:	b155      	cbz	r5, 8000468 <__udivmoddi4+0x200>
 8000452:	ebb8 030e 	subs.w	r3, r8, lr
 8000456:	eb64 040c 	sbc.w	r4, r4, ip
 800045a:	fa04 f606 	lsl.w	r6, r4, r6
 800045e:	40cb      	lsrs	r3, r1
 8000460:	431e      	orrs	r6, r3
 8000462:	40cc      	lsrs	r4, r1
 8000464:	e9c5 6400 	strd	r6, r4, [r5]
 8000468:	2100      	movs	r1, #0
 800046a:	e750      	b.n	800030e <__udivmoddi4+0xa6>
 800046c:	f1c2 0320 	rsb	r3, r2, #32
 8000470:	fa20 f103 	lsr.w	r1, r0, r3
 8000474:	fa0c fc02 	lsl.w	ip, ip, r2
 8000478:	fa24 f303 	lsr.w	r3, r4, r3
 800047c:	4094      	lsls	r4, r2
 800047e:	430c      	orrs	r4, r1
 8000480:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000484:	fa00 fe02 	lsl.w	lr, r0, r2
 8000488:	fa1f f78c 	uxth.w	r7, ip
 800048c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000490:	fb08 3110 	mls	r1, r8, r0, r3
 8000494:	0c23      	lsrs	r3, r4, #16
 8000496:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049a:	fb00 f107 	mul.w	r1, r0, r7
 800049e:	4299      	cmp	r1, r3
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x24c>
 80004a2:	eb1c 0303 	adds.w	r3, ip, r3
 80004a6:	f100 36ff 	add.w	r6, r0, #4294967295
 80004aa:	d22c      	bcs.n	8000506 <__udivmoddi4+0x29e>
 80004ac:	4299      	cmp	r1, r3
 80004ae:	d92a      	bls.n	8000506 <__udivmoddi4+0x29e>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4463      	add	r3, ip
 80004b4:	1a5b      	subs	r3, r3, r1
 80004b6:	b2a4      	uxth	r4, r4
 80004b8:	fbb3 f1f8 	udiv	r1, r3, r8
 80004bc:	fb08 3311 	mls	r3, r8, r1, r3
 80004c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004c4:	fb01 f307 	mul.w	r3, r1, r7
 80004c8:	42a3      	cmp	r3, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x276>
 80004cc:	eb1c 0404 	adds.w	r4, ip, r4
 80004d0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004d4:	d213      	bcs.n	80004fe <__udivmoddi4+0x296>
 80004d6:	42a3      	cmp	r3, r4
 80004d8:	d911      	bls.n	80004fe <__udivmoddi4+0x296>
 80004da:	3902      	subs	r1, #2
 80004dc:	4464      	add	r4, ip
 80004de:	1ae4      	subs	r4, r4, r3
 80004e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004e4:	e739      	b.n	800035a <__udivmoddi4+0xf2>
 80004e6:	4604      	mov	r4, r0
 80004e8:	e6f0      	b.n	80002cc <__udivmoddi4+0x64>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e706      	b.n	80002fc <__udivmoddi4+0x94>
 80004ee:	45c8      	cmp	r8, r9
 80004f0:	d2ae      	bcs.n	8000450 <__udivmoddi4+0x1e8>
 80004f2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004f6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004fa:	3801      	subs	r0, #1
 80004fc:	e7a8      	b.n	8000450 <__udivmoddi4+0x1e8>
 80004fe:	4631      	mov	r1, r6
 8000500:	e7ed      	b.n	80004de <__udivmoddi4+0x276>
 8000502:	4603      	mov	r3, r0
 8000504:	e799      	b.n	800043a <__udivmoddi4+0x1d2>
 8000506:	4630      	mov	r0, r6
 8000508:	e7d4      	b.n	80004b4 <__udivmoddi4+0x24c>
 800050a:	46d6      	mov	lr, sl
 800050c:	e77f      	b.n	800040e <__udivmoddi4+0x1a6>
 800050e:	4463      	add	r3, ip
 8000510:	3802      	subs	r0, #2
 8000512:	e74d      	b.n	80003b0 <__udivmoddi4+0x148>
 8000514:	4606      	mov	r6, r0
 8000516:	4623      	mov	r3, r4
 8000518:	4608      	mov	r0, r1
 800051a:	e70f      	b.n	800033c <__udivmoddi4+0xd4>
 800051c:	3e02      	subs	r6, #2
 800051e:	4463      	add	r3, ip
 8000520:	e730      	b.n	8000384 <__udivmoddi4+0x11c>
 8000522:	bf00      	nop

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b09c      	sub	sp, #112	@ 0x70
 800052c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800052e:	f000 fc30 	bl	8000d92 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000532:	f000 f8ed 	bl	8000710 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000536:	f000 f9bd 	bl	80008b4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800053a:	f000 f98b 	bl	8000854 <MX_USART3_UART_Init>
  MX_CAN1_Init();
 800053e:	f000 f951 	bl	80007e4 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */

  HAL_CAN_Start(&hcan1);
 8000542:	486d      	ldr	r0, [pc, #436]	@ (80006f8 <main+0x1d0>)
 8000544:	f000 fda1 	bl	800108a <HAL_CAN_Start>

  // Activate the notification
//  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO1_MSG_PENDING);


  TxHeader.DLC = 5;  // data length
 8000548:	4b6c      	ldr	r3, [pc, #432]	@ (80006fc <main+0x1d4>)
 800054a:	2205      	movs	r2, #5
 800054c:	611a      	str	r2, [r3, #16]
  TxHeader.IDE = CAN_ID_STD;
 800054e:	4b6b      	ldr	r3, [pc, #428]	@ (80006fc <main+0x1d4>)
 8000550:	2200      	movs	r2, #0
 8000552:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 8000554:	4b69      	ldr	r3, [pc, #420]	@ (80006fc <main+0x1d4>)
 8000556:	2200      	movs	r2, #0
 8000558:	60da      	str	r2, [r3, #12]
  TxHeader.StdId = 0x103;  // ID
 800055a:	4b68      	ldr	r3, [pc, #416]	@ (80006fc <main+0x1d4>)
 800055c:	f240 1203 	movw	r2, #259	@ 0x103
 8000560:	601a      	str	r2, [r3, #0]

  TxData[0] = 1;
 8000562:	4b67      	ldr	r3, [pc, #412]	@ (8000700 <main+0x1d8>)
 8000564:	2201      	movs	r2, #1
 8000566:	701a      	strb	r2, [r3, #0]
  TxData[1] = 2;
 8000568:	4b65      	ldr	r3, [pc, #404]	@ (8000700 <main+0x1d8>)
 800056a:	2202      	movs	r2, #2
 800056c:	705a      	strb	r2, [r3, #1]
  TxData[2] = 3;
 800056e:	4b64      	ldr	r3, [pc, #400]	@ (8000700 <main+0x1d8>)
 8000570:	2203      	movs	r2, #3
 8000572:	709a      	strb	r2, [r3, #2]
  TxData[3] = 4;
 8000574:	4b62      	ldr	r3, [pc, #392]	@ (8000700 <main+0x1d8>)
 8000576:	2204      	movs	r2, #4
 8000578:	70da      	strb	r2, [r3, #3]
  TxData[4] = 0;
 800057a:	4b61      	ldr	r3, [pc, #388]	@ (8000700 <main+0x1d8>)
 800057c:	2200      	movs	r2, #0
 800057e:	711a      	strb	r2, [r3, #4]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  CAN_TxHeaderTypeDef tx_header_1 = {
 8000580:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]
 8000588:	605a      	str	r2, [r3, #4]
 800058a:	609a      	str	r2, [r3, #8]
 800058c:	60da      	str	r2, [r3, #12]
 800058e:	611a      	str	r2, [r3, #16]
 8000590:	615a      	str	r2, [r3, #20]
 8000592:	f240 1303 	movw	r3, #259	@ 0x103
 8000596:	657b      	str	r3, [r7, #84]	@ 0x54
 8000598:	2308      	movs	r3, #8
 800059a:	667b      	str	r3, [r7, #100]	@ 0x64
	  .DLC = 8,
	  .IDE = CAN_ID_STD,
	  .RTR = CAN_RTR_DATA,
	  .StdId = 0x103
  };
  can_data_t tx_1 = {
 800059c:	2301      	movs	r3, #1
 800059e:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80005a2:	2300      	movs	r3, #0
 80005a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80005a6:	2300      	movs	r3, #0
 80005a8:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
      .ID = 1,
	  .ival = false,
	  .reserved = 0
  };

  CAN_TxHeaderTypeDef tx_header_2 = {
 80005ac:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	605a      	str	r2, [r3, #4]
 80005b6:	609a      	str	r2, [r3, #8]
 80005b8:	60da      	str	r2, [r3, #12]
 80005ba:	611a      	str	r2, [r3, #16]
 80005bc:	615a      	str	r2, [r3, #20]
 80005be:	f240 1303 	movw	r3, #259	@ 0x103
 80005c2:	633b      	str	r3, [r7, #48]	@ 0x30
 80005c4:	2308      	movs	r3, #8
 80005c6:	643b      	str	r3, [r7, #64]	@ 0x40
	  .DLC = 8,
	  .IDE = CAN_ID_STD,
	  .RTR = CAN_RTR_DATA,
	  .StdId = 0x103
  };
  can_data_t tx_2 = {
 80005c8:	2302      	movs	r3, #2
 80005ca:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80005cc:	2300      	movs	r3, #0
 80005ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 80005d0:	2300      	movs	r3, #0
 80005d2:	85bb      	strh	r3, [r7, #44]	@ 0x2c
	  .ID = 2,
	  .ival = false,
	  .reserved = 0
  };

  CAN_TxHeaderTypeDef tx_header_3 = {
 80005d4:	f107 030c 	add.w	r3, r7, #12
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
 80005dc:	605a      	str	r2, [r3, #4]
 80005de:	609a      	str	r2, [r3, #8]
 80005e0:	60da      	str	r2, [r3, #12]
 80005e2:	611a      	str	r2, [r3, #16]
 80005e4:	615a      	str	r2, [r3, #20]
 80005e6:	f240 1303 	movw	r3, #259	@ 0x103
 80005ea:	60fb      	str	r3, [r7, #12]
 80005ec:	2308      	movs	r3, #8
 80005ee:	61fb      	str	r3, [r7, #28]
	  .DLC = 8,
	  .IDE = CAN_ID_STD,
	  .RTR = CAN_RTR_DATA,
	  .StdId = 0x103
  };
  can_data_t tx_3 = {
 80005f0:	2303      	movs	r3, #3
 80005f2:	803b      	strh	r3, [r7, #0]
 80005f4:	2300      	movs	r3, #0
 80005f6:	607b      	str	r3, [r7, #4]
 80005f8:	2300      	movs	r3, #0
 80005fa:	813b      	strh	r3, [r7, #8]
	  .ID = 3,
	  .ival = false,
	  .reserved = 0
  };

  while (HAL_CAN_AddTxMessage(&hcan1, &tx_header_1, tx_1.data, &TxMailbox) != HAL_OK);
 80005fc:	bf00      	nop
 80005fe:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8000602:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 8000606:	4b3f      	ldr	r3, [pc, #252]	@ (8000704 <main+0x1dc>)
 8000608:	483b      	ldr	r0, [pc, #236]	@ (80006f8 <main+0x1d0>)
 800060a:	f000 fd82 	bl	8001112 <HAL_CAN_AddTxMessage>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d1f4      	bne.n	80005fe <main+0xd6>
  while (HAL_CAN_AddTxMessage(&hcan1, &tx_header_2, tx_2.data, &TxMailbox) != HAL_OK);
 8000614:	bf00      	nop
 8000616:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800061a:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 800061e:	4b39      	ldr	r3, [pc, #228]	@ (8000704 <main+0x1dc>)
 8000620:	4835      	ldr	r0, [pc, #212]	@ (80006f8 <main+0x1d0>)
 8000622:	f000 fd76 	bl	8001112 <HAL_CAN_AddTxMessage>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d1f4      	bne.n	8000616 <main+0xee>
  while (HAL_CAN_AddTxMessage(&hcan1, &tx_header_3, tx_3.data, &TxMailbox) != HAL_OK);
 800062c:	bf00      	nop
 800062e:	463a      	mov	r2, r7
 8000630:	f107 010c 	add.w	r1, r7, #12
 8000634:	4b33      	ldr	r3, [pc, #204]	@ (8000704 <main+0x1dc>)
 8000636:	4830      	ldr	r0, [pc, #192]	@ (80006f8 <main+0x1d0>)
 8000638:	f000 fd6b 	bl	8001112 <HAL_CAN_AddTxMessage>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d1f5      	bne.n	800062e <main+0x106>

  int i = 0;
 8000642:	2300      	movs	r3, #0
 8000644:	66fb      	str	r3, [r7, #108]	@ 0x6c
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_Delay (1000);
 8000646:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800064a:	f000 fbff 	bl	8000e4c <HAL_Delay>
//		  datacheck = 0;
//
//
//	  }

	  i++;
 800064e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000650:	3301      	adds	r3, #1
 8000652:	66fb      	str	r3, [r7, #108]	@ 0x6c

	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000654:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000658:	482b      	ldr	r0, [pc, #172]	@ (8000708 <main+0x1e0>)
 800065a:	f001 f8d6 	bl	800180a <HAL_GPIO_TogglePin>
//		  uint8_t data[8] = {0};
//		  while (HAL_CAN_AddTxMessage(&hcan1, &tx, data, &TxMailbox) != HAL_OK);
//		  message_count++;
//	  }

	  switch (i % 3) {
 800065e:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8000660:	4b2a      	ldr	r3, [pc, #168]	@ (800070c <main+0x1e4>)
 8000662:	fb83 3201 	smull	r3, r2, r3, r1
 8000666:	17cb      	asrs	r3, r1, #31
 8000668:	1ad3      	subs	r3, r2, r3
 800066a:	461a      	mov	r2, r3
 800066c:	0052      	lsls	r2, r2, #1
 800066e:	441a      	add	r2, r3
 8000670:	1a8b      	subs	r3, r1, r2
 8000672:	2b02      	cmp	r3, #2
 8000674:	d014      	beq.n	80006a0 <main+0x178>
 8000676:	2b02      	cmp	r3, #2
 8000678:	dc19      	bgt.n	80006ae <main+0x186>
 800067a:	2b00      	cmp	r3, #0
 800067c:	d002      	beq.n	8000684 <main+0x15c>
 800067e:	2b01      	cmp	r3, #1
 8000680:	d007      	beq.n	8000692 <main+0x16a>
 8000682:	e014      	b.n	80006ae <main+0x186>
	  case 0:
		  tx_1.ival = true;
 8000684:	2301      	movs	r3, #1
 8000686:	64fb      	str	r3, [r7, #76]	@ 0x4c
		  tx_2.ival = false;
 8000688:	2300      	movs	r3, #0
 800068a:	62bb      	str	r3, [r7, #40]	@ 0x28
		  tx_3.ival = false;
 800068c:	2300      	movs	r3, #0
 800068e:	607b      	str	r3, [r7, #4]
	  break;
 8000690:	e00d      	b.n	80006ae <main+0x186>
	  case 1:
		  tx_1.ival = false;
 8000692:	2300      	movs	r3, #0
 8000694:	64fb      	str	r3, [r7, #76]	@ 0x4c
		  tx_2.ival = true;
 8000696:	2301      	movs	r3, #1
 8000698:	62bb      	str	r3, [r7, #40]	@ 0x28
		  tx_3.ival = false;
 800069a:	2300      	movs	r3, #0
 800069c:	607b      	str	r3, [r7, #4]
	  break;
 800069e:	e006      	b.n	80006ae <main+0x186>
	  case 2:
		  tx_1.ival = false;
 80006a0:	2300      	movs	r3, #0
 80006a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
		  tx_2.ival = false;
 80006a4:	2300      	movs	r3, #0
 80006a6:	62bb      	str	r3, [r7, #40]	@ 0x28
		  tx_3.ival = true;
 80006a8:	2301      	movs	r3, #1
 80006aa:	607b      	str	r3, [r7, #4]
	  break;
 80006ac:	bf00      	nop
	  }

	  while (HAL_CAN_AddTxMessage(&hcan1, &tx_header_1, tx_1.data, &TxMailbox) != HAL_OK);
 80006ae:	bf00      	nop
 80006b0:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 80006b4:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 80006b8:	4b12      	ldr	r3, [pc, #72]	@ (8000704 <main+0x1dc>)
 80006ba:	480f      	ldr	r0, [pc, #60]	@ (80006f8 <main+0x1d0>)
 80006bc:	f000 fd29 	bl	8001112 <HAL_CAN_AddTxMessage>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d1f4      	bne.n	80006b0 <main+0x188>
	  while (HAL_CAN_AddTxMessage(&hcan1, &tx_header_2, tx_2.data, &TxMailbox) != HAL_OK);
 80006c6:	bf00      	nop
 80006c8:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80006cc:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 80006d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000704 <main+0x1dc>)
 80006d2:	4809      	ldr	r0, [pc, #36]	@ (80006f8 <main+0x1d0>)
 80006d4:	f000 fd1d 	bl	8001112 <HAL_CAN_AddTxMessage>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d1f4      	bne.n	80006c8 <main+0x1a0>
	  while (HAL_CAN_AddTxMessage(&hcan1, &tx_header_3, tx_3.data, &TxMailbox) != HAL_OK);
 80006de:	bf00      	nop
 80006e0:	463a      	mov	r2, r7
 80006e2:	f107 010c 	add.w	r1, r7, #12
 80006e6:	4b07      	ldr	r3, [pc, #28]	@ (8000704 <main+0x1dc>)
 80006e8:	4803      	ldr	r0, [pc, #12]	@ (80006f8 <main+0x1d0>)
 80006ea:	f000 fd12 	bl	8001112 <HAL_CAN_AddTxMessage>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d1f5      	bne.n	80006e0 <main+0x1b8>
	  HAL_Delay (1000);
 80006f4:	e7a7      	b.n	8000646 <main+0x11e>
 80006f6:	bf00      	nop
 80006f8:	20000028 	.word	0x20000028
 80006fc:	200000d8 	.word	0x200000d8
 8000700:	200000f0 	.word	0x200000f0
 8000704:	200000f8 	.word	0x200000f8
 8000708:	40021400 	.word	0x40021400
 800070c:	55555556 	.word	0x55555556

08000710 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b094      	sub	sp, #80	@ 0x50
 8000714:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000716:	f107 031c 	add.w	r3, r7, #28
 800071a:	2234      	movs	r2, #52	@ 0x34
 800071c:	2100      	movs	r1, #0
 800071e:	4618      	mov	r0, r3
 8000720:	f002 fe67 	bl	80033f2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000724:	f107 0308 	add.w	r3, r7, #8
 8000728:	2200      	movs	r2, #0
 800072a:	601a      	str	r2, [r3, #0]
 800072c:	605a      	str	r2, [r3, #4]
 800072e:	609a      	str	r2, [r3, #8]
 8000730:	60da      	str	r2, [r3, #12]
 8000732:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000734:	f001 f884 	bl	8001840 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000738:	4b28      	ldr	r3, [pc, #160]	@ (80007dc <SystemClock_Config+0xcc>)
 800073a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800073c:	4a27      	ldr	r2, [pc, #156]	@ (80007dc <SystemClock_Config+0xcc>)
 800073e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000742:	6413      	str	r3, [r2, #64]	@ 0x40
 8000744:	4b25      	ldr	r3, [pc, #148]	@ (80007dc <SystemClock_Config+0xcc>)
 8000746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000748:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800074c:	607b      	str	r3, [r7, #4]
 800074e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000750:	4b23      	ldr	r3, [pc, #140]	@ (80007e0 <SystemClock_Config+0xd0>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000758:	4a21      	ldr	r2, [pc, #132]	@ (80007e0 <SystemClock_Config+0xd0>)
 800075a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800075e:	6013      	str	r3, [r2, #0]
 8000760:	4b1f      	ldr	r3, [pc, #124]	@ (80007e0 <SystemClock_Config+0xd0>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000768:	603b      	str	r3, [r7, #0]
 800076a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800076c:	2301      	movs	r3, #1
 800076e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000770:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000774:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000776:	2302      	movs	r3, #2
 8000778:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800077a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800077e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000780:	2304      	movs	r3, #4
 8000782:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000784:	2360      	movs	r3, #96	@ 0x60
 8000786:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000788:	2302      	movs	r3, #2
 800078a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800078c:	2304      	movs	r3, #4
 800078e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000790:	2302      	movs	r3, #2
 8000792:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000794:	f107 031c 	add.w	r3, r7, #28
 8000798:	4618      	mov	r0, r3
 800079a:	f001 f861 	bl	8001860 <HAL_RCC_OscConfig>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80007a4:	f000 f9ac 	bl	8000b00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a8:	230f      	movs	r3, #15
 80007aa:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ac:	2302      	movs	r3, #2
 80007ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 80007b0:	2390      	movs	r3, #144	@ 0x90
 80007b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007b8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007ba:	2300      	movs	r3, #0
 80007bc:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007be:	f107 0308 	add.w	r3, r7, #8
 80007c2:	2100      	movs	r1, #0
 80007c4:	4618      	mov	r0, r3
 80007c6:	f001 faf9 	bl	8001dbc <HAL_RCC_ClockConfig>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80007d0:	f000 f996 	bl	8000b00 <Error_Handler>
  }
}
 80007d4:	bf00      	nop
 80007d6:	3750      	adds	r7, #80	@ 0x50
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	40023800 	.word	0x40023800
 80007e0:	40007000 	.word	0x40007000

080007e4 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80007e8:	4b18      	ldr	r3, [pc, #96]	@ (800084c <MX_CAN1_Init+0x68>)
 80007ea:	4a19      	ldr	r2, [pc, #100]	@ (8000850 <MX_CAN1_Init+0x6c>)
 80007ec:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 80007ee:	4b17      	ldr	r3, [pc, #92]	@ (800084c <MX_CAN1_Init+0x68>)
 80007f0:	2204      	movs	r2, #4
 80007f2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80007f4:	4b15      	ldr	r3, [pc, #84]	@ (800084c <MX_CAN1_Init+0x68>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_2TQ;
 80007fa:	4b14      	ldr	r3, [pc, #80]	@ (800084c <MX_CAN1_Init+0x68>)
 80007fc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000800:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000802:	4b12      	ldr	r3, [pc, #72]	@ (800084c <MX_CAN1_Init+0x68>)
 8000804:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000808:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 800080a:	4b10      	ldr	r3, [pc, #64]	@ (800084c <MX_CAN1_Init+0x68>)
 800080c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000810:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000812:	4b0e      	ldr	r3, [pc, #56]	@ (800084c <MX_CAN1_Init+0x68>)
 8000814:	2200      	movs	r2, #0
 8000816:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000818:	4b0c      	ldr	r3, [pc, #48]	@ (800084c <MX_CAN1_Init+0x68>)
 800081a:	2200      	movs	r2, #0
 800081c:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800081e:	4b0b      	ldr	r3, [pc, #44]	@ (800084c <MX_CAN1_Init+0x68>)
 8000820:	2200      	movs	r2, #0
 8000822:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000824:	4b09      	ldr	r3, [pc, #36]	@ (800084c <MX_CAN1_Init+0x68>)
 8000826:	2200      	movs	r2, #0
 8000828:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800082a:	4b08      	ldr	r3, [pc, #32]	@ (800084c <MX_CAN1_Init+0x68>)
 800082c:	2200      	movs	r2, #0
 800082e:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000830:	4b06      	ldr	r3, [pc, #24]	@ (800084c <MX_CAN1_Init+0x68>)
 8000832:	2200      	movs	r2, #0
 8000834:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000836:	4805      	ldr	r0, [pc, #20]	@ (800084c <MX_CAN1_Init+0x68>)
 8000838:	f000 fb2c 	bl	8000e94 <HAL_CAN_Init>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8000842:	f000 f95d 	bl	8000b00 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000846:	bf00      	nop
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	20000028 	.word	0x20000028
 8000850:	40006400 	.word	0x40006400

08000854 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000858:	4b14      	ldr	r3, [pc, #80]	@ (80008ac <MX_USART3_UART_Init+0x58>)
 800085a:	4a15      	ldr	r2, [pc, #84]	@ (80008b0 <MX_USART3_UART_Init+0x5c>)
 800085c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800085e:	4b13      	ldr	r3, [pc, #76]	@ (80008ac <MX_USART3_UART_Init+0x58>)
 8000860:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000864:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000866:	4b11      	ldr	r3, [pc, #68]	@ (80008ac <MX_USART3_UART_Init+0x58>)
 8000868:	2200      	movs	r2, #0
 800086a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800086c:	4b0f      	ldr	r3, [pc, #60]	@ (80008ac <MX_USART3_UART_Init+0x58>)
 800086e:	2200      	movs	r2, #0
 8000870:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000872:	4b0e      	ldr	r3, [pc, #56]	@ (80008ac <MX_USART3_UART_Init+0x58>)
 8000874:	2200      	movs	r2, #0
 8000876:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000878:	4b0c      	ldr	r3, [pc, #48]	@ (80008ac <MX_USART3_UART_Init+0x58>)
 800087a:	220c      	movs	r2, #12
 800087c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800087e:	4b0b      	ldr	r3, [pc, #44]	@ (80008ac <MX_USART3_UART_Init+0x58>)
 8000880:	2200      	movs	r2, #0
 8000882:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000884:	4b09      	ldr	r3, [pc, #36]	@ (80008ac <MX_USART3_UART_Init+0x58>)
 8000886:	2200      	movs	r2, #0
 8000888:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800088a:	4b08      	ldr	r3, [pc, #32]	@ (80008ac <MX_USART3_UART_Init+0x58>)
 800088c:	2200      	movs	r2, #0
 800088e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000890:	4b06      	ldr	r3, [pc, #24]	@ (80008ac <MX_USART3_UART_Init+0x58>)
 8000892:	2200      	movs	r2, #0
 8000894:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000896:	4805      	ldr	r0, [pc, #20]	@ (80008ac <MX_USART3_UART_Init+0x58>)
 8000898:	f002 f8de 	bl	8002a58 <HAL_UART_Init>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80008a2:	f000 f92d 	bl	8000b00 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	20000050 	.word	0x20000050
 80008b0:	40004800 	.word	0x40004800

080008b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b08c      	sub	sp, #48	@ 0x30
 80008b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ba:	f107 031c 	add.w	r3, r7, #28
 80008be:	2200      	movs	r2, #0
 80008c0:	601a      	str	r2, [r3, #0]
 80008c2:	605a      	str	r2, [r3, #4]
 80008c4:	609a      	str	r2, [r3, #8]
 80008c6:	60da      	str	r2, [r3, #12]
 80008c8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ca:	4b87      	ldr	r3, [pc, #540]	@ (8000ae8 <MX_GPIO_Init+0x234>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ce:	4a86      	ldr	r2, [pc, #536]	@ (8000ae8 <MX_GPIO_Init+0x234>)
 80008d0:	f043 0304 	orr.w	r3, r3, #4
 80008d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008d6:	4b84      	ldr	r3, [pc, #528]	@ (8000ae8 <MX_GPIO_Init+0x234>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008da:	f003 0304 	and.w	r3, r3, #4
 80008de:	61bb      	str	r3, [r7, #24]
 80008e0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008e2:	4b81      	ldr	r3, [pc, #516]	@ (8000ae8 <MX_GPIO_Init+0x234>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e6:	4a80      	ldr	r2, [pc, #512]	@ (8000ae8 <MX_GPIO_Init+0x234>)
 80008e8:	f043 0320 	orr.w	r3, r3, #32
 80008ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ee:	4b7e      	ldr	r3, [pc, #504]	@ (8000ae8 <MX_GPIO_Init+0x234>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f2:	f003 0320 	and.w	r3, r3, #32
 80008f6:	617b      	str	r3, [r7, #20]
 80008f8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008fa:	4b7b      	ldr	r3, [pc, #492]	@ (8000ae8 <MX_GPIO_Init+0x234>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fe:	4a7a      	ldr	r2, [pc, #488]	@ (8000ae8 <MX_GPIO_Init+0x234>)
 8000900:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000904:	6313      	str	r3, [r2, #48]	@ 0x30
 8000906:	4b78      	ldr	r3, [pc, #480]	@ (8000ae8 <MX_GPIO_Init+0x234>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800090e:	613b      	str	r3, [r7, #16]
 8000910:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000912:	4b75      	ldr	r3, [pc, #468]	@ (8000ae8 <MX_GPIO_Init+0x234>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000916:	4a74      	ldr	r2, [pc, #464]	@ (8000ae8 <MX_GPIO_Init+0x234>)
 8000918:	f043 0301 	orr.w	r3, r3, #1
 800091c:	6313      	str	r3, [r2, #48]	@ 0x30
 800091e:	4b72      	ldr	r3, [pc, #456]	@ (8000ae8 <MX_GPIO_Init+0x234>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000922:	f003 0301 	and.w	r3, r3, #1
 8000926:	60fb      	str	r3, [r7, #12]
 8000928:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800092a:	4b6f      	ldr	r3, [pc, #444]	@ (8000ae8 <MX_GPIO_Init+0x234>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092e:	4a6e      	ldr	r2, [pc, #440]	@ (8000ae8 <MX_GPIO_Init+0x234>)
 8000930:	f043 0302 	orr.w	r3, r3, #2
 8000934:	6313      	str	r3, [r2, #48]	@ 0x30
 8000936:	4b6c      	ldr	r3, [pc, #432]	@ (8000ae8 <MX_GPIO_Init+0x234>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093a:	f003 0302 	and.w	r3, r3, #2
 800093e:	60bb      	str	r3, [r7, #8]
 8000940:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000942:	4b69      	ldr	r3, [pc, #420]	@ (8000ae8 <MX_GPIO_Init+0x234>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000946:	4a68      	ldr	r2, [pc, #416]	@ (8000ae8 <MX_GPIO_Init+0x234>)
 8000948:	f043 0308 	orr.w	r3, r3, #8
 800094c:	6313      	str	r3, [r2, #48]	@ 0x30
 800094e:	4b66      	ldr	r3, [pc, #408]	@ (8000ae8 <MX_GPIO_Init+0x234>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000952:	f003 0308 	and.w	r3, r3, #8
 8000956:	607b      	str	r3, [r7, #4]
 8000958:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800095a:	4b63      	ldr	r3, [pc, #396]	@ (8000ae8 <MX_GPIO_Init+0x234>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095e:	4a62      	ldr	r2, [pc, #392]	@ (8000ae8 <MX_GPIO_Init+0x234>)
 8000960:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000964:	6313      	str	r3, [r2, #48]	@ 0x30
 8000966:	4b60      	ldr	r3, [pc, #384]	@ (8000ae8 <MX_GPIO_Init+0x234>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800096e:	603b      	str	r3, [r7, #0]
 8000970:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000972:	2200      	movs	r2, #0
 8000974:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000978:	485c      	ldr	r0, [pc, #368]	@ (8000aec <MX_GPIO_Init+0x238>)
 800097a:	f000 ff2d 	bl	80017d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NLD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800097e:	2200      	movs	r2, #0
 8000980:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000984:	485a      	ldr	r0, [pc, #360]	@ (8000af0 <MX_GPIO_Init+0x23c>)
 8000986:	f000 ff27 	bl	80017d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800098a:	2200      	movs	r2, #0
 800098c:	2140      	movs	r1, #64	@ 0x40
 800098e:	4859      	ldr	r0, [pc, #356]	@ (8000af4 <MX_GPIO_Init+0x240>)
 8000990:	f000 ff22 	bl	80017d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000994:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000998:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800099a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800099e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	2300      	movs	r3, #0
 80009a2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80009a4:	f107 031c 	add.w	r3, r7, #28
 80009a8:	4619      	mov	r1, r3
 80009aa:	4853      	ldr	r0, [pc, #332]	@ (8000af8 <MX_GPIO_Init+0x244>)
 80009ac:	f000 fd68 	bl	8001480 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 80009b0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80009b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b6:	2301      	movs	r3, #1
 80009b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009be:	2300      	movs	r3, #0
 80009c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 80009c2:	f107 031c 	add.w	r3, r7, #28
 80009c6:	4619      	mov	r1, r3
 80009c8:	4848      	ldr	r0, [pc, #288]	@ (8000aec <MX_GPIO_Init+0x238>)
 80009ca:	f000 fd59 	bl	8001480 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80009ce:	2332      	movs	r3, #50	@ 0x32
 80009d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d2:	2302      	movs	r3, #2
 80009d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009da:	2303      	movs	r3, #3
 80009dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009de:	230b      	movs	r3, #11
 80009e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009e2:	f107 031c 	add.w	r3, r7, #28
 80009e6:	4619      	mov	r1, r3
 80009e8:	4843      	ldr	r0, [pc, #268]	@ (8000af8 <MX_GPIO_Init+0x244>)
 80009ea:	f000 fd49 	bl	8001480 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80009ee:	2386      	movs	r3, #134	@ 0x86
 80009f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f2:	2302      	movs	r3, #2
 80009f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	2300      	movs	r3, #0
 80009f8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009fa:	2303      	movs	r3, #3
 80009fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009fe:	230b      	movs	r3, #11
 8000a00:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a02:	f107 031c 	add.w	r3, r7, #28
 8000a06:	4619      	mov	r1, r3
 8000a08:	483c      	ldr	r0, [pc, #240]	@ (8000afc <MX_GPIO_Init+0x248>)
 8000a0a:	f000 fd39 	bl	8001480 <HAL_GPIO_Init>

  /*Configure GPIO pins : NLD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = NLD1_Pin|LD3_Pin|LD2_Pin;
 8000a0e:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000a12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a14:	2301      	movs	r3, #1
 8000a16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a20:	f107 031c 	add.w	r3, r7, #28
 8000a24:	4619      	mov	r1, r3
 8000a26:	4832      	ldr	r0, [pc, #200]	@ (8000af0 <MX_GPIO_Init+0x23c>)
 8000a28:	f000 fd2a 	bl	8001480 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000a2c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a32:	2302      	movs	r3, #2
 8000a34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a3a:	2303      	movs	r3, #3
 8000a3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a3e:	230b      	movs	r3, #11
 8000a40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000a42:	f107 031c 	add.w	r3, r7, #28
 8000a46:	4619      	mov	r1, r3
 8000a48:	4829      	ldr	r0, [pc, #164]	@ (8000af0 <MX_GPIO_Init+0x23c>)
 8000a4a:	f000 fd19 	bl	8001480 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a4e:	2340      	movs	r3, #64	@ 0x40
 8000a50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a52:	2301      	movs	r3, #1
 8000a54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a56:	2300      	movs	r3, #0
 8000a58:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a5e:	f107 031c 	add.w	r3, r7, #28
 8000a62:	4619      	mov	r1, r3
 8000a64:	4823      	ldr	r0, [pc, #140]	@ (8000af4 <MX_GPIO_Init+0x240>)
 8000a66:	f000 fd0b 	bl	8001480 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a6a:	2380      	movs	r3, #128	@ 0x80
 8000a6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a72:	2300      	movs	r3, #0
 8000a74:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a76:	f107 031c 	add.w	r3, r7, #28
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	481d      	ldr	r0, [pc, #116]	@ (8000af4 <MX_GPIO_Init+0x240>)
 8000a7e:	f000 fcff 	bl	8001480 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000a82:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000a86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a88:	2302      	movs	r3, #2
 8000a8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a90:	2303      	movs	r3, #3
 8000a92:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a94:	230a      	movs	r3, #10
 8000a96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a98:	f107 031c 	add.w	r3, r7, #28
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	4817      	ldr	r0, [pc, #92]	@ (8000afc <MX_GPIO_Init+0x248>)
 8000aa0:	f000 fcee 	bl	8001480 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000aa4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000aa8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000ab2:	f107 031c 	add.w	r3, r7, #28
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	4810      	ldr	r0, [pc, #64]	@ (8000afc <MX_GPIO_Init+0x248>)
 8000aba:	f000 fce1 	bl	8001480 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000abe:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000ac2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000acc:	2303      	movs	r3, #3
 8000ace:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ad0:	230b      	movs	r3, #11
 8000ad2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ad4:	f107 031c 	add.w	r3, r7, #28
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4806      	ldr	r0, [pc, #24]	@ (8000af4 <MX_GPIO_Init+0x240>)
 8000adc:	f000 fcd0 	bl	8001480 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ae0:	bf00      	nop
 8000ae2:	3730      	adds	r7, #48	@ 0x30
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	40023800 	.word	0x40023800
 8000aec:	40021400 	.word	0x40021400
 8000af0:	40020400 	.word	0x40020400
 8000af4:	40021800 	.word	0x40021800
 8000af8:	40020800 	.word	0x40020800
 8000afc:	40020000 	.word	0x40020000

08000b00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b04:	b672      	cpsid	i
}
 8000b06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b08:	bf00      	nop
 8000b0a:	e7fd      	b.n	8000b08 <Error_Handler+0x8>

08000b0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b12:	4b0f      	ldr	r3, [pc, #60]	@ (8000b50 <HAL_MspInit+0x44>)
 8000b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b16:	4a0e      	ldr	r2, [pc, #56]	@ (8000b50 <HAL_MspInit+0x44>)
 8000b18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b1e:	4b0c      	ldr	r3, [pc, #48]	@ (8000b50 <HAL_MspInit+0x44>)
 8000b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b26:	607b      	str	r3, [r7, #4]
 8000b28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b2a:	4b09      	ldr	r3, [pc, #36]	@ (8000b50 <HAL_MspInit+0x44>)
 8000b2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b2e:	4a08      	ldr	r2, [pc, #32]	@ (8000b50 <HAL_MspInit+0x44>)
 8000b30:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b34:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b36:	4b06      	ldr	r3, [pc, #24]	@ (8000b50 <HAL_MspInit+0x44>)
 8000b38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b3e:	603b      	str	r3, [r7, #0]
 8000b40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b42:	bf00      	nop
 8000b44:	370c      	adds	r7, #12
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	40023800 	.word	0x40023800

08000b54 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b08a      	sub	sp, #40	@ 0x28
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5c:	f107 0314 	add.w	r3, r7, #20
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	605a      	str	r2, [r3, #4]
 8000b66:	609a      	str	r2, [r3, #8]
 8000b68:	60da      	str	r2, [r3, #12]
 8000b6a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a1f      	ldr	r2, [pc, #124]	@ (8000bf0 <HAL_CAN_MspInit+0x9c>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d137      	bne.n	8000be6 <HAL_CAN_MspInit+0x92>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000b76:	4b1f      	ldr	r3, [pc, #124]	@ (8000bf4 <HAL_CAN_MspInit+0xa0>)
 8000b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b7a:	4a1e      	ldr	r2, [pc, #120]	@ (8000bf4 <HAL_CAN_MspInit+0xa0>)
 8000b7c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000b80:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b82:	4b1c      	ldr	r3, [pc, #112]	@ (8000bf4 <HAL_CAN_MspInit+0xa0>)
 8000b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000b8a:	613b      	str	r3, [r7, #16]
 8000b8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b8e:	4b19      	ldr	r3, [pc, #100]	@ (8000bf4 <HAL_CAN_MspInit+0xa0>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b92:	4a18      	ldr	r2, [pc, #96]	@ (8000bf4 <HAL_CAN_MspInit+0xa0>)
 8000b94:	f043 0308 	orr.w	r3, r3, #8
 8000b98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b9a:	4b16      	ldr	r3, [pc, #88]	@ (8000bf4 <HAL_CAN_MspInit+0xa0>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9e:	f003 0308 	and.w	r3, r3, #8
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000baa:	2302      	movs	r3, #2
 8000bac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb2:	2303      	movs	r3, #3
 8000bb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000bb6:	2309      	movs	r3, #9
 8000bb8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bba:	f107 0314 	add.w	r3, r7, #20
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	480d      	ldr	r0, [pc, #52]	@ (8000bf8 <HAL_CAN_MspInit+0xa4>)
 8000bc2:	f000 fc5d 	bl	8001480 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000bc6:	2302      	movs	r3, #2
 8000bc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bca:	2302      	movs	r3, #2
 8000bcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd2:	2303      	movs	r3, #3
 8000bd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000bd6:	2309      	movs	r3, #9
 8000bd8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bda:	f107 0314 	add.w	r3, r7, #20
 8000bde:	4619      	mov	r1, r3
 8000be0:	4805      	ldr	r0, [pc, #20]	@ (8000bf8 <HAL_CAN_MspInit+0xa4>)
 8000be2:	f000 fc4d 	bl	8001480 <HAL_GPIO_Init>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8000be6:	bf00      	nop
 8000be8:	3728      	adds	r7, #40	@ 0x28
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	40006400 	.word	0x40006400
 8000bf4:	40023800 	.word	0x40023800
 8000bf8:	40020c00 	.word	0x40020c00

08000bfc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b0ae      	sub	sp, #184	@ 0xb8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c04:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	605a      	str	r2, [r3, #4]
 8000c0e:	609a      	str	r2, [r3, #8]
 8000c10:	60da      	str	r2, [r3, #12]
 8000c12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c14:	f107 0314 	add.w	r3, r7, #20
 8000c18:	2290      	movs	r2, #144	@ 0x90
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f002 fbe8 	bl	80033f2 <memset>
  if(huart->Instance==USART3)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4a22      	ldr	r2, [pc, #136]	@ (8000cb0 <HAL_UART_MspInit+0xb4>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d13c      	bne.n	8000ca6 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000c2c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c30:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000c32:	2300      	movs	r3, #0
 8000c34:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c36:	f107 0314 	add.w	r3, r7, #20
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f001 fae4 	bl	8002208 <HAL_RCCEx_PeriphCLKConfig>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000c46:	f7ff ff5b 	bl	8000b00 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c4a:	4b1a      	ldr	r3, [pc, #104]	@ (8000cb4 <HAL_UART_MspInit+0xb8>)
 8000c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c4e:	4a19      	ldr	r2, [pc, #100]	@ (8000cb4 <HAL_UART_MspInit+0xb8>)
 8000c50:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000c54:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c56:	4b17      	ldr	r3, [pc, #92]	@ (8000cb4 <HAL_UART_MspInit+0xb8>)
 8000c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c5a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000c5e:	613b      	str	r3, [r7, #16]
 8000c60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c62:	4b14      	ldr	r3, [pc, #80]	@ (8000cb4 <HAL_UART_MspInit+0xb8>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c66:	4a13      	ldr	r2, [pc, #76]	@ (8000cb4 <HAL_UART_MspInit+0xb8>)
 8000c68:	f043 0308 	orr.w	r3, r3, #8
 8000c6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c6e:	4b11      	ldr	r3, [pc, #68]	@ (8000cb4 <HAL_UART_MspInit+0xb8>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c72:	f003 0308 	and.w	r3, r3, #8
 8000c76:	60fb      	str	r3, [r7, #12]
 8000c78:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000c7a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000c7e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c82:	2302      	movs	r3, #2
 8000c84:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c8e:	2303      	movs	r3, #3
 8000c90:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c94:	2307      	movs	r3, #7
 8000c96:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c9a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4805      	ldr	r0, [pc, #20]	@ (8000cb8 <HAL_UART_MspInit+0xbc>)
 8000ca2:	f000 fbed 	bl	8001480 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000ca6:	bf00      	nop
 8000ca8:	37b8      	adds	r7, #184	@ 0xb8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	40004800 	.word	0x40004800
 8000cb4:	40023800 	.word	0x40023800
 8000cb8:	40020c00 	.word	0x40020c00

08000cbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cc0:	bf00      	nop
 8000cc2:	e7fd      	b.n	8000cc0 <NMI_Handler+0x4>

08000cc4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cc8:	bf00      	nop
 8000cca:	e7fd      	b.n	8000cc8 <HardFault_Handler+0x4>

08000ccc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cd0:	bf00      	nop
 8000cd2:	e7fd      	b.n	8000cd0 <MemManage_Handler+0x4>

08000cd4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cd8:	bf00      	nop
 8000cda:	e7fd      	b.n	8000cd8 <BusFault_Handler+0x4>

08000cdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ce0:	bf00      	nop
 8000ce2:	e7fd      	b.n	8000ce0 <UsageFault_Handler+0x4>

08000ce4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ce8:	bf00      	nop
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr

08000cf2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cf6:	bf00      	nop
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr

08000d00 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d04:	bf00      	nop
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr

08000d0e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d12:	f000 f87b 	bl	8000e0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d16:	bf00      	nop
 8000d18:	bd80      	pop	{r7, pc}
	...

08000d1c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d20:	4b06      	ldr	r3, [pc, #24]	@ (8000d3c <SystemInit+0x20>)
 8000d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d26:	4a05      	ldr	r2, [pc, #20]	@ (8000d3c <SystemInit+0x20>)
 8000d28:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d2c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d30:	bf00      	nop
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	e000ed00 	.word	0xe000ed00

08000d40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d40:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d78 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d44:	f7ff ffea 	bl	8000d1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d48:	480c      	ldr	r0, [pc, #48]	@ (8000d7c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d4a:	490d      	ldr	r1, [pc, #52]	@ (8000d80 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d4c:	4a0d      	ldr	r2, [pc, #52]	@ (8000d84 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d50:	e002      	b.n	8000d58 <LoopCopyDataInit>

08000d52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d56:	3304      	adds	r3, #4

08000d58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d5c:	d3f9      	bcc.n	8000d52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d5e:	4a0a      	ldr	r2, [pc, #40]	@ (8000d88 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d60:	4c0a      	ldr	r4, [pc, #40]	@ (8000d8c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d64:	e001      	b.n	8000d6a <LoopFillZerobss>

08000d66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d68:	3204      	adds	r2, #4

08000d6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d6c:	d3fb      	bcc.n	8000d66 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000d6e:	f002 fb49 	bl	8003404 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d72:	f7ff fbd9 	bl	8000528 <main>
  bx  lr    
 8000d76:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d78:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000d7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d80:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d84:	0800348c 	.word	0x0800348c
  ldr r2, =_sbss
 8000d88:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d8c:	20000100 	.word	0x20000100

08000d90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d90:	e7fe      	b.n	8000d90 <ADC_IRQHandler>

08000d92 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d92:	b580      	push	{r7, lr}
 8000d94:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d96:	2003      	movs	r0, #3
 8000d98:	f000 fb3e 	bl	8001418 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d9c:	2000      	movs	r0, #0
 8000d9e:	f000 f805 	bl	8000dac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000da2:	f7ff feb3 	bl	8000b0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000da6:	2300      	movs	r3, #0
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	bd80      	pop	{r7, pc}

08000dac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000db4:	4b12      	ldr	r3, [pc, #72]	@ (8000e00 <HAL_InitTick+0x54>)
 8000db6:	681a      	ldr	r2, [r3, #0]
 8000db8:	4b12      	ldr	r3, [pc, #72]	@ (8000e04 <HAL_InitTick+0x58>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f000 fb4b 	bl	8001466 <HAL_SYSTICK_Config>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	e00e      	b.n	8000df8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2b0f      	cmp	r3, #15
 8000dde:	d80a      	bhi.n	8000df6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000de0:	2200      	movs	r2, #0
 8000de2:	6879      	ldr	r1, [r7, #4]
 8000de4:	f04f 30ff 	mov.w	r0, #4294967295
 8000de8:	f000 fb21 	bl	800142e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dec:	4a06      	ldr	r2, [pc, #24]	@ (8000e08 <HAL_InitTick+0x5c>)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000df2:	2300      	movs	r3, #0
 8000df4:	e000      	b.n	8000df8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000df6:	2301      	movs	r3, #1
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	3708      	adds	r7, #8
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	20000000 	.word	0x20000000
 8000e04:	20000008 	.word	0x20000008
 8000e08:	20000004 	.word	0x20000004

08000e0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e10:	4b06      	ldr	r3, [pc, #24]	@ (8000e2c <HAL_IncTick+0x20>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	461a      	mov	r2, r3
 8000e16:	4b06      	ldr	r3, [pc, #24]	@ (8000e30 <HAL_IncTick+0x24>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4413      	add	r3, r2
 8000e1c:	4a04      	ldr	r2, [pc, #16]	@ (8000e30 <HAL_IncTick+0x24>)
 8000e1e:	6013      	str	r3, [r2, #0]
}
 8000e20:	bf00      	nop
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	20000008 	.word	0x20000008
 8000e30:	200000fc 	.word	0x200000fc

08000e34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  return uwTick;
 8000e38:	4b03      	ldr	r3, [pc, #12]	@ (8000e48 <HAL_GetTick+0x14>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	200000fc 	.word	0x200000fc

08000e4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e54:	f7ff ffee 	bl	8000e34 <HAL_GetTick>
 8000e58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e64:	d005      	beq.n	8000e72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e66:	4b0a      	ldr	r3, [pc, #40]	@ (8000e90 <HAL_Delay+0x44>)
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	461a      	mov	r2, r3
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	4413      	add	r3, r2
 8000e70:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e72:	bf00      	nop
 8000e74:	f7ff ffde 	bl	8000e34 <HAL_GetTick>
 8000e78:	4602      	mov	r2, r0
 8000e7a:	68bb      	ldr	r3, [r7, #8]
 8000e7c:	1ad3      	subs	r3, r2, r3
 8000e7e:	68fa      	ldr	r2, [r7, #12]
 8000e80:	429a      	cmp	r2, r3
 8000e82:	d8f7      	bhi.n	8000e74 <HAL_Delay+0x28>
  {
  }
}
 8000e84:	bf00      	nop
 8000e86:	bf00      	nop
 8000e88:	3710      	adds	r7, #16
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	20000008 	.word	0x20000008

08000e94 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b084      	sub	sp, #16
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d101      	bne.n	8000ea6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	e0ed      	b.n	8001082 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d102      	bne.n	8000eb8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000eb2:	6878      	ldr	r0, [r7, #4]
 8000eb4:	f7ff fe4e 	bl	8000b54 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f042 0201 	orr.w	r2, r2, #1
 8000ec6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ec8:	f7ff ffb4 	bl	8000e34 <HAL_GetTick>
 8000ecc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000ece:	e012      	b.n	8000ef6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ed0:	f7ff ffb0 	bl	8000e34 <HAL_GetTick>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	1ad3      	subs	r3, r2, r3
 8000eda:	2b0a      	cmp	r3, #10
 8000edc:	d90b      	bls.n	8000ef6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ee2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2205      	movs	r2, #5
 8000eee:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e0c5      	b.n	8001082 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	f003 0301 	and.w	r3, r3, #1
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d0e5      	beq.n	8000ed0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f022 0202 	bic.w	r2, r2, #2
 8000f12:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f14:	f7ff ff8e 	bl	8000e34 <HAL_GetTick>
 8000f18:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000f1a:	e012      	b.n	8000f42 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f1c:	f7ff ff8a 	bl	8000e34 <HAL_GetTick>
 8000f20:	4602      	mov	r2, r0
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	1ad3      	subs	r3, r2, r3
 8000f26:	2b0a      	cmp	r3, #10
 8000f28:	d90b      	bls.n	8000f42 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f2e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2205      	movs	r2, #5
 8000f3a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	e09f      	b.n	8001082 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	f003 0302 	and.w	r3, r3, #2
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d1e5      	bne.n	8000f1c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	7e1b      	ldrb	r3, [r3, #24]
 8000f54:	2b01      	cmp	r3, #1
 8000f56:	d108      	bne.n	8000f6a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	e007      	b.n	8000f7a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	681a      	ldr	r2, [r3, #0]
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000f78:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	7e5b      	ldrb	r3, [r3, #25]
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	d108      	bne.n	8000f94 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000f90:	601a      	str	r2, [r3, #0]
 8000f92:	e007      	b.n	8000fa4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000fa2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	7e9b      	ldrb	r3, [r3, #26]
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	d108      	bne.n	8000fbe <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f042 0220 	orr.w	r2, r2, #32
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	e007      	b.n	8000fce <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f022 0220 	bic.w	r2, r2, #32
 8000fcc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	7edb      	ldrb	r3, [r3, #27]
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d108      	bne.n	8000fe8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f022 0210 	bic.w	r2, r2, #16
 8000fe4:	601a      	str	r2, [r3, #0]
 8000fe6:	e007      	b.n	8000ff8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f042 0210 	orr.w	r2, r2, #16
 8000ff6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	7f1b      	ldrb	r3, [r3, #28]
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d108      	bne.n	8001012 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f042 0208 	orr.w	r2, r2, #8
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	e007      	b.n	8001022 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f022 0208 	bic.w	r2, r2, #8
 8001020:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	7f5b      	ldrb	r3, [r3, #29]
 8001026:	2b01      	cmp	r3, #1
 8001028:	d108      	bne.n	800103c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f042 0204 	orr.w	r2, r2, #4
 8001038:	601a      	str	r2, [r3, #0]
 800103a:	e007      	b.n	800104c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f022 0204 	bic.w	r2, r2, #4
 800104a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	689a      	ldr	r2, [r3, #8]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	431a      	orrs	r2, r3
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	691b      	ldr	r3, [r3, #16]
 800105a:	431a      	orrs	r2, r3
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	695b      	ldr	r3, [r3, #20]
 8001060:	ea42 0103 	orr.w	r1, r2, r3
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	1e5a      	subs	r2, r3, #1
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	430a      	orrs	r2, r1
 8001070:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2200      	movs	r2, #0
 8001076:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2201      	movs	r2, #1
 800107c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001080:	2300      	movs	r3, #0
}
 8001082:	4618      	mov	r0, r3
 8001084:	3710      	adds	r7, #16
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}

0800108a <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800108a:	b580      	push	{r7, lr}
 800108c:	b084      	sub	sp, #16
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001098:	b2db      	uxtb	r3, r3
 800109a:	2b01      	cmp	r3, #1
 800109c:	d12e      	bne.n	80010fc <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2202      	movs	r2, #2
 80010a2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f022 0201 	bic.w	r2, r2, #1
 80010b4:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80010b6:	f7ff febd 	bl	8000e34 <HAL_GetTick>
 80010ba:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80010bc:	e012      	b.n	80010e4 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80010be:	f7ff feb9 	bl	8000e34 <HAL_GetTick>
 80010c2:	4602      	mov	r2, r0
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	1ad3      	subs	r3, r2, r3
 80010c8:	2b0a      	cmp	r3, #10
 80010ca:	d90b      	bls.n	80010e4 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010d0:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2205      	movs	r2, #5
 80010dc:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80010e0:	2301      	movs	r3, #1
 80010e2:	e012      	b.n	800110a <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	f003 0301 	and.w	r3, r3, #1
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d1e5      	bne.n	80010be <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2200      	movs	r2, #0
 80010f6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80010f8:	2300      	movs	r3, #0
 80010fa:	e006      	b.n	800110a <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001100:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001108:	2301      	movs	r3, #1
  }
}
 800110a:	4618      	mov	r0, r3
 800110c:	3710      	adds	r7, #16
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001112:	b480      	push	{r7}
 8001114:	b089      	sub	sp, #36	@ 0x24
 8001116:	af00      	add	r7, sp, #0
 8001118:	60f8      	str	r0, [r7, #12]
 800111a:	60b9      	str	r1, [r7, #8]
 800111c:	607a      	str	r2, [r7, #4]
 800111e:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001126:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	689b      	ldr	r3, [r3, #8]
 800112e:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001130:	7ffb      	ldrb	r3, [r7, #31]
 8001132:	2b01      	cmp	r3, #1
 8001134:	d003      	beq.n	800113e <HAL_CAN_AddTxMessage+0x2c>
 8001136:	7ffb      	ldrb	r3, [r7, #31]
 8001138:	2b02      	cmp	r3, #2
 800113a:	f040 80ad 	bne.w	8001298 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800113e:	69bb      	ldr	r3, [r7, #24]
 8001140:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001144:	2b00      	cmp	r3, #0
 8001146:	d10a      	bne.n	800115e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001148:	69bb      	ldr	r3, [r7, #24]
 800114a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800114e:	2b00      	cmp	r3, #0
 8001150:	d105      	bne.n	800115e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001152:	69bb      	ldr	r3, [r7, #24]
 8001154:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001158:	2b00      	cmp	r3, #0
 800115a:	f000 8095 	beq.w	8001288 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800115e:	69bb      	ldr	r3, [r7, #24]
 8001160:	0e1b      	lsrs	r3, r3, #24
 8001162:	f003 0303 	and.w	r3, r3, #3
 8001166:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001168:	2201      	movs	r2, #1
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	409a      	lsls	r2, r3
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001172:	68bb      	ldr	r3, [r7, #8]
 8001174:	689b      	ldr	r3, [r3, #8]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d10d      	bne.n	8001196 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001184:	68f9      	ldr	r1, [r7, #12]
 8001186:	6809      	ldr	r1, [r1, #0]
 8001188:	431a      	orrs	r2, r3
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	3318      	adds	r3, #24
 800118e:	011b      	lsls	r3, r3, #4
 8001190:	440b      	add	r3, r1
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	e00f      	b.n	80011b6 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001196:	68bb      	ldr	r3, [r7, #8]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80011a0:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80011a2:	68bb      	ldr	r3, [r7, #8]
 80011a4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80011a6:	68f9      	ldr	r1, [r7, #12]
 80011a8:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80011aa:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	3318      	adds	r3, #24
 80011b0:	011b      	lsls	r3, r3, #4
 80011b2:	440b      	add	r3, r1
 80011b4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	6819      	ldr	r1, [r3, #0]
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	691a      	ldr	r2, [r3, #16]
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	3318      	adds	r3, #24
 80011c2:	011b      	lsls	r3, r3, #4
 80011c4:	440b      	add	r3, r1
 80011c6:	3304      	adds	r3, #4
 80011c8:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	7d1b      	ldrb	r3, [r3, #20]
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d111      	bne.n	80011f6 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	3318      	adds	r3, #24
 80011da:	011b      	lsls	r3, r3, #4
 80011dc:	4413      	add	r3, r2
 80011de:	3304      	adds	r3, #4
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	68fa      	ldr	r2, [r7, #12]
 80011e4:	6811      	ldr	r1, [r2, #0]
 80011e6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	3318      	adds	r3, #24
 80011ee:	011b      	lsls	r3, r3, #4
 80011f0:	440b      	add	r3, r1
 80011f2:	3304      	adds	r3, #4
 80011f4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	3307      	adds	r3, #7
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	061a      	lsls	r2, r3, #24
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	3306      	adds	r3, #6
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	041b      	lsls	r3, r3, #16
 8001206:	431a      	orrs	r2, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	3305      	adds	r3, #5
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	021b      	lsls	r3, r3, #8
 8001210:	4313      	orrs	r3, r2
 8001212:	687a      	ldr	r2, [r7, #4]
 8001214:	3204      	adds	r2, #4
 8001216:	7812      	ldrb	r2, [r2, #0]
 8001218:	4610      	mov	r0, r2
 800121a:	68fa      	ldr	r2, [r7, #12]
 800121c:	6811      	ldr	r1, [r2, #0]
 800121e:	ea43 0200 	orr.w	r2, r3, r0
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	011b      	lsls	r3, r3, #4
 8001226:	440b      	add	r3, r1
 8001228:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800122c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	3303      	adds	r3, #3
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	061a      	lsls	r2, r3, #24
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	3302      	adds	r3, #2
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	041b      	lsls	r3, r3, #16
 800123e:	431a      	orrs	r2, r3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	3301      	adds	r3, #1
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	021b      	lsls	r3, r3, #8
 8001248:	4313      	orrs	r3, r2
 800124a:	687a      	ldr	r2, [r7, #4]
 800124c:	7812      	ldrb	r2, [r2, #0]
 800124e:	4610      	mov	r0, r2
 8001250:	68fa      	ldr	r2, [r7, #12]
 8001252:	6811      	ldr	r1, [r2, #0]
 8001254:	ea43 0200 	orr.w	r2, r3, r0
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	011b      	lsls	r3, r3, #4
 800125c:	440b      	add	r3, r1
 800125e:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001262:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	3318      	adds	r3, #24
 800126c:	011b      	lsls	r3, r3, #4
 800126e:	4413      	add	r3, r2
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	68fa      	ldr	r2, [r7, #12]
 8001274:	6811      	ldr	r1, [r2, #0]
 8001276:	f043 0201 	orr.w	r2, r3, #1
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	3318      	adds	r3, #24
 800127e:	011b      	lsls	r3, r3, #4
 8001280:	440b      	add	r3, r1
 8001282:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001284:	2300      	movs	r3, #0
 8001286:	e00e      	b.n	80012a6 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800128c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001294:	2301      	movs	r3, #1
 8001296:	e006      	b.n	80012a6 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800129c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80012a4:	2301      	movs	r3, #1
  }
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3724      	adds	r7, #36	@ 0x24
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
	...

080012b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b085      	sub	sp, #20
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	f003 0307 	and.w	r3, r3, #7
 80012c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012c4:	4b0b      	ldr	r3, [pc, #44]	@ (80012f4 <__NVIC_SetPriorityGrouping+0x40>)
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012ca:	68ba      	ldr	r2, [r7, #8]
 80012cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012d0:	4013      	ands	r3, r2
 80012d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80012dc:	4b06      	ldr	r3, [pc, #24]	@ (80012f8 <__NVIC_SetPriorityGrouping+0x44>)
 80012de:	4313      	orrs	r3, r2
 80012e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012e2:	4a04      	ldr	r2, [pc, #16]	@ (80012f4 <__NVIC_SetPriorityGrouping+0x40>)
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	60d3      	str	r3, [r2, #12]
}
 80012e8:	bf00      	nop
 80012ea:	3714      	adds	r7, #20
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr
 80012f4:	e000ed00 	.word	0xe000ed00
 80012f8:	05fa0000 	.word	0x05fa0000

080012fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001300:	4b04      	ldr	r3, [pc, #16]	@ (8001314 <__NVIC_GetPriorityGrouping+0x18>)
 8001302:	68db      	ldr	r3, [r3, #12]
 8001304:	0a1b      	lsrs	r3, r3, #8
 8001306:	f003 0307 	and.w	r3, r3, #7
}
 800130a:	4618      	mov	r0, r3
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr
 8001314:	e000ed00 	.word	0xe000ed00

08001318 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	4603      	mov	r3, r0
 8001320:	6039      	str	r1, [r7, #0]
 8001322:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001324:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001328:	2b00      	cmp	r3, #0
 800132a:	db0a      	blt.n	8001342 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	b2da      	uxtb	r2, r3
 8001330:	490c      	ldr	r1, [pc, #48]	@ (8001364 <__NVIC_SetPriority+0x4c>)
 8001332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001336:	0112      	lsls	r2, r2, #4
 8001338:	b2d2      	uxtb	r2, r2
 800133a:	440b      	add	r3, r1
 800133c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001340:	e00a      	b.n	8001358 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	b2da      	uxtb	r2, r3
 8001346:	4908      	ldr	r1, [pc, #32]	@ (8001368 <__NVIC_SetPriority+0x50>)
 8001348:	79fb      	ldrb	r3, [r7, #7]
 800134a:	f003 030f 	and.w	r3, r3, #15
 800134e:	3b04      	subs	r3, #4
 8001350:	0112      	lsls	r2, r2, #4
 8001352:	b2d2      	uxtb	r2, r2
 8001354:	440b      	add	r3, r1
 8001356:	761a      	strb	r2, [r3, #24]
}
 8001358:	bf00      	nop
 800135a:	370c      	adds	r7, #12
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr
 8001364:	e000e100 	.word	0xe000e100
 8001368:	e000ed00 	.word	0xe000ed00

0800136c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800136c:	b480      	push	{r7}
 800136e:	b089      	sub	sp, #36	@ 0x24
 8001370:	af00      	add	r7, sp, #0
 8001372:	60f8      	str	r0, [r7, #12]
 8001374:	60b9      	str	r1, [r7, #8]
 8001376:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	f003 0307 	and.w	r3, r3, #7
 800137e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001380:	69fb      	ldr	r3, [r7, #28]
 8001382:	f1c3 0307 	rsb	r3, r3, #7
 8001386:	2b04      	cmp	r3, #4
 8001388:	bf28      	it	cs
 800138a:	2304      	movcs	r3, #4
 800138c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	3304      	adds	r3, #4
 8001392:	2b06      	cmp	r3, #6
 8001394:	d902      	bls.n	800139c <NVIC_EncodePriority+0x30>
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	3b03      	subs	r3, #3
 800139a:	e000      	b.n	800139e <NVIC_EncodePriority+0x32>
 800139c:	2300      	movs	r3, #0
 800139e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013a0:	f04f 32ff 	mov.w	r2, #4294967295
 80013a4:	69bb      	ldr	r3, [r7, #24]
 80013a6:	fa02 f303 	lsl.w	r3, r2, r3
 80013aa:	43da      	mvns	r2, r3
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	401a      	ands	r2, r3
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013b4:	f04f 31ff 	mov.w	r1, #4294967295
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	fa01 f303 	lsl.w	r3, r1, r3
 80013be:	43d9      	mvns	r1, r3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013c4:	4313      	orrs	r3, r2
         );
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3724      	adds	r7, #36	@ 0x24
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
	...

080013d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	3b01      	subs	r3, #1
 80013e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80013e4:	d301      	bcc.n	80013ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013e6:	2301      	movs	r3, #1
 80013e8:	e00f      	b.n	800140a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001414 <SysTick_Config+0x40>)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	3b01      	subs	r3, #1
 80013f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013f2:	210f      	movs	r1, #15
 80013f4:	f04f 30ff 	mov.w	r0, #4294967295
 80013f8:	f7ff ff8e 	bl	8001318 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013fc:	4b05      	ldr	r3, [pc, #20]	@ (8001414 <SysTick_Config+0x40>)
 80013fe:	2200      	movs	r2, #0
 8001400:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001402:	4b04      	ldr	r3, [pc, #16]	@ (8001414 <SysTick_Config+0x40>)
 8001404:	2207      	movs	r2, #7
 8001406:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001408:	2300      	movs	r3, #0
}
 800140a:	4618      	mov	r0, r3
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	e000e010 	.word	0xe000e010

08001418 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f7ff ff47 	bl	80012b4 <__NVIC_SetPriorityGrouping>
}
 8001426:	bf00      	nop
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}

0800142e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800142e:	b580      	push	{r7, lr}
 8001430:	b086      	sub	sp, #24
 8001432:	af00      	add	r7, sp, #0
 8001434:	4603      	mov	r3, r0
 8001436:	60b9      	str	r1, [r7, #8]
 8001438:	607a      	str	r2, [r7, #4]
 800143a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800143c:	2300      	movs	r3, #0
 800143e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001440:	f7ff ff5c 	bl	80012fc <__NVIC_GetPriorityGrouping>
 8001444:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001446:	687a      	ldr	r2, [r7, #4]
 8001448:	68b9      	ldr	r1, [r7, #8]
 800144a:	6978      	ldr	r0, [r7, #20]
 800144c:	f7ff ff8e 	bl	800136c <NVIC_EncodePriority>
 8001450:	4602      	mov	r2, r0
 8001452:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001456:	4611      	mov	r1, r2
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff ff5d 	bl	8001318 <__NVIC_SetPriority>
}
 800145e:	bf00      	nop
 8001460:	3718      	adds	r7, #24
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}

08001466 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001466:	b580      	push	{r7, lr}
 8001468:	b082      	sub	sp, #8
 800146a:	af00      	add	r7, sp, #0
 800146c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f7ff ffb0 	bl	80013d4 <SysTick_Config>
 8001474:	4603      	mov	r3, r0
}
 8001476:	4618      	mov	r0, r3
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
	...

08001480 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001480:	b480      	push	{r7}
 8001482:	b089      	sub	sp, #36	@ 0x24
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800148a:	2300      	movs	r3, #0
 800148c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800148e:	2300      	movs	r3, #0
 8001490:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001492:	2300      	movs	r3, #0
 8001494:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001496:	2300      	movs	r3, #0
 8001498:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800149a:	2300      	movs	r3, #0
 800149c:	61fb      	str	r3, [r7, #28]
 800149e:	e175      	b.n	800178c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80014a0:	2201      	movs	r2, #1
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	fa02 f303 	lsl.w	r3, r2, r3
 80014a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	697a      	ldr	r2, [r7, #20]
 80014b0:	4013      	ands	r3, r2
 80014b2:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80014b4:	693a      	ldr	r2, [r7, #16]
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	429a      	cmp	r2, r3
 80014ba:	f040 8164 	bne.w	8001786 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	f003 0303 	and.w	r3, r3, #3
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d005      	beq.n	80014d6 <HAL_GPIO_Init+0x56>
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	f003 0303 	and.w	r3, r3, #3
 80014d2:	2b02      	cmp	r3, #2
 80014d4:	d130      	bne.n	8001538 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	005b      	lsls	r3, r3, #1
 80014e0:	2203      	movs	r2, #3
 80014e2:	fa02 f303 	lsl.w	r3, r2, r3
 80014e6:	43db      	mvns	r3, r3
 80014e8:	69ba      	ldr	r2, [r7, #24]
 80014ea:	4013      	ands	r3, r2
 80014ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	68da      	ldr	r2, [r3, #12]
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	005b      	lsls	r3, r3, #1
 80014f6:	fa02 f303 	lsl.w	r3, r2, r3
 80014fa:	69ba      	ldr	r2, [r7, #24]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	69ba      	ldr	r2, [r7, #24]
 8001504:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800150c:	2201      	movs	r2, #1
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	fa02 f303 	lsl.w	r3, r2, r3
 8001514:	43db      	mvns	r3, r3
 8001516:	69ba      	ldr	r2, [r7, #24]
 8001518:	4013      	ands	r3, r2
 800151a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	091b      	lsrs	r3, r3, #4
 8001522:	f003 0201 	and.w	r2, r3, #1
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	fa02 f303 	lsl.w	r3, r2, r3
 800152c:	69ba      	ldr	r2, [r7, #24]
 800152e:	4313      	orrs	r3, r2
 8001530:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	69ba      	ldr	r2, [r7, #24]
 8001536:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f003 0303 	and.w	r3, r3, #3
 8001540:	2b03      	cmp	r3, #3
 8001542:	d017      	beq.n	8001574 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800154a:	69fb      	ldr	r3, [r7, #28]
 800154c:	005b      	lsls	r3, r3, #1
 800154e:	2203      	movs	r2, #3
 8001550:	fa02 f303 	lsl.w	r3, r2, r3
 8001554:	43db      	mvns	r3, r3
 8001556:	69ba      	ldr	r2, [r7, #24]
 8001558:	4013      	ands	r3, r2
 800155a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	689a      	ldr	r2, [r3, #8]
 8001560:	69fb      	ldr	r3, [r7, #28]
 8001562:	005b      	lsls	r3, r3, #1
 8001564:	fa02 f303 	lsl.w	r3, r2, r3
 8001568:	69ba      	ldr	r2, [r7, #24]
 800156a:	4313      	orrs	r3, r2
 800156c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	69ba      	ldr	r2, [r7, #24]
 8001572:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f003 0303 	and.w	r3, r3, #3
 800157c:	2b02      	cmp	r3, #2
 800157e:	d123      	bne.n	80015c8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	08da      	lsrs	r2, r3, #3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	3208      	adds	r2, #8
 8001588:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800158c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	f003 0307 	and.w	r3, r3, #7
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	220f      	movs	r2, #15
 8001598:	fa02 f303 	lsl.w	r3, r2, r3
 800159c:	43db      	mvns	r3, r3
 800159e:	69ba      	ldr	r2, [r7, #24]
 80015a0:	4013      	ands	r3, r2
 80015a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	691a      	ldr	r2, [r3, #16]
 80015a8:	69fb      	ldr	r3, [r7, #28]
 80015aa:	f003 0307 	and.w	r3, r3, #7
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	fa02 f303 	lsl.w	r3, r2, r3
 80015b4:	69ba      	ldr	r2, [r7, #24]
 80015b6:	4313      	orrs	r3, r2
 80015b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	08da      	lsrs	r2, r3, #3
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	3208      	adds	r2, #8
 80015c2:	69b9      	ldr	r1, [r7, #24]
 80015c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	005b      	lsls	r3, r3, #1
 80015d2:	2203      	movs	r2, #3
 80015d4:	fa02 f303 	lsl.w	r3, r2, r3
 80015d8:	43db      	mvns	r3, r3
 80015da:	69ba      	ldr	r2, [r7, #24]
 80015dc:	4013      	ands	r3, r2
 80015de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f003 0203 	and.w	r2, r3, #3
 80015e8:	69fb      	ldr	r3, [r7, #28]
 80015ea:	005b      	lsls	r3, r3, #1
 80015ec:	fa02 f303 	lsl.w	r3, r2, r3
 80015f0:	69ba      	ldr	r2, [r7, #24]
 80015f2:	4313      	orrs	r3, r2
 80015f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001604:	2b00      	cmp	r3, #0
 8001606:	f000 80be 	beq.w	8001786 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800160a:	4b66      	ldr	r3, [pc, #408]	@ (80017a4 <HAL_GPIO_Init+0x324>)
 800160c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800160e:	4a65      	ldr	r2, [pc, #404]	@ (80017a4 <HAL_GPIO_Init+0x324>)
 8001610:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001614:	6453      	str	r3, [r2, #68]	@ 0x44
 8001616:	4b63      	ldr	r3, [pc, #396]	@ (80017a4 <HAL_GPIO_Init+0x324>)
 8001618:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800161a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800161e:	60fb      	str	r3, [r7, #12]
 8001620:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001622:	4a61      	ldr	r2, [pc, #388]	@ (80017a8 <HAL_GPIO_Init+0x328>)
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	089b      	lsrs	r3, r3, #2
 8001628:	3302      	adds	r3, #2
 800162a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800162e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	f003 0303 	and.w	r3, r3, #3
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	220f      	movs	r2, #15
 800163a:	fa02 f303 	lsl.w	r3, r2, r3
 800163e:	43db      	mvns	r3, r3
 8001640:	69ba      	ldr	r2, [r7, #24]
 8001642:	4013      	ands	r3, r2
 8001644:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4a58      	ldr	r2, [pc, #352]	@ (80017ac <HAL_GPIO_Init+0x32c>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d037      	beq.n	80016be <HAL_GPIO_Init+0x23e>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	4a57      	ldr	r2, [pc, #348]	@ (80017b0 <HAL_GPIO_Init+0x330>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d031      	beq.n	80016ba <HAL_GPIO_Init+0x23a>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	4a56      	ldr	r2, [pc, #344]	@ (80017b4 <HAL_GPIO_Init+0x334>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d02b      	beq.n	80016b6 <HAL_GPIO_Init+0x236>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	4a55      	ldr	r2, [pc, #340]	@ (80017b8 <HAL_GPIO_Init+0x338>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d025      	beq.n	80016b2 <HAL_GPIO_Init+0x232>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4a54      	ldr	r2, [pc, #336]	@ (80017bc <HAL_GPIO_Init+0x33c>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d01f      	beq.n	80016ae <HAL_GPIO_Init+0x22e>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4a53      	ldr	r2, [pc, #332]	@ (80017c0 <HAL_GPIO_Init+0x340>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d019      	beq.n	80016aa <HAL_GPIO_Init+0x22a>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4a52      	ldr	r2, [pc, #328]	@ (80017c4 <HAL_GPIO_Init+0x344>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d013      	beq.n	80016a6 <HAL_GPIO_Init+0x226>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4a51      	ldr	r2, [pc, #324]	@ (80017c8 <HAL_GPIO_Init+0x348>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d00d      	beq.n	80016a2 <HAL_GPIO_Init+0x222>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4a50      	ldr	r2, [pc, #320]	@ (80017cc <HAL_GPIO_Init+0x34c>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d007      	beq.n	800169e <HAL_GPIO_Init+0x21e>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4a4f      	ldr	r2, [pc, #316]	@ (80017d0 <HAL_GPIO_Init+0x350>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d101      	bne.n	800169a <HAL_GPIO_Init+0x21a>
 8001696:	2309      	movs	r3, #9
 8001698:	e012      	b.n	80016c0 <HAL_GPIO_Init+0x240>
 800169a:	230a      	movs	r3, #10
 800169c:	e010      	b.n	80016c0 <HAL_GPIO_Init+0x240>
 800169e:	2308      	movs	r3, #8
 80016a0:	e00e      	b.n	80016c0 <HAL_GPIO_Init+0x240>
 80016a2:	2307      	movs	r3, #7
 80016a4:	e00c      	b.n	80016c0 <HAL_GPIO_Init+0x240>
 80016a6:	2306      	movs	r3, #6
 80016a8:	e00a      	b.n	80016c0 <HAL_GPIO_Init+0x240>
 80016aa:	2305      	movs	r3, #5
 80016ac:	e008      	b.n	80016c0 <HAL_GPIO_Init+0x240>
 80016ae:	2304      	movs	r3, #4
 80016b0:	e006      	b.n	80016c0 <HAL_GPIO_Init+0x240>
 80016b2:	2303      	movs	r3, #3
 80016b4:	e004      	b.n	80016c0 <HAL_GPIO_Init+0x240>
 80016b6:	2302      	movs	r3, #2
 80016b8:	e002      	b.n	80016c0 <HAL_GPIO_Init+0x240>
 80016ba:	2301      	movs	r3, #1
 80016bc:	e000      	b.n	80016c0 <HAL_GPIO_Init+0x240>
 80016be:	2300      	movs	r3, #0
 80016c0:	69fa      	ldr	r2, [r7, #28]
 80016c2:	f002 0203 	and.w	r2, r2, #3
 80016c6:	0092      	lsls	r2, r2, #2
 80016c8:	4093      	lsls	r3, r2
 80016ca:	69ba      	ldr	r2, [r7, #24]
 80016cc:	4313      	orrs	r3, r2
 80016ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80016d0:	4935      	ldr	r1, [pc, #212]	@ (80017a8 <HAL_GPIO_Init+0x328>)
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	089b      	lsrs	r3, r3, #2
 80016d6:	3302      	adds	r3, #2
 80016d8:	69ba      	ldr	r2, [r7, #24]
 80016da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016de:	4b3d      	ldr	r3, [pc, #244]	@ (80017d4 <HAL_GPIO_Init+0x354>)
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	43db      	mvns	r3, r3
 80016e8:	69ba      	ldr	r2, [r7, #24]
 80016ea:	4013      	ands	r3, r2
 80016ec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d003      	beq.n	8001702 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80016fa:	69ba      	ldr	r2, [r7, #24]
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	4313      	orrs	r3, r2
 8001700:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001702:	4a34      	ldr	r2, [pc, #208]	@ (80017d4 <HAL_GPIO_Init+0x354>)
 8001704:	69bb      	ldr	r3, [r7, #24]
 8001706:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001708:	4b32      	ldr	r3, [pc, #200]	@ (80017d4 <HAL_GPIO_Init+0x354>)
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	43db      	mvns	r3, r3
 8001712:	69ba      	ldr	r2, [r7, #24]
 8001714:	4013      	ands	r3, r2
 8001716:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001720:	2b00      	cmp	r3, #0
 8001722:	d003      	beq.n	800172c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001724:	69ba      	ldr	r2, [r7, #24]
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	4313      	orrs	r3, r2
 800172a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800172c:	4a29      	ldr	r2, [pc, #164]	@ (80017d4 <HAL_GPIO_Init+0x354>)
 800172e:	69bb      	ldr	r3, [r7, #24]
 8001730:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001732:	4b28      	ldr	r3, [pc, #160]	@ (80017d4 <HAL_GPIO_Init+0x354>)
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	43db      	mvns	r3, r3
 800173c:	69ba      	ldr	r2, [r7, #24]
 800173e:	4013      	ands	r3, r2
 8001740:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d003      	beq.n	8001756 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800174e:	69ba      	ldr	r2, [r7, #24]
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	4313      	orrs	r3, r2
 8001754:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001756:	4a1f      	ldr	r2, [pc, #124]	@ (80017d4 <HAL_GPIO_Init+0x354>)
 8001758:	69bb      	ldr	r3, [r7, #24]
 800175a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800175c:	4b1d      	ldr	r3, [pc, #116]	@ (80017d4 <HAL_GPIO_Init+0x354>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	43db      	mvns	r3, r3
 8001766:	69ba      	ldr	r2, [r7, #24]
 8001768:	4013      	ands	r3, r2
 800176a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001774:	2b00      	cmp	r3, #0
 8001776:	d003      	beq.n	8001780 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001778:	69ba      	ldr	r2, [r7, #24]
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	4313      	orrs	r3, r2
 800177e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001780:	4a14      	ldr	r2, [pc, #80]	@ (80017d4 <HAL_GPIO_Init+0x354>)
 8001782:	69bb      	ldr	r3, [r7, #24]
 8001784:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	3301      	adds	r3, #1
 800178a:	61fb      	str	r3, [r7, #28]
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	2b0f      	cmp	r3, #15
 8001790:	f67f ae86 	bls.w	80014a0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001794:	bf00      	nop
 8001796:	bf00      	nop
 8001798:	3724      	adds	r7, #36	@ 0x24
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	40023800 	.word	0x40023800
 80017a8:	40013800 	.word	0x40013800
 80017ac:	40020000 	.word	0x40020000
 80017b0:	40020400 	.word	0x40020400
 80017b4:	40020800 	.word	0x40020800
 80017b8:	40020c00 	.word	0x40020c00
 80017bc:	40021000 	.word	0x40021000
 80017c0:	40021400 	.word	0x40021400
 80017c4:	40021800 	.word	0x40021800
 80017c8:	40021c00 	.word	0x40021c00
 80017cc:	40022000 	.word	0x40022000
 80017d0:	40022400 	.word	0x40022400
 80017d4:	40013c00 	.word	0x40013c00

080017d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	460b      	mov	r3, r1
 80017e2:	807b      	strh	r3, [r7, #2]
 80017e4:	4613      	mov	r3, r2
 80017e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017e8:	787b      	ldrb	r3, [r7, #1]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d003      	beq.n	80017f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017ee:	887a      	ldrh	r2, [r7, #2]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80017f4:	e003      	b.n	80017fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80017f6:	887b      	ldrh	r3, [r7, #2]
 80017f8:	041a      	lsls	r2, r3, #16
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	619a      	str	r2, [r3, #24]
}
 80017fe:	bf00      	nop
 8001800:	370c      	adds	r7, #12
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr

0800180a <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800180a:	b480      	push	{r7}
 800180c:	b085      	sub	sp, #20
 800180e:	af00      	add	r7, sp, #0
 8001810:	6078      	str	r0, [r7, #4]
 8001812:	460b      	mov	r3, r1
 8001814:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	695b      	ldr	r3, [r3, #20]
 800181a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800181c:	887a      	ldrh	r2, [r7, #2]
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	4013      	ands	r3, r2
 8001822:	041a      	lsls	r2, r3, #16
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	43d9      	mvns	r1, r3
 8001828:	887b      	ldrh	r3, [r7, #2]
 800182a:	400b      	ands	r3, r1
 800182c:	431a      	orrs	r2, r3
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	619a      	str	r2, [r3, #24]
}
 8001832:	bf00      	nop
 8001834:	3714      	adds	r7, #20
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
	...

08001840 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001844:	4b05      	ldr	r3, [pc, #20]	@ (800185c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a04      	ldr	r2, [pc, #16]	@ (800185c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800184a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800184e:	6013      	str	r3, [r2, #0]
}
 8001850:	bf00      	nop
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	40007000 	.word	0x40007000

08001860 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b086      	sub	sp, #24
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001868:	2300      	movs	r3, #0
 800186a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d101      	bne.n	8001876 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e29b      	b.n	8001dae <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 0301 	and.w	r3, r3, #1
 800187e:	2b00      	cmp	r3, #0
 8001880:	f000 8087 	beq.w	8001992 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001884:	4b96      	ldr	r3, [pc, #600]	@ (8001ae0 <HAL_RCC_OscConfig+0x280>)
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	f003 030c 	and.w	r3, r3, #12
 800188c:	2b04      	cmp	r3, #4
 800188e:	d00c      	beq.n	80018aa <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001890:	4b93      	ldr	r3, [pc, #588]	@ (8001ae0 <HAL_RCC_OscConfig+0x280>)
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	f003 030c 	and.w	r3, r3, #12
 8001898:	2b08      	cmp	r3, #8
 800189a:	d112      	bne.n	80018c2 <HAL_RCC_OscConfig+0x62>
 800189c:	4b90      	ldr	r3, [pc, #576]	@ (8001ae0 <HAL_RCC_OscConfig+0x280>)
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80018a8:	d10b      	bne.n	80018c2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018aa:	4b8d      	ldr	r3, [pc, #564]	@ (8001ae0 <HAL_RCC_OscConfig+0x280>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d06c      	beq.n	8001990 <HAL_RCC_OscConfig+0x130>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d168      	bne.n	8001990 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e275      	b.n	8001dae <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018ca:	d106      	bne.n	80018da <HAL_RCC_OscConfig+0x7a>
 80018cc:	4b84      	ldr	r3, [pc, #528]	@ (8001ae0 <HAL_RCC_OscConfig+0x280>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a83      	ldr	r2, [pc, #524]	@ (8001ae0 <HAL_RCC_OscConfig+0x280>)
 80018d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018d6:	6013      	str	r3, [r2, #0]
 80018d8:	e02e      	b.n	8001938 <HAL_RCC_OscConfig+0xd8>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d10c      	bne.n	80018fc <HAL_RCC_OscConfig+0x9c>
 80018e2:	4b7f      	ldr	r3, [pc, #508]	@ (8001ae0 <HAL_RCC_OscConfig+0x280>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a7e      	ldr	r2, [pc, #504]	@ (8001ae0 <HAL_RCC_OscConfig+0x280>)
 80018e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018ec:	6013      	str	r3, [r2, #0]
 80018ee:	4b7c      	ldr	r3, [pc, #496]	@ (8001ae0 <HAL_RCC_OscConfig+0x280>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a7b      	ldr	r2, [pc, #492]	@ (8001ae0 <HAL_RCC_OscConfig+0x280>)
 80018f4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018f8:	6013      	str	r3, [r2, #0]
 80018fa:	e01d      	b.n	8001938 <HAL_RCC_OscConfig+0xd8>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001904:	d10c      	bne.n	8001920 <HAL_RCC_OscConfig+0xc0>
 8001906:	4b76      	ldr	r3, [pc, #472]	@ (8001ae0 <HAL_RCC_OscConfig+0x280>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a75      	ldr	r2, [pc, #468]	@ (8001ae0 <HAL_RCC_OscConfig+0x280>)
 800190c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001910:	6013      	str	r3, [r2, #0]
 8001912:	4b73      	ldr	r3, [pc, #460]	@ (8001ae0 <HAL_RCC_OscConfig+0x280>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a72      	ldr	r2, [pc, #456]	@ (8001ae0 <HAL_RCC_OscConfig+0x280>)
 8001918:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800191c:	6013      	str	r3, [r2, #0]
 800191e:	e00b      	b.n	8001938 <HAL_RCC_OscConfig+0xd8>
 8001920:	4b6f      	ldr	r3, [pc, #444]	@ (8001ae0 <HAL_RCC_OscConfig+0x280>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a6e      	ldr	r2, [pc, #440]	@ (8001ae0 <HAL_RCC_OscConfig+0x280>)
 8001926:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800192a:	6013      	str	r3, [r2, #0]
 800192c:	4b6c      	ldr	r3, [pc, #432]	@ (8001ae0 <HAL_RCC_OscConfig+0x280>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a6b      	ldr	r2, [pc, #428]	@ (8001ae0 <HAL_RCC_OscConfig+0x280>)
 8001932:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001936:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d013      	beq.n	8001968 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001940:	f7ff fa78 	bl	8000e34 <HAL_GetTick>
 8001944:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001946:	e008      	b.n	800195a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001948:	f7ff fa74 	bl	8000e34 <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	2b64      	cmp	r3, #100	@ 0x64
 8001954:	d901      	bls.n	800195a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001956:	2303      	movs	r3, #3
 8001958:	e229      	b.n	8001dae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800195a:	4b61      	ldr	r3, [pc, #388]	@ (8001ae0 <HAL_RCC_OscConfig+0x280>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d0f0      	beq.n	8001948 <HAL_RCC_OscConfig+0xe8>
 8001966:	e014      	b.n	8001992 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001968:	f7ff fa64 	bl	8000e34 <HAL_GetTick>
 800196c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800196e:	e008      	b.n	8001982 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001970:	f7ff fa60 	bl	8000e34 <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	2b64      	cmp	r3, #100	@ 0x64
 800197c:	d901      	bls.n	8001982 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800197e:	2303      	movs	r3, #3
 8001980:	e215      	b.n	8001dae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001982:	4b57      	ldr	r3, [pc, #348]	@ (8001ae0 <HAL_RCC_OscConfig+0x280>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d1f0      	bne.n	8001970 <HAL_RCC_OscConfig+0x110>
 800198e:	e000      	b.n	8001992 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001990:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	2b00      	cmp	r3, #0
 800199c:	d069      	beq.n	8001a72 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800199e:	4b50      	ldr	r3, [pc, #320]	@ (8001ae0 <HAL_RCC_OscConfig+0x280>)
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	f003 030c 	and.w	r3, r3, #12
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d00b      	beq.n	80019c2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019aa:	4b4d      	ldr	r3, [pc, #308]	@ (8001ae0 <HAL_RCC_OscConfig+0x280>)
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	f003 030c 	and.w	r3, r3, #12
 80019b2:	2b08      	cmp	r3, #8
 80019b4:	d11c      	bne.n	80019f0 <HAL_RCC_OscConfig+0x190>
 80019b6:	4b4a      	ldr	r3, [pc, #296]	@ (8001ae0 <HAL_RCC_OscConfig+0x280>)
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d116      	bne.n	80019f0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019c2:	4b47      	ldr	r3, [pc, #284]	@ (8001ae0 <HAL_RCC_OscConfig+0x280>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0302 	and.w	r3, r3, #2
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d005      	beq.n	80019da <HAL_RCC_OscConfig+0x17a>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	68db      	ldr	r3, [r3, #12]
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d001      	beq.n	80019da <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e1e9      	b.n	8001dae <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019da:	4b41      	ldr	r3, [pc, #260]	@ (8001ae0 <HAL_RCC_OscConfig+0x280>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	691b      	ldr	r3, [r3, #16]
 80019e6:	00db      	lsls	r3, r3, #3
 80019e8:	493d      	ldr	r1, [pc, #244]	@ (8001ae0 <HAL_RCC_OscConfig+0x280>)
 80019ea:	4313      	orrs	r3, r2
 80019ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019ee:	e040      	b.n	8001a72 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d023      	beq.n	8001a40 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019f8:	4b39      	ldr	r3, [pc, #228]	@ (8001ae0 <HAL_RCC_OscConfig+0x280>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a38      	ldr	r2, [pc, #224]	@ (8001ae0 <HAL_RCC_OscConfig+0x280>)
 80019fe:	f043 0301 	orr.w	r3, r3, #1
 8001a02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a04:	f7ff fa16 	bl	8000e34 <HAL_GetTick>
 8001a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a0a:	e008      	b.n	8001a1e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a0c:	f7ff fa12 	bl	8000e34 <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e1c7      	b.n	8001dae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a1e:	4b30      	ldr	r3, [pc, #192]	@ (8001ae0 <HAL_RCC_OscConfig+0x280>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 0302 	and.w	r3, r3, #2
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d0f0      	beq.n	8001a0c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a2a:	4b2d      	ldr	r3, [pc, #180]	@ (8001ae0 <HAL_RCC_OscConfig+0x280>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	691b      	ldr	r3, [r3, #16]
 8001a36:	00db      	lsls	r3, r3, #3
 8001a38:	4929      	ldr	r1, [pc, #164]	@ (8001ae0 <HAL_RCC_OscConfig+0x280>)
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	600b      	str	r3, [r1, #0]
 8001a3e:	e018      	b.n	8001a72 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a40:	4b27      	ldr	r3, [pc, #156]	@ (8001ae0 <HAL_RCC_OscConfig+0x280>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a26      	ldr	r2, [pc, #152]	@ (8001ae0 <HAL_RCC_OscConfig+0x280>)
 8001a46:	f023 0301 	bic.w	r3, r3, #1
 8001a4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a4c:	f7ff f9f2 	bl	8000e34 <HAL_GetTick>
 8001a50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a52:	e008      	b.n	8001a66 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a54:	f7ff f9ee 	bl	8000e34 <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d901      	bls.n	8001a66 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e1a3      	b.n	8001dae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a66:	4b1e      	ldr	r3, [pc, #120]	@ (8001ae0 <HAL_RCC_OscConfig+0x280>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0302 	and.w	r3, r3, #2
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d1f0      	bne.n	8001a54 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0308 	and.w	r3, r3, #8
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d038      	beq.n	8001af0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	695b      	ldr	r3, [r3, #20]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d019      	beq.n	8001aba <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a86:	4b16      	ldr	r3, [pc, #88]	@ (8001ae0 <HAL_RCC_OscConfig+0x280>)
 8001a88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a8a:	4a15      	ldr	r2, [pc, #84]	@ (8001ae0 <HAL_RCC_OscConfig+0x280>)
 8001a8c:	f043 0301 	orr.w	r3, r3, #1
 8001a90:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a92:	f7ff f9cf 	bl	8000e34 <HAL_GetTick>
 8001a96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a98:	e008      	b.n	8001aac <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a9a:	f7ff f9cb 	bl	8000e34 <HAL_GetTick>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	d901      	bls.n	8001aac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	e180      	b.n	8001dae <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aac:	4b0c      	ldr	r3, [pc, #48]	@ (8001ae0 <HAL_RCC_OscConfig+0x280>)
 8001aae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ab0:	f003 0302 	and.w	r3, r3, #2
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d0f0      	beq.n	8001a9a <HAL_RCC_OscConfig+0x23a>
 8001ab8:	e01a      	b.n	8001af0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001aba:	4b09      	ldr	r3, [pc, #36]	@ (8001ae0 <HAL_RCC_OscConfig+0x280>)
 8001abc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001abe:	4a08      	ldr	r2, [pc, #32]	@ (8001ae0 <HAL_RCC_OscConfig+0x280>)
 8001ac0:	f023 0301 	bic.w	r3, r3, #1
 8001ac4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ac6:	f7ff f9b5 	bl	8000e34 <HAL_GetTick>
 8001aca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001acc:	e00a      	b.n	8001ae4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ace:	f7ff f9b1 	bl	8000e34 <HAL_GetTick>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	d903      	bls.n	8001ae4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001adc:	2303      	movs	r3, #3
 8001ade:	e166      	b.n	8001dae <HAL_RCC_OscConfig+0x54e>
 8001ae0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ae4:	4b92      	ldr	r3, [pc, #584]	@ (8001d30 <HAL_RCC_OscConfig+0x4d0>)
 8001ae6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ae8:	f003 0302 	and.w	r3, r3, #2
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d1ee      	bne.n	8001ace <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0304 	and.w	r3, r3, #4
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	f000 80a4 	beq.w	8001c46 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001afe:	4b8c      	ldr	r3, [pc, #560]	@ (8001d30 <HAL_RCC_OscConfig+0x4d0>)
 8001b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d10d      	bne.n	8001b26 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b0a:	4b89      	ldr	r3, [pc, #548]	@ (8001d30 <HAL_RCC_OscConfig+0x4d0>)
 8001b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b0e:	4a88      	ldr	r2, [pc, #544]	@ (8001d30 <HAL_RCC_OscConfig+0x4d0>)
 8001b10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b14:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b16:	4b86      	ldr	r3, [pc, #536]	@ (8001d30 <HAL_RCC_OscConfig+0x4d0>)
 8001b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b1e:	60bb      	str	r3, [r7, #8]
 8001b20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b22:	2301      	movs	r3, #1
 8001b24:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b26:	4b83      	ldr	r3, [pc, #524]	@ (8001d34 <HAL_RCC_OscConfig+0x4d4>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d118      	bne.n	8001b64 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001b32:	4b80      	ldr	r3, [pc, #512]	@ (8001d34 <HAL_RCC_OscConfig+0x4d4>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a7f      	ldr	r2, [pc, #508]	@ (8001d34 <HAL_RCC_OscConfig+0x4d4>)
 8001b38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b3e:	f7ff f979 	bl	8000e34 <HAL_GetTick>
 8001b42:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b44:	e008      	b.n	8001b58 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b46:	f7ff f975 	bl	8000e34 <HAL_GetTick>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	2b64      	cmp	r3, #100	@ 0x64
 8001b52:	d901      	bls.n	8001b58 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001b54:	2303      	movs	r3, #3
 8001b56:	e12a      	b.n	8001dae <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b58:	4b76      	ldr	r3, [pc, #472]	@ (8001d34 <HAL_RCC_OscConfig+0x4d4>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d0f0      	beq.n	8001b46 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d106      	bne.n	8001b7a <HAL_RCC_OscConfig+0x31a>
 8001b6c:	4b70      	ldr	r3, [pc, #448]	@ (8001d30 <HAL_RCC_OscConfig+0x4d0>)
 8001b6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b70:	4a6f      	ldr	r2, [pc, #444]	@ (8001d30 <HAL_RCC_OscConfig+0x4d0>)
 8001b72:	f043 0301 	orr.w	r3, r3, #1
 8001b76:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b78:	e02d      	b.n	8001bd6 <HAL_RCC_OscConfig+0x376>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d10c      	bne.n	8001b9c <HAL_RCC_OscConfig+0x33c>
 8001b82:	4b6b      	ldr	r3, [pc, #428]	@ (8001d30 <HAL_RCC_OscConfig+0x4d0>)
 8001b84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b86:	4a6a      	ldr	r2, [pc, #424]	@ (8001d30 <HAL_RCC_OscConfig+0x4d0>)
 8001b88:	f023 0301 	bic.w	r3, r3, #1
 8001b8c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b8e:	4b68      	ldr	r3, [pc, #416]	@ (8001d30 <HAL_RCC_OscConfig+0x4d0>)
 8001b90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b92:	4a67      	ldr	r2, [pc, #412]	@ (8001d30 <HAL_RCC_OscConfig+0x4d0>)
 8001b94:	f023 0304 	bic.w	r3, r3, #4
 8001b98:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b9a:	e01c      	b.n	8001bd6 <HAL_RCC_OscConfig+0x376>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	2b05      	cmp	r3, #5
 8001ba2:	d10c      	bne.n	8001bbe <HAL_RCC_OscConfig+0x35e>
 8001ba4:	4b62      	ldr	r3, [pc, #392]	@ (8001d30 <HAL_RCC_OscConfig+0x4d0>)
 8001ba6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ba8:	4a61      	ldr	r2, [pc, #388]	@ (8001d30 <HAL_RCC_OscConfig+0x4d0>)
 8001baa:	f043 0304 	orr.w	r3, r3, #4
 8001bae:	6713      	str	r3, [r2, #112]	@ 0x70
 8001bb0:	4b5f      	ldr	r3, [pc, #380]	@ (8001d30 <HAL_RCC_OscConfig+0x4d0>)
 8001bb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bb4:	4a5e      	ldr	r2, [pc, #376]	@ (8001d30 <HAL_RCC_OscConfig+0x4d0>)
 8001bb6:	f043 0301 	orr.w	r3, r3, #1
 8001bba:	6713      	str	r3, [r2, #112]	@ 0x70
 8001bbc:	e00b      	b.n	8001bd6 <HAL_RCC_OscConfig+0x376>
 8001bbe:	4b5c      	ldr	r3, [pc, #368]	@ (8001d30 <HAL_RCC_OscConfig+0x4d0>)
 8001bc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bc2:	4a5b      	ldr	r2, [pc, #364]	@ (8001d30 <HAL_RCC_OscConfig+0x4d0>)
 8001bc4:	f023 0301 	bic.w	r3, r3, #1
 8001bc8:	6713      	str	r3, [r2, #112]	@ 0x70
 8001bca:	4b59      	ldr	r3, [pc, #356]	@ (8001d30 <HAL_RCC_OscConfig+0x4d0>)
 8001bcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bce:	4a58      	ldr	r2, [pc, #352]	@ (8001d30 <HAL_RCC_OscConfig+0x4d0>)
 8001bd0:	f023 0304 	bic.w	r3, r3, #4
 8001bd4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d015      	beq.n	8001c0a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bde:	f7ff f929 	bl	8000e34 <HAL_GetTick>
 8001be2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001be4:	e00a      	b.n	8001bfc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001be6:	f7ff f925 	bl	8000e34 <HAL_GetTick>
 8001bea:	4602      	mov	r2, r0
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d901      	bls.n	8001bfc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	e0d8      	b.n	8001dae <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bfc:	4b4c      	ldr	r3, [pc, #304]	@ (8001d30 <HAL_RCC_OscConfig+0x4d0>)
 8001bfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c00:	f003 0302 	and.w	r3, r3, #2
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d0ee      	beq.n	8001be6 <HAL_RCC_OscConfig+0x386>
 8001c08:	e014      	b.n	8001c34 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c0a:	f7ff f913 	bl	8000e34 <HAL_GetTick>
 8001c0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c10:	e00a      	b.n	8001c28 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c12:	f7ff f90f 	bl	8000e34 <HAL_GetTick>
 8001c16:	4602      	mov	r2, r0
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d901      	bls.n	8001c28 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001c24:	2303      	movs	r3, #3
 8001c26:	e0c2      	b.n	8001dae <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c28:	4b41      	ldr	r3, [pc, #260]	@ (8001d30 <HAL_RCC_OscConfig+0x4d0>)
 8001c2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c2c:	f003 0302 	and.w	r3, r3, #2
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d1ee      	bne.n	8001c12 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001c34:	7dfb      	ldrb	r3, [r7, #23]
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d105      	bne.n	8001c46 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c3a:	4b3d      	ldr	r3, [pc, #244]	@ (8001d30 <HAL_RCC_OscConfig+0x4d0>)
 8001c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c3e:	4a3c      	ldr	r2, [pc, #240]	@ (8001d30 <HAL_RCC_OscConfig+0x4d0>)
 8001c40:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c44:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	699b      	ldr	r3, [r3, #24]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	f000 80ae 	beq.w	8001dac <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c50:	4b37      	ldr	r3, [pc, #220]	@ (8001d30 <HAL_RCC_OscConfig+0x4d0>)
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	f003 030c 	and.w	r3, r3, #12
 8001c58:	2b08      	cmp	r3, #8
 8001c5a:	d06d      	beq.n	8001d38 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	699b      	ldr	r3, [r3, #24]
 8001c60:	2b02      	cmp	r3, #2
 8001c62:	d14b      	bne.n	8001cfc <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c64:	4b32      	ldr	r3, [pc, #200]	@ (8001d30 <HAL_RCC_OscConfig+0x4d0>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a31      	ldr	r2, [pc, #196]	@ (8001d30 <HAL_RCC_OscConfig+0x4d0>)
 8001c6a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001c6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c70:	f7ff f8e0 	bl	8000e34 <HAL_GetTick>
 8001c74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c76:	e008      	b.n	8001c8a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c78:	f7ff f8dc 	bl	8000e34 <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d901      	bls.n	8001c8a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e091      	b.n	8001dae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c8a:	4b29      	ldr	r3, [pc, #164]	@ (8001d30 <HAL_RCC_OscConfig+0x4d0>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d1f0      	bne.n	8001c78 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	69da      	ldr	r2, [r3, #28]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6a1b      	ldr	r3, [r3, #32]
 8001c9e:	431a      	orrs	r2, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ca4:	019b      	lsls	r3, r3, #6
 8001ca6:	431a      	orrs	r2, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cac:	085b      	lsrs	r3, r3, #1
 8001cae:	3b01      	subs	r3, #1
 8001cb0:	041b      	lsls	r3, r3, #16
 8001cb2:	431a      	orrs	r2, r3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cb8:	061b      	lsls	r3, r3, #24
 8001cba:	431a      	orrs	r2, r3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cc0:	071b      	lsls	r3, r3, #28
 8001cc2:	491b      	ldr	r1, [pc, #108]	@ (8001d30 <HAL_RCC_OscConfig+0x4d0>)
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cc8:	4b19      	ldr	r3, [pc, #100]	@ (8001d30 <HAL_RCC_OscConfig+0x4d0>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a18      	ldr	r2, [pc, #96]	@ (8001d30 <HAL_RCC_OscConfig+0x4d0>)
 8001cce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001cd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cd4:	f7ff f8ae 	bl	8000e34 <HAL_GetTick>
 8001cd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cda:	e008      	b.n	8001cee <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cdc:	f7ff f8aa 	bl	8000e34 <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	d901      	bls.n	8001cee <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e05f      	b.n	8001dae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cee:	4b10      	ldr	r3, [pc, #64]	@ (8001d30 <HAL_RCC_OscConfig+0x4d0>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d0f0      	beq.n	8001cdc <HAL_RCC_OscConfig+0x47c>
 8001cfa:	e057      	b.n	8001dac <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cfc:	4b0c      	ldr	r3, [pc, #48]	@ (8001d30 <HAL_RCC_OscConfig+0x4d0>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a0b      	ldr	r2, [pc, #44]	@ (8001d30 <HAL_RCC_OscConfig+0x4d0>)
 8001d02:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001d06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d08:	f7ff f894 	bl	8000e34 <HAL_GetTick>
 8001d0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d0e:	e008      	b.n	8001d22 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d10:	f7ff f890 	bl	8000e34 <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d901      	bls.n	8001d22 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e045      	b.n	8001dae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d22:	4b03      	ldr	r3, [pc, #12]	@ (8001d30 <HAL_RCC_OscConfig+0x4d0>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d1f0      	bne.n	8001d10 <HAL_RCC_OscConfig+0x4b0>
 8001d2e:	e03d      	b.n	8001dac <HAL_RCC_OscConfig+0x54c>
 8001d30:	40023800 	.word	0x40023800
 8001d34:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001d38:	4b1f      	ldr	r3, [pc, #124]	@ (8001db8 <HAL_RCC_OscConfig+0x558>)
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	699b      	ldr	r3, [r3, #24]
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d030      	beq.n	8001da8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d129      	bne.n	8001da8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d122      	bne.n	8001da8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d62:	68fa      	ldr	r2, [r7, #12]
 8001d64:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001d68:	4013      	ands	r3, r2
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001d6e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d119      	bne.n	8001da8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d7e:	085b      	lsrs	r3, r3, #1
 8001d80:	3b01      	subs	r3, #1
 8001d82:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d10f      	bne.n	8001da8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d92:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d107      	bne.n	8001da8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001da2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d001      	beq.n	8001dac <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	e000      	b.n	8001dae <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001dac:	2300      	movs	r3, #0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3718      	adds	r7, #24
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	40023800 	.word	0x40023800

08001dbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d101      	bne.n	8001dd4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e0d0      	b.n	8001f76 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001dd4:	4b6a      	ldr	r3, [pc, #424]	@ (8001f80 <HAL_RCC_ClockConfig+0x1c4>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 030f 	and.w	r3, r3, #15
 8001ddc:	683a      	ldr	r2, [r7, #0]
 8001dde:	429a      	cmp	r2, r3
 8001de0:	d910      	bls.n	8001e04 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001de2:	4b67      	ldr	r3, [pc, #412]	@ (8001f80 <HAL_RCC_ClockConfig+0x1c4>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f023 020f 	bic.w	r2, r3, #15
 8001dea:	4965      	ldr	r1, [pc, #404]	@ (8001f80 <HAL_RCC_ClockConfig+0x1c4>)
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001df2:	4b63      	ldr	r3, [pc, #396]	@ (8001f80 <HAL_RCC_ClockConfig+0x1c4>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 030f 	and.w	r3, r3, #15
 8001dfa:	683a      	ldr	r2, [r7, #0]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d001      	beq.n	8001e04 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e0b8      	b.n	8001f76 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 0302 	and.w	r3, r3, #2
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d020      	beq.n	8001e52 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0304 	and.w	r3, r3, #4
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d005      	beq.n	8001e28 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e1c:	4b59      	ldr	r3, [pc, #356]	@ (8001f84 <HAL_RCC_ClockConfig+0x1c8>)
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	4a58      	ldr	r2, [pc, #352]	@ (8001f84 <HAL_RCC_ClockConfig+0x1c8>)
 8001e22:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001e26:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0308 	and.w	r3, r3, #8
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d005      	beq.n	8001e40 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e34:	4b53      	ldr	r3, [pc, #332]	@ (8001f84 <HAL_RCC_ClockConfig+0x1c8>)
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	4a52      	ldr	r2, [pc, #328]	@ (8001f84 <HAL_RCC_ClockConfig+0x1c8>)
 8001e3a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001e3e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e40:	4b50      	ldr	r3, [pc, #320]	@ (8001f84 <HAL_RCC_ClockConfig+0x1c8>)
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	494d      	ldr	r1, [pc, #308]	@ (8001f84 <HAL_RCC_ClockConfig+0x1c8>)
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 0301 	and.w	r3, r3, #1
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d040      	beq.n	8001ee0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d107      	bne.n	8001e76 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e66:	4b47      	ldr	r3, [pc, #284]	@ (8001f84 <HAL_RCC_ClockConfig+0x1c8>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d115      	bne.n	8001e9e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e07f      	b.n	8001f76 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	d107      	bne.n	8001e8e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e7e:	4b41      	ldr	r3, [pc, #260]	@ (8001f84 <HAL_RCC_ClockConfig+0x1c8>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d109      	bne.n	8001e9e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e073      	b.n	8001f76 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e8e:	4b3d      	ldr	r3, [pc, #244]	@ (8001f84 <HAL_RCC_ClockConfig+0x1c8>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0302 	and.w	r3, r3, #2
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d101      	bne.n	8001e9e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e06b      	b.n	8001f76 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e9e:	4b39      	ldr	r3, [pc, #228]	@ (8001f84 <HAL_RCC_ClockConfig+0x1c8>)
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	f023 0203 	bic.w	r2, r3, #3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	4936      	ldr	r1, [pc, #216]	@ (8001f84 <HAL_RCC_ClockConfig+0x1c8>)
 8001eac:	4313      	orrs	r3, r2
 8001eae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001eb0:	f7fe ffc0 	bl	8000e34 <HAL_GetTick>
 8001eb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eb6:	e00a      	b.n	8001ece <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001eb8:	f7fe ffbc 	bl	8000e34 <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d901      	bls.n	8001ece <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e053      	b.n	8001f76 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ece:	4b2d      	ldr	r3, [pc, #180]	@ (8001f84 <HAL_RCC_ClockConfig+0x1c8>)
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	f003 020c 	and.w	r2, r3, #12
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d1eb      	bne.n	8001eb8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ee0:	4b27      	ldr	r3, [pc, #156]	@ (8001f80 <HAL_RCC_ClockConfig+0x1c4>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 030f 	and.w	r3, r3, #15
 8001ee8:	683a      	ldr	r2, [r7, #0]
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d210      	bcs.n	8001f10 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eee:	4b24      	ldr	r3, [pc, #144]	@ (8001f80 <HAL_RCC_ClockConfig+0x1c4>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f023 020f 	bic.w	r2, r3, #15
 8001ef6:	4922      	ldr	r1, [pc, #136]	@ (8001f80 <HAL_RCC_ClockConfig+0x1c4>)
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001efe:	4b20      	ldr	r3, [pc, #128]	@ (8001f80 <HAL_RCC_ClockConfig+0x1c4>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 030f 	and.w	r3, r3, #15
 8001f06:	683a      	ldr	r2, [r7, #0]
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d001      	beq.n	8001f10 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e032      	b.n	8001f76 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0304 	and.w	r3, r3, #4
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d008      	beq.n	8001f2e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f1c:	4b19      	ldr	r3, [pc, #100]	@ (8001f84 <HAL_RCC_ClockConfig+0x1c8>)
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	4916      	ldr	r1, [pc, #88]	@ (8001f84 <HAL_RCC_ClockConfig+0x1c8>)
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 0308 	and.w	r3, r3, #8
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d009      	beq.n	8001f4e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f3a:	4b12      	ldr	r3, [pc, #72]	@ (8001f84 <HAL_RCC_ClockConfig+0x1c8>)
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	691b      	ldr	r3, [r3, #16]
 8001f46:	00db      	lsls	r3, r3, #3
 8001f48:	490e      	ldr	r1, [pc, #56]	@ (8001f84 <HAL_RCC_ClockConfig+0x1c8>)
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f4e:	f000 f821 	bl	8001f94 <HAL_RCC_GetSysClockFreq>
 8001f52:	4602      	mov	r2, r0
 8001f54:	4b0b      	ldr	r3, [pc, #44]	@ (8001f84 <HAL_RCC_ClockConfig+0x1c8>)
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	091b      	lsrs	r3, r3, #4
 8001f5a:	f003 030f 	and.w	r3, r3, #15
 8001f5e:	490a      	ldr	r1, [pc, #40]	@ (8001f88 <HAL_RCC_ClockConfig+0x1cc>)
 8001f60:	5ccb      	ldrb	r3, [r1, r3]
 8001f62:	fa22 f303 	lsr.w	r3, r2, r3
 8001f66:	4a09      	ldr	r2, [pc, #36]	@ (8001f8c <HAL_RCC_ClockConfig+0x1d0>)
 8001f68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f6a:	4b09      	ldr	r3, [pc, #36]	@ (8001f90 <HAL_RCC_ClockConfig+0x1d4>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7fe ff1c 	bl	8000dac <HAL_InitTick>

  return HAL_OK;
 8001f74:	2300      	movs	r3, #0
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3710      	adds	r7, #16
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	40023c00 	.word	0x40023c00
 8001f84:	40023800 	.word	0x40023800
 8001f88:	08003464 	.word	0x08003464
 8001f8c:	20000000 	.word	0x20000000
 8001f90:	20000004 	.word	0x20000004

08001f94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f98:	b094      	sub	sp, #80	@ 0x50
 8001f9a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001fac:	4b79      	ldr	r3, [pc, #484]	@ (8002194 <HAL_RCC_GetSysClockFreq+0x200>)
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	f003 030c 	and.w	r3, r3, #12
 8001fb4:	2b08      	cmp	r3, #8
 8001fb6:	d00d      	beq.n	8001fd4 <HAL_RCC_GetSysClockFreq+0x40>
 8001fb8:	2b08      	cmp	r3, #8
 8001fba:	f200 80e1 	bhi.w	8002180 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d002      	beq.n	8001fc8 <HAL_RCC_GetSysClockFreq+0x34>
 8001fc2:	2b04      	cmp	r3, #4
 8001fc4:	d003      	beq.n	8001fce <HAL_RCC_GetSysClockFreq+0x3a>
 8001fc6:	e0db      	b.n	8002180 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001fc8:	4b73      	ldr	r3, [pc, #460]	@ (8002198 <HAL_RCC_GetSysClockFreq+0x204>)
 8001fca:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001fcc:	e0db      	b.n	8002186 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001fce:	4b73      	ldr	r3, [pc, #460]	@ (800219c <HAL_RCC_GetSysClockFreq+0x208>)
 8001fd0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001fd2:	e0d8      	b.n	8002186 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001fd4:	4b6f      	ldr	r3, [pc, #444]	@ (8002194 <HAL_RCC_GetSysClockFreq+0x200>)
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001fdc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001fde:	4b6d      	ldr	r3, [pc, #436]	@ (8002194 <HAL_RCC_GetSysClockFreq+0x200>)
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d063      	beq.n	80020b2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fea:	4b6a      	ldr	r3, [pc, #424]	@ (8002194 <HAL_RCC_GetSysClockFreq+0x200>)
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	099b      	lsrs	r3, r3, #6
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001ff4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001ff6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ff8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ffc:	633b      	str	r3, [r7, #48]	@ 0x30
 8001ffe:	2300      	movs	r3, #0
 8002000:	637b      	str	r3, [r7, #52]	@ 0x34
 8002002:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002006:	4622      	mov	r2, r4
 8002008:	462b      	mov	r3, r5
 800200a:	f04f 0000 	mov.w	r0, #0
 800200e:	f04f 0100 	mov.w	r1, #0
 8002012:	0159      	lsls	r1, r3, #5
 8002014:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002018:	0150      	lsls	r0, r2, #5
 800201a:	4602      	mov	r2, r0
 800201c:	460b      	mov	r3, r1
 800201e:	4621      	mov	r1, r4
 8002020:	1a51      	subs	r1, r2, r1
 8002022:	6139      	str	r1, [r7, #16]
 8002024:	4629      	mov	r1, r5
 8002026:	eb63 0301 	sbc.w	r3, r3, r1
 800202a:	617b      	str	r3, [r7, #20]
 800202c:	f04f 0200 	mov.w	r2, #0
 8002030:	f04f 0300 	mov.w	r3, #0
 8002034:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002038:	4659      	mov	r1, fp
 800203a:	018b      	lsls	r3, r1, #6
 800203c:	4651      	mov	r1, sl
 800203e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002042:	4651      	mov	r1, sl
 8002044:	018a      	lsls	r2, r1, #6
 8002046:	4651      	mov	r1, sl
 8002048:	ebb2 0801 	subs.w	r8, r2, r1
 800204c:	4659      	mov	r1, fp
 800204e:	eb63 0901 	sbc.w	r9, r3, r1
 8002052:	f04f 0200 	mov.w	r2, #0
 8002056:	f04f 0300 	mov.w	r3, #0
 800205a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800205e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002062:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002066:	4690      	mov	r8, r2
 8002068:	4699      	mov	r9, r3
 800206a:	4623      	mov	r3, r4
 800206c:	eb18 0303 	adds.w	r3, r8, r3
 8002070:	60bb      	str	r3, [r7, #8]
 8002072:	462b      	mov	r3, r5
 8002074:	eb49 0303 	adc.w	r3, r9, r3
 8002078:	60fb      	str	r3, [r7, #12]
 800207a:	f04f 0200 	mov.w	r2, #0
 800207e:	f04f 0300 	mov.w	r3, #0
 8002082:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002086:	4629      	mov	r1, r5
 8002088:	024b      	lsls	r3, r1, #9
 800208a:	4621      	mov	r1, r4
 800208c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002090:	4621      	mov	r1, r4
 8002092:	024a      	lsls	r2, r1, #9
 8002094:	4610      	mov	r0, r2
 8002096:	4619      	mov	r1, r3
 8002098:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800209a:	2200      	movs	r2, #0
 800209c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800209e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80020a0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80020a4:	f7fe f8c8 	bl	8000238 <__aeabi_uldivmod>
 80020a8:	4602      	mov	r2, r0
 80020aa:	460b      	mov	r3, r1
 80020ac:	4613      	mov	r3, r2
 80020ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80020b0:	e058      	b.n	8002164 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020b2:	4b38      	ldr	r3, [pc, #224]	@ (8002194 <HAL_RCC_GetSysClockFreq+0x200>)
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	099b      	lsrs	r3, r3, #6
 80020b8:	2200      	movs	r2, #0
 80020ba:	4618      	mov	r0, r3
 80020bc:	4611      	mov	r1, r2
 80020be:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80020c2:	623b      	str	r3, [r7, #32]
 80020c4:	2300      	movs	r3, #0
 80020c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80020c8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80020cc:	4642      	mov	r2, r8
 80020ce:	464b      	mov	r3, r9
 80020d0:	f04f 0000 	mov.w	r0, #0
 80020d4:	f04f 0100 	mov.w	r1, #0
 80020d8:	0159      	lsls	r1, r3, #5
 80020da:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80020de:	0150      	lsls	r0, r2, #5
 80020e0:	4602      	mov	r2, r0
 80020e2:	460b      	mov	r3, r1
 80020e4:	4641      	mov	r1, r8
 80020e6:	ebb2 0a01 	subs.w	sl, r2, r1
 80020ea:	4649      	mov	r1, r9
 80020ec:	eb63 0b01 	sbc.w	fp, r3, r1
 80020f0:	f04f 0200 	mov.w	r2, #0
 80020f4:	f04f 0300 	mov.w	r3, #0
 80020f8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80020fc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002100:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002104:	ebb2 040a 	subs.w	r4, r2, sl
 8002108:	eb63 050b 	sbc.w	r5, r3, fp
 800210c:	f04f 0200 	mov.w	r2, #0
 8002110:	f04f 0300 	mov.w	r3, #0
 8002114:	00eb      	lsls	r3, r5, #3
 8002116:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800211a:	00e2      	lsls	r2, r4, #3
 800211c:	4614      	mov	r4, r2
 800211e:	461d      	mov	r5, r3
 8002120:	4643      	mov	r3, r8
 8002122:	18e3      	adds	r3, r4, r3
 8002124:	603b      	str	r3, [r7, #0]
 8002126:	464b      	mov	r3, r9
 8002128:	eb45 0303 	adc.w	r3, r5, r3
 800212c:	607b      	str	r3, [r7, #4]
 800212e:	f04f 0200 	mov.w	r2, #0
 8002132:	f04f 0300 	mov.w	r3, #0
 8002136:	e9d7 4500 	ldrd	r4, r5, [r7]
 800213a:	4629      	mov	r1, r5
 800213c:	028b      	lsls	r3, r1, #10
 800213e:	4621      	mov	r1, r4
 8002140:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002144:	4621      	mov	r1, r4
 8002146:	028a      	lsls	r2, r1, #10
 8002148:	4610      	mov	r0, r2
 800214a:	4619      	mov	r1, r3
 800214c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800214e:	2200      	movs	r2, #0
 8002150:	61bb      	str	r3, [r7, #24]
 8002152:	61fa      	str	r2, [r7, #28]
 8002154:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002158:	f7fe f86e 	bl	8000238 <__aeabi_uldivmod>
 800215c:	4602      	mov	r2, r0
 800215e:	460b      	mov	r3, r1
 8002160:	4613      	mov	r3, r2
 8002162:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002164:	4b0b      	ldr	r3, [pc, #44]	@ (8002194 <HAL_RCC_GetSysClockFreq+0x200>)
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	0c1b      	lsrs	r3, r3, #16
 800216a:	f003 0303 	and.w	r3, r3, #3
 800216e:	3301      	adds	r3, #1
 8002170:	005b      	lsls	r3, r3, #1
 8002172:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002174:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002176:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002178:	fbb2 f3f3 	udiv	r3, r2, r3
 800217c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800217e:	e002      	b.n	8002186 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002180:	4b05      	ldr	r3, [pc, #20]	@ (8002198 <HAL_RCC_GetSysClockFreq+0x204>)
 8002182:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002184:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002186:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002188:	4618      	mov	r0, r3
 800218a:	3750      	adds	r7, #80	@ 0x50
 800218c:	46bd      	mov	sp, r7
 800218e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002192:	bf00      	nop
 8002194:	40023800 	.word	0x40023800
 8002198:	00f42400 	.word	0x00f42400
 800219c:	007a1200 	.word	0x007a1200

080021a0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021a4:	4b03      	ldr	r3, [pc, #12]	@ (80021b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80021a6:	681b      	ldr	r3, [r3, #0]
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	20000000 	.word	0x20000000

080021b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80021bc:	f7ff fff0 	bl	80021a0 <HAL_RCC_GetHCLKFreq>
 80021c0:	4602      	mov	r2, r0
 80021c2:	4b05      	ldr	r3, [pc, #20]	@ (80021d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	0a9b      	lsrs	r3, r3, #10
 80021c8:	f003 0307 	and.w	r3, r3, #7
 80021cc:	4903      	ldr	r1, [pc, #12]	@ (80021dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80021ce:	5ccb      	ldrb	r3, [r1, r3]
 80021d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	40023800 	.word	0x40023800
 80021dc:	08003474 	.word	0x08003474

080021e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80021e4:	f7ff ffdc 	bl	80021a0 <HAL_RCC_GetHCLKFreq>
 80021e8:	4602      	mov	r2, r0
 80021ea:	4b05      	ldr	r3, [pc, #20]	@ (8002200 <HAL_RCC_GetPCLK2Freq+0x20>)
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	0b5b      	lsrs	r3, r3, #13
 80021f0:	f003 0307 	and.w	r3, r3, #7
 80021f4:	4903      	ldr	r1, [pc, #12]	@ (8002204 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021f6:	5ccb      	ldrb	r3, [r1, r3]
 80021f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	40023800 	.word	0x40023800
 8002204:	08003474 	.word	0x08003474

08002208 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b088      	sub	sp, #32
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002210:	2300      	movs	r3, #0
 8002212:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002214:	2300      	movs	r3, #0
 8002216:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002218:	2300      	movs	r3, #0
 800221a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800221c:	2300      	movs	r3, #0
 800221e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002220:	2300      	movs	r3, #0
 8002222:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 0301 	and.w	r3, r3, #1
 800222c:	2b00      	cmp	r3, #0
 800222e:	d012      	beq.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002230:	4b69      	ldr	r3, [pc, #420]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	4a68      	ldr	r2, [pc, #416]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002236:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800223a:	6093      	str	r3, [r2, #8]
 800223c:	4b66      	ldr	r3, [pc, #408]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800223e:	689a      	ldr	r2, [r3, #8]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002244:	4964      	ldr	r1, [pc, #400]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002246:	4313      	orrs	r3, r2
 8002248:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800224e:	2b00      	cmp	r3, #0
 8002250:	d101      	bne.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002252:	2301      	movs	r3, #1
 8002254:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d017      	beq.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002262:	4b5d      	ldr	r3, [pc, #372]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002264:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002268:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002270:	4959      	ldr	r1, [pc, #356]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002272:	4313      	orrs	r3, r2
 8002274:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800227c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002280:	d101      	bne.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002282:	2301      	movs	r3, #1
 8002284:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800228a:	2b00      	cmp	r3, #0
 800228c:	d101      	bne.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800228e:	2301      	movs	r3, #1
 8002290:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d017      	beq.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800229e:	4b4e      	ldr	r3, [pc, #312]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80022a4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ac:	494a      	ldr	r1, [pc, #296]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022ae:	4313      	orrs	r3, r2
 80022b0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022b8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80022bc:	d101      	bne.n	80022c2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80022be:	2301      	movs	r3, #1
 80022c0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d101      	bne.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80022ca:	2301      	movs	r3, #1
 80022cc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d001      	beq.n	80022de <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80022da:	2301      	movs	r3, #1
 80022dc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0320 	and.w	r3, r3, #32
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	f000 808b 	beq.w	8002402 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80022ec:	4b3a      	ldr	r3, [pc, #232]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022f0:	4a39      	ldr	r2, [pc, #228]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80022f8:	4b37      	ldr	r3, [pc, #220]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002300:	60bb      	str	r3, [r7, #8]
 8002302:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002304:	4b35      	ldr	r3, [pc, #212]	@ (80023dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a34      	ldr	r2, [pc, #208]	@ (80023dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800230a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800230e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002310:	f7fe fd90 	bl	8000e34 <HAL_GetTick>
 8002314:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002316:	e008      	b.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002318:	f7fe fd8c 	bl	8000e34 <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	2b64      	cmp	r3, #100	@ 0x64
 8002324:	d901      	bls.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e38f      	b.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800232a:	4b2c      	ldr	r3, [pc, #176]	@ (80023dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002332:	2b00      	cmp	r3, #0
 8002334:	d0f0      	beq.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002336:	4b28      	ldr	r3, [pc, #160]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002338:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800233a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800233e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d035      	beq.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800234a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800234e:	693a      	ldr	r2, [r7, #16]
 8002350:	429a      	cmp	r2, r3
 8002352:	d02e      	beq.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002354:	4b20      	ldr	r3, [pc, #128]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002356:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002358:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800235c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800235e:	4b1e      	ldr	r3, [pc, #120]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002360:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002362:	4a1d      	ldr	r2, [pc, #116]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002364:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002368:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800236a:	4b1b      	ldr	r3, [pc, #108]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800236c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800236e:	4a1a      	ldr	r2, [pc, #104]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002370:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002374:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002376:	4a18      	ldr	r2, [pc, #96]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800237c:	4b16      	ldr	r3, [pc, #88]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800237e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002380:	f003 0301 	and.w	r3, r3, #1
 8002384:	2b01      	cmp	r3, #1
 8002386:	d114      	bne.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002388:	f7fe fd54 	bl	8000e34 <HAL_GetTick>
 800238c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800238e:	e00a      	b.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002390:	f7fe fd50 	bl	8000e34 <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800239e:	4293      	cmp	r3, r2
 80023a0:	d901      	bls.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e351      	b.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023a6:	4b0c      	ldr	r3, [pc, #48]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023aa:	f003 0302 	and.w	r3, r3, #2
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d0ee      	beq.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80023ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80023be:	d111      	bne.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80023c0:	4b05      	ldr	r3, [pc, #20]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80023cc:	4b04      	ldr	r3, [pc, #16]	@ (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80023ce:	400b      	ands	r3, r1
 80023d0:	4901      	ldr	r1, [pc, #4]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023d2:	4313      	orrs	r3, r2
 80023d4:	608b      	str	r3, [r1, #8]
 80023d6:	e00b      	b.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80023d8:	40023800 	.word	0x40023800
 80023dc:	40007000 	.word	0x40007000
 80023e0:	0ffffcff 	.word	0x0ffffcff
 80023e4:	4bac      	ldr	r3, [pc, #688]	@ (8002698 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	4aab      	ldr	r2, [pc, #684]	@ (8002698 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023ea:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80023ee:	6093      	str	r3, [r2, #8]
 80023f0:	4ba9      	ldr	r3, [pc, #676]	@ (8002698 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023f2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023fc:	49a6      	ldr	r1, [pc, #664]	@ (8002698 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023fe:	4313      	orrs	r3, r2
 8002400:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0310 	and.w	r3, r3, #16
 800240a:	2b00      	cmp	r3, #0
 800240c:	d010      	beq.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800240e:	4ba2      	ldr	r3, [pc, #648]	@ (8002698 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002410:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002414:	4aa0      	ldr	r2, [pc, #640]	@ (8002698 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002416:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800241a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800241e:	4b9e      	ldr	r3, [pc, #632]	@ (8002698 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002420:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002428:	499b      	ldr	r1, [pc, #620]	@ (8002698 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800242a:	4313      	orrs	r3, r2
 800242c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d00a      	beq.n	8002452 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800243c:	4b96      	ldr	r3, [pc, #600]	@ (8002698 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800243e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002442:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800244a:	4993      	ldr	r1, [pc, #588]	@ (8002698 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800244c:	4313      	orrs	r3, r2
 800244e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d00a      	beq.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800245e:	4b8e      	ldr	r3, [pc, #568]	@ (8002698 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002460:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002464:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800246c:	498a      	ldr	r1, [pc, #552]	@ (8002698 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800246e:	4313      	orrs	r3, r2
 8002470:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800247c:	2b00      	cmp	r3, #0
 800247e:	d00a      	beq.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002480:	4b85      	ldr	r3, [pc, #532]	@ (8002698 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002482:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002486:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800248e:	4982      	ldr	r1, [pc, #520]	@ (8002698 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002490:	4313      	orrs	r3, r2
 8002492:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d00a      	beq.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80024a2:	4b7d      	ldr	r3, [pc, #500]	@ (8002698 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024a8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024b0:	4979      	ldr	r1, [pc, #484]	@ (8002698 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024b2:	4313      	orrs	r3, r2
 80024b4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d00a      	beq.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80024c4:	4b74      	ldr	r3, [pc, #464]	@ (8002698 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024ca:	f023 0203 	bic.w	r2, r3, #3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024d2:	4971      	ldr	r1, [pc, #452]	@ (8002698 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024d4:	4313      	orrs	r3, r2
 80024d6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d00a      	beq.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80024e6:	4b6c      	ldr	r3, [pc, #432]	@ (8002698 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024ec:	f023 020c 	bic.w	r2, r3, #12
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024f4:	4968      	ldr	r1, [pc, #416]	@ (8002698 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024f6:	4313      	orrs	r3, r2
 80024f8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002504:	2b00      	cmp	r3, #0
 8002506:	d00a      	beq.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002508:	4b63      	ldr	r3, [pc, #396]	@ (8002698 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800250a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800250e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002516:	4960      	ldr	r1, [pc, #384]	@ (8002698 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002518:	4313      	orrs	r3, r2
 800251a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002526:	2b00      	cmp	r3, #0
 8002528:	d00a      	beq.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800252a:	4b5b      	ldr	r3, [pc, #364]	@ (8002698 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800252c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002530:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002538:	4957      	ldr	r1, [pc, #348]	@ (8002698 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800253a:	4313      	orrs	r3, r2
 800253c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002548:	2b00      	cmp	r3, #0
 800254a:	d00a      	beq.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800254c:	4b52      	ldr	r3, [pc, #328]	@ (8002698 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800254e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002552:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800255a:	494f      	ldr	r1, [pc, #316]	@ (8002698 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800255c:	4313      	orrs	r3, r2
 800255e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800256a:	2b00      	cmp	r3, #0
 800256c:	d00a      	beq.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800256e:	4b4a      	ldr	r3, [pc, #296]	@ (8002698 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002570:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002574:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800257c:	4946      	ldr	r1, [pc, #280]	@ (8002698 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800257e:	4313      	orrs	r3, r2
 8002580:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800258c:	2b00      	cmp	r3, #0
 800258e:	d00a      	beq.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002590:	4b41      	ldr	r3, [pc, #260]	@ (8002698 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002592:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002596:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800259e:	493e      	ldr	r1, [pc, #248]	@ (8002698 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025a0:	4313      	orrs	r3, r2
 80025a2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d00a      	beq.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80025b2:	4b39      	ldr	r3, [pc, #228]	@ (8002698 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025b8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025c0:	4935      	ldr	r1, [pc, #212]	@ (8002698 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025c2:	4313      	orrs	r3, r2
 80025c4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d00a      	beq.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80025d4:	4b30      	ldr	r3, [pc, #192]	@ (8002698 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025da:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80025e2:	492d      	ldr	r1, [pc, #180]	@ (8002698 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025e4:	4313      	orrs	r3, r2
 80025e6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d011      	beq.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80025f6:	4b28      	ldr	r3, [pc, #160]	@ (8002698 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025fc:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002604:	4924      	ldr	r1, [pc, #144]	@ (8002698 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002606:	4313      	orrs	r3, r2
 8002608:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002610:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002614:	d101      	bne.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002616:	2301      	movs	r3, #1
 8002618:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0308 	and.w	r3, r3, #8
 8002622:	2b00      	cmp	r3, #0
 8002624:	d001      	beq.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002626:	2301      	movs	r3, #1
 8002628:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d00a      	beq.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002636:	4b18      	ldr	r3, [pc, #96]	@ (8002698 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002638:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800263c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002644:	4914      	ldr	r1, [pc, #80]	@ (8002698 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002646:	4313      	orrs	r3, r2
 8002648:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002654:	2b00      	cmp	r3, #0
 8002656:	d00b      	beq.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002658:	4b0f      	ldr	r3, [pc, #60]	@ (8002698 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800265a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800265e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002668:	490b      	ldr	r1, [pc, #44]	@ (8002698 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800266a:	4313      	orrs	r3, r2
 800266c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002678:	2b00      	cmp	r3, #0
 800267a:	d00f      	beq.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800267c:	4b06      	ldr	r3, [pc, #24]	@ (8002698 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800267e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002682:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800268c:	4902      	ldr	r1, [pc, #8]	@ (8002698 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800268e:	4313      	orrs	r3, r2
 8002690:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002694:	e002      	b.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002696:	bf00      	nop
 8002698:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d00b      	beq.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80026a8:	4b8a      	ldr	r3, [pc, #552]	@ (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80026ae:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026b8:	4986      	ldr	r1, [pc, #536]	@ (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026ba:	4313      	orrs	r3, r2
 80026bc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d00b      	beq.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80026cc:	4b81      	ldr	r3, [pc, #516]	@ (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80026d2:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80026dc:	497d      	ldr	r1, [pc, #500]	@ (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026de:	4313      	orrs	r3, r2
 80026e0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d006      	beq.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	f000 80d6 	beq.w	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80026f8:	4b76      	ldr	r3, [pc, #472]	@ (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a75      	ldr	r2, [pc, #468]	@ (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026fe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002702:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002704:	f7fe fb96 	bl	8000e34 <HAL_GetTick>
 8002708:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800270a:	e008      	b.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800270c:	f7fe fb92 	bl	8000e34 <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	2b64      	cmp	r3, #100	@ 0x64
 8002718:	d901      	bls.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e195      	b.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800271e:	4b6d      	ldr	r3, [pc, #436]	@ (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d1f0      	bne.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0301 	and.w	r3, r3, #1
 8002732:	2b00      	cmp	r3, #0
 8002734:	d021      	beq.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800273a:	2b00      	cmp	r3, #0
 800273c:	d11d      	bne.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800273e:	4b65      	ldr	r3, [pc, #404]	@ (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002740:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002744:	0c1b      	lsrs	r3, r3, #16
 8002746:	f003 0303 	and.w	r3, r3, #3
 800274a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800274c:	4b61      	ldr	r3, [pc, #388]	@ (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800274e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002752:	0e1b      	lsrs	r3, r3, #24
 8002754:	f003 030f 	and.w	r3, r3, #15
 8002758:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	019a      	lsls	r2, r3, #6
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	041b      	lsls	r3, r3, #16
 8002764:	431a      	orrs	r2, r3
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	061b      	lsls	r3, r3, #24
 800276a:	431a      	orrs	r2, r3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	071b      	lsls	r3, r3, #28
 8002772:	4958      	ldr	r1, [pc, #352]	@ (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002774:	4313      	orrs	r3, r2
 8002776:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d004      	beq.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800278a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800278e:	d00a      	beq.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002798:	2b00      	cmp	r3, #0
 800279a:	d02e      	beq.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80027a4:	d129      	bne.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80027a6:	4b4b      	ldr	r3, [pc, #300]	@ (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80027a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80027ac:	0c1b      	lsrs	r3, r3, #16
 80027ae:	f003 0303 	and.w	r3, r3, #3
 80027b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80027b4:	4b47      	ldr	r3, [pc, #284]	@ (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80027b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80027ba:	0f1b      	lsrs	r3, r3, #28
 80027bc:	f003 0307 	and.w	r3, r3, #7
 80027c0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	019a      	lsls	r2, r3, #6
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	041b      	lsls	r3, r3, #16
 80027cc:	431a      	orrs	r2, r3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	061b      	lsls	r3, r3, #24
 80027d4:	431a      	orrs	r2, r3
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	071b      	lsls	r3, r3, #28
 80027da:	493e      	ldr	r1, [pc, #248]	@ (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80027dc:	4313      	orrs	r3, r2
 80027de:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80027e2:	4b3c      	ldr	r3, [pc, #240]	@ (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80027e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80027e8:	f023 021f 	bic.w	r2, r3, #31
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027f0:	3b01      	subs	r3, #1
 80027f2:	4938      	ldr	r1, [pc, #224]	@ (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80027f4:	4313      	orrs	r3, r2
 80027f6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d01d      	beq.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002806:	4b33      	ldr	r3, [pc, #204]	@ (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002808:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800280c:	0e1b      	lsrs	r3, r3, #24
 800280e:	f003 030f 	and.w	r3, r3, #15
 8002812:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002814:	4b2f      	ldr	r3, [pc, #188]	@ (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002816:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800281a:	0f1b      	lsrs	r3, r3, #28
 800281c:	f003 0307 	and.w	r3, r3, #7
 8002820:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	019a      	lsls	r2, r3, #6
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	691b      	ldr	r3, [r3, #16]
 800282c:	041b      	lsls	r3, r3, #16
 800282e:	431a      	orrs	r2, r3
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	061b      	lsls	r3, r3, #24
 8002834:	431a      	orrs	r2, r3
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	071b      	lsls	r3, r3, #28
 800283a:	4926      	ldr	r1, [pc, #152]	@ (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800283c:	4313      	orrs	r3, r2
 800283e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d011      	beq.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	019a      	lsls	r2, r3, #6
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	691b      	ldr	r3, [r3, #16]
 8002858:	041b      	lsls	r3, r3, #16
 800285a:	431a      	orrs	r2, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	061b      	lsls	r3, r3, #24
 8002862:	431a      	orrs	r2, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	071b      	lsls	r3, r3, #28
 800286a:	491a      	ldr	r1, [pc, #104]	@ (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800286c:	4313      	orrs	r3, r2
 800286e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002872:	4b18      	ldr	r3, [pc, #96]	@ (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a17      	ldr	r2, [pc, #92]	@ (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002878:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800287c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800287e:	f7fe fad9 	bl	8000e34 <HAL_GetTick>
 8002882:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002884:	e008      	b.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002886:	f7fe fad5 	bl	8000e34 <HAL_GetTick>
 800288a:	4602      	mov	r2, r0
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	2b64      	cmp	r3, #100	@ 0x64
 8002892:	d901      	bls.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002894:	2303      	movs	r3, #3
 8002896:	e0d8      	b.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002898:	4b0e      	ldr	r3, [pc, #56]	@ (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d0f0      	beq.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80028a4:	69bb      	ldr	r3, [r7, #24]
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	f040 80ce 	bne.w	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80028ac:	4b09      	ldr	r3, [pc, #36]	@ (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a08      	ldr	r2, [pc, #32]	@ (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80028b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028b8:	f7fe fabc 	bl	8000e34 <HAL_GetTick>
 80028bc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80028be:	e00b      	b.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80028c0:	f7fe fab8 	bl	8000e34 <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	2b64      	cmp	r3, #100	@ 0x64
 80028cc:	d904      	bls.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e0bb      	b.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x842>
 80028d2:	bf00      	nop
 80028d4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80028d8:	4b5e      	ldr	r3, [pc, #376]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80028e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80028e4:	d0ec      	beq.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d003      	beq.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d009      	beq.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002902:	2b00      	cmp	r3, #0
 8002904:	d02e      	beq.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800290a:	2b00      	cmp	r3, #0
 800290c:	d12a      	bne.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800290e:	4b51      	ldr	r3, [pc, #324]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002910:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002914:	0c1b      	lsrs	r3, r3, #16
 8002916:	f003 0303 	and.w	r3, r3, #3
 800291a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800291c:	4b4d      	ldr	r3, [pc, #308]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800291e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002922:	0f1b      	lsrs	r3, r3, #28
 8002924:	f003 0307 	and.w	r3, r3, #7
 8002928:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	695b      	ldr	r3, [r3, #20]
 800292e:	019a      	lsls	r2, r3, #6
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	041b      	lsls	r3, r3, #16
 8002934:	431a      	orrs	r2, r3
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	699b      	ldr	r3, [r3, #24]
 800293a:	061b      	lsls	r3, r3, #24
 800293c:	431a      	orrs	r2, r3
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	071b      	lsls	r3, r3, #28
 8002942:	4944      	ldr	r1, [pc, #272]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002944:	4313      	orrs	r3, r2
 8002946:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800294a:	4b42      	ldr	r3, [pc, #264]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800294c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002950:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002958:	3b01      	subs	r3, #1
 800295a:	021b      	lsls	r3, r3, #8
 800295c:	493d      	ldr	r1, [pc, #244]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800295e:	4313      	orrs	r3, r2
 8002960:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d022      	beq.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002974:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002978:	d11d      	bne.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800297a:	4b36      	ldr	r3, [pc, #216]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800297c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002980:	0e1b      	lsrs	r3, r3, #24
 8002982:	f003 030f 	and.w	r3, r3, #15
 8002986:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002988:	4b32      	ldr	r3, [pc, #200]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800298a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800298e:	0f1b      	lsrs	r3, r3, #28
 8002990:	f003 0307 	and.w	r3, r3, #7
 8002994:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	695b      	ldr	r3, [r3, #20]
 800299a:	019a      	lsls	r2, r3, #6
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6a1b      	ldr	r3, [r3, #32]
 80029a0:	041b      	lsls	r3, r3, #16
 80029a2:	431a      	orrs	r2, r3
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	061b      	lsls	r3, r3, #24
 80029a8:	431a      	orrs	r2, r3
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	071b      	lsls	r3, r3, #28
 80029ae:	4929      	ldr	r1, [pc, #164]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80029b0:	4313      	orrs	r3, r2
 80029b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0308 	and.w	r3, r3, #8
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d028      	beq.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80029c2:	4b24      	ldr	r3, [pc, #144]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80029c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029c8:	0e1b      	lsrs	r3, r3, #24
 80029ca:	f003 030f 	and.w	r3, r3, #15
 80029ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80029d0:	4b20      	ldr	r3, [pc, #128]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80029d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029d6:	0c1b      	lsrs	r3, r3, #16
 80029d8:	f003 0303 	and.w	r3, r3, #3
 80029dc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	695b      	ldr	r3, [r3, #20]
 80029e2:	019a      	lsls	r2, r3, #6
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	041b      	lsls	r3, r3, #16
 80029e8:	431a      	orrs	r2, r3
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	061b      	lsls	r3, r3, #24
 80029ee:	431a      	orrs	r2, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	69db      	ldr	r3, [r3, #28]
 80029f4:	071b      	lsls	r3, r3, #28
 80029f6:	4917      	ldr	r1, [pc, #92]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80029f8:	4313      	orrs	r3, r2
 80029fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80029fe:	4b15      	ldr	r3, [pc, #84]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002a00:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a04:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a0c:	4911      	ldr	r1, [pc, #68]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002a14:	4b0f      	ldr	r3, [pc, #60]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a0e      	ldr	r2, [pc, #56]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002a1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a1e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a20:	f7fe fa08 	bl	8000e34 <HAL_GetTick>
 8002a24:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002a26:	e008      	b.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002a28:	f7fe fa04 	bl	8000e34 <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	2b64      	cmp	r3, #100	@ 0x64
 8002a34:	d901      	bls.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e007      	b.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002a3a:	4b06      	ldr	r3, [pc, #24]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002a42:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002a46:	d1ef      	bne.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002a48:	2300      	movs	r3, #0
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3720      	adds	r7, #32
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	40023800 	.word	0x40023800

08002a58 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d101      	bne.n	8002a6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e040      	b.n	8002aec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d106      	bne.n	8002a80 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2200      	movs	r2, #0
 8002a76:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f7fe f8be 	bl	8000bfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2224      	movs	r2, #36	@ 0x24
 8002a84:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f022 0201 	bic.w	r2, r2, #1
 8002a94:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d002      	beq.n	8002aa4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f000 fa8c 	bl	8002fbc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	f000 f825 	bl	8002af4 <UART_SetConfig>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d101      	bne.n	8002ab4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e01b      	b.n	8002aec <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	685a      	ldr	r2, [r3, #4]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002ac2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	689a      	ldr	r2, [r3, #8]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002ad2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f042 0201 	orr.w	r2, r2, #1
 8002ae2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f000 fb0b 	bl	8003100 <UART_CheckIdleState>
 8002aea:	4603      	mov	r3, r0
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3708      	adds	r7, #8
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}

08002af4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b088      	sub	sp, #32
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002afc:	2300      	movs	r3, #0
 8002afe:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	689a      	ldr	r2, [r3, #8]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	691b      	ldr	r3, [r3, #16]
 8002b08:	431a      	orrs	r2, r3
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	695b      	ldr	r3, [r3, #20]
 8002b0e:	431a      	orrs	r2, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	69db      	ldr	r3, [r3, #28]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	4ba6      	ldr	r3, [pc, #664]	@ (8002db8 <UART_SetConfig+0x2c4>)
 8002b20:	4013      	ands	r3, r2
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	6812      	ldr	r2, [r2, #0]
 8002b26:	6979      	ldr	r1, [r7, #20]
 8002b28:	430b      	orrs	r3, r1
 8002b2a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	68da      	ldr	r2, [r3, #12]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	430a      	orrs	r2, r1
 8002b40:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	699b      	ldr	r3, [r3, #24]
 8002b46:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6a1b      	ldr	r3, [r3, #32]
 8002b4c:	697a      	ldr	r2, [r7, #20]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	697a      	ldr	r2, [r7, #20]
 8002b62:	430a      	orrs	r2, r1
 8002b64:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a94      	ldr	r2, [pc, #592]	@ (8002dbc <UART_SetConfig+0x2c8>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d120      	bne.n	8002bb2 <UART_SetConfig+0xbe>
 8002b70:	4b93      	ldr	r3, [pc, #588]	@ (8002dc0 <UART_SetConfig+0x2cc>)
 8002b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b76:	f003 0303 	and.w	r3, r3, #3
 8002b7a:	2b03      	cmp	r3, #3
 8002b7c:	d816      	bhi.n	8002bac <UART_SetConfig+0xb8>
 8002b7e:	a201      	add	r2, pc, #4	@ (adr r2, 8002b84 <UART_SetConfig+0x90>)
 8002b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b84:	08002b95 	.word	0x08002b95
 8002b88:	08002ba1 	.word	0x08002ba1
 8002b8c:	08002b9b 	.word	0x08002b9b
 8002b90:	08002ba7 	.word	0x08002ba7
 8002b94:	2301      	movs	r3, #1
 8002b96:	77fb      	strb	r3, [r7, #31]
 8002b98:	e150      	b.n	8002e3c <UART_SetConfig+0x348>
 8002b9a:	2302      	movs	r3, #2
 8002b9c:	77fb      	strb	r3, [r7, #31]
 8002b9e:	e14d      	b.n	8002e3c <UART_SetConfig+0x348>
 8002ba0:	2304      	movs	r3, #4
 8002ba2:	77fb      	strb	r3, [r7, #31]
 8002ba4:	e14a      	b.n	8002e3c <UART_SetConfig+0x348>
 8002ba6:	2308      	movs	r3, #8
 8002ba8:	77fb      	strb	r3, [r7, #31]
 8002baa:	e147      	b.n	8002e3c <UART_SetConfig+0x348>
 8002bac:	2310      	movs	r3, #16
 8002bae:	77fb      	strb	r3, [r7, #31]
 8002bb0:	e144      	b.n	8002e3c <UART_SetConfig+0x348>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a83      	ldr	r2, [pc, #524]	@ (8002dc4 <UART_SetConfig+0x2d0>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d132      	bne.n	8002c22 <UART_SetConfig+0x12e>
 8002bbc:	4b80      	ldr	r3, [pc, #512]	@ (8002dc0 <UART_SetConfig+0x2cc>)
 8002bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bc2:	f003 030c 	and.w	r3, r3, #12
 8002bc6:	2b0c      	cmp	r3, #12
 8002bc8:	d828      	bhi.n	8002c1c <UART_SetConfig+0x128>
 8002bca:	a201      	add	r2, pc, #4	@ (adr r2, 8002bd0 <UART_SetConfig+0xdc>)
 8002bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bd0:	08002c05 	.word	0x08002c05
 8002bd4:	08002c1d 	.word	0x08002c1d
 8002bd8:	08002c1d 	.word	0x08002c1d
 8002bdc:	08002c1d 	.word	0x08002c1d
 8002be0:	08002c11 	.word	0x08002c11
 8002be4:	08002c1d 	.word	0x08002c1d
 8002be8:	08002c1d 	.word	0x08002c1d
 8002bec:	08002c1d 	.word	0x08002c1d
 8002bf0:	08002c0b 	.word	0x08002c0b
 8002bf4:	08002c1d 	.word	0x08002c1d
 8002bf8:	08002c1d 	.word	0x08002c1d
 8002bfc:	08002c1d 	.word	0x08002c1d
 8002c00:	08002c17 	.word	0x08002c17
 8002c04:	2300      	movs	r3, #0
 8002c06:	77fb      	strb	r3, [r7, #31]
 8002c08:	e118      	b.n	8002e3c <UART_SetConfig+0x348>
 8002c0a:	2302      	movs	r3, #2
 8002c0c:	77fb      	strb	r3, [r7, #31]
 8002c0e:	e115      	b.n	8002e3c <UART_SetConfig+0x348>
 8002c10:	2304      	movs	r3, #4
 8002c12:	77fb      	strb	r3, [r7, #31]
 8002c14:	e112      	b.n	8002e3c <UART_SetConfig+0x348>
 8002c16:	2308      	movs	r3, #8
 8002c18:	77fb      	strb	r3, [r7, #31]
 8002c1a:	e10f      	b.n	8002e3c <UART_SetConfig+0x348>
 8002c1c:	2310      	movs	r3, #16
 8002c1e:	77fb      	strb	r3, [r7, #31]
 8002c20:	e10c      	b.n	8002e3c <UART_SetConfig+0x348>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a68      	ldr	r2, [pc, #416]	@ (8002dc8 <UART_SetConfig+0x2d4>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d120      	bne.n	8002c6e <UART_SetConfig+0x17a>
 8002c2c:	4b64      	ldr	r3, [pc, #400]	@ (8002dc0 <UART_SetConfig+0x2cc>)
 8002c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c32:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002c36:	2b30      	cmp	r3, #48	@ 0x30
 8002c38:	d013      	beq.n	8002c62 <UART_SetConfig+0x16e>
 8002c3a:	2b30      	cmp	r3, #48	@ 0x30
 8002c3c:	d814      	bhi.n	8002c68 <UART_SetConfig+0x174>
 8002c3e:	2b20      	cmp	r3, #32
 8002c40:	d009      	beq.n	8002c56 <UART_SetConfig+0x162>
 8002c42:	2b20      	cmp	r3, #32
 8002c44:	d810      	bhi.n	8002c68 <UART_SetConfig+0x174>
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d002      	beq.n	8002c50 <UART_SetConfig+0x15c>
 8002c4a:	2b10      	cmp	r3, #16
 8002c4c:	d006      	beq.n	8002c5c <UART_SetConfig+0x168>
 8002c4e:	e00b      	b.n	8002c68 <UART_SetConfig+0x174>
 8002c50:	2300      	movs	r3, #0
 8002c52:	77fb      	strb	r3, [r7, #31]
 8002c54:	e0f2      	b.n	8002e3c <UART_SetConfig+0x348>
 8002c56:	2302      	movs	r3, #2
 8002c58:	77fb      	strb	r3, [r7, #31]
 8002c5a:	e0ef      	b.n	8002e3c <UART_SetConfig+0x348>
 8002c5c:	2304      	movs	r3, #4
 8002c5e:	77fb      	strb	r3, [r7, #31]
 8002c60:	e0ec      	b.n	8002e3c <UART_SetConfig+0x348>
 8002c62:	2308      	movs	r3, #8
 8002c64:	77fb      	strb	r3, [r7, #31]
 8002c66:	e0e9      	b.n	8002e3c <UART_SetConfig+0x348>
 8002c68:	2310      	movs	r3, #16
 8002c6a:	77fb      	strb	r3, [r7, #31]
 8002c6c:	e0e6      	b.n	8002e3c <UART_SetConfig+0x348>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a56      	ldr	r2, [pc, #344]	@ (8002dcc <UART_SetConfig+0x2d8>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d120      	bne.n	8002cba <UART_SetConfig+0x1c6>
 8002c78:	4b51      	ldr	r3, [pc, #324]	@ (8002dc0 <UART_SetConfig+0x2cc>)
 8002c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c7e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002c82:	2bc0      	cmp	r3, #192	@ 0xc0
 8002c84:	d013      	beq.n	8002cae <UART_SetConfig+0x1ba>
 8002c86:	2bc0      	cmp	r3, #192	@ 0xc0
 8002c88:	d814      	bhi.n	8002cb4 <UART_SetConfig+0x1c0>
 8002c8a:	2b80      	cmp	r3, #128	@ 0x80
 8002c8c:	d009      	beq.n	8002ca2 <UART_SetConfig+0x1ae>
 8002c8e:	2b80      	cmp	r3, #128	@ 0x80
 8002c90:	d810      	bhi.n	8002cb4 <UART_SetConfig+0x1c0>
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d002      	beq.n	8002c9c <UART_SetConfig+0x1a8>
 8002c96:	2b40      	cmp	r3, #64	@ 0x40
 8002c98:	d006      	beq.n	8002ca8 <UART_SetConfig+0x1b4>
 8002c9a:	e00b      	b.n	8002cb4 <UART_SetConfig+0x1c0>
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	77fb      	strb	r3, [r7, #31]
 8002ca0:	e0cc      	b.n	8002e3c <UART_SetConfig+0x348>
 8002ca2:	2302      	movs	r3, #2
 8002ca4:	77fb      	strb	r3, [r7, #31]
 8002ca6:	e0c9      	b.n	8002e3c <UART_SetConfig+0x348>
 8002ca8:	2304      	movs	r3, #4
 8002caa:	77fb      	strb	r3, [r7, #31]
 8002cac:	e0c6      	b.n	8002e3c <UART_SetConfig+0x348>
 8002cae:	2308      	movs	r3, #8
 8002cb0:	77fb      	strb	r3, [r7, #31]
 8002cb2:	e0c3      	b.n	8002e3c <UART_SetConfig+0x348>
 8002cb4:	2310      	movs	r3, #16
 8002cb6:	77fb      	strb	r3, [r7, #31]
 8002cb8:	e0c0      	b.n	8002e3c <UART_SetConfig+0x348>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a44      	ldr	r2, [pc, #272]	@ (8002dd0 <UART_SetConfig+0x2dc>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d125      	bne.n	8002d10 <UART_SetConfig+0x21c>
 8002cc4:	4b3e      	ldr	r3, [pc, #248]	@ (8002dc0 <UART_SetConfig+0x2cc>)
 8002cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002cce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002cd2:	d017      	beq.n	8002d04 <UART_SetConfig+0x210>
 8002cd4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002cd8:	d817      	bhi.n	8002d0a <UART_SetConfig+0x216>
 8002cda:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002cde:	d00b      	beq.n	8002cf8 <UART_SetConfig+0x204>
 8002ce0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ce4:	d811      	bhi.n	8002d0a <UART_SetConfig+0x216>
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d003      	beq.n	8002cf2 <UART_SetConfig+0x1fe>
 8002cea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002cee:	d006      	beq.n	8002cfe <UART_SetConfig+0x20a>
 8002cf0:	e00b      	b.n	8002d0a <UART_SetConfig+0x216>
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	77fb      	strb	r3, [r7, #31]
 8002cf6:	e0a1      	b.n	8002e3c <UART_SetConfig+0x348>
 8002cf8:	2302      	movs	r3, #2
 8002cfa:	77fb      	strb	r3, [r7, #31]
 8002cfc:	e09e      	b.n	8002e3c <UART_SetConfig+0x348>
 8002cfe:	2304      	movs	r3, #4
 8002d00:	77fb      	strb	r3, [r7, #31]
 8002d02:	e09b      	b.n	8002e3c <UART_SetConfig+0x348>
 8002d04:	2308      	movs	r3, #8
 8002d06:	77fb      	strb	r3, [r7, #31]
 8002d08:	e098      	b.n	8002e3c <UART_SetConfig+0x348>
 8002d0a:	2310      	movs	r3, #16
 8002d0c:	77fb      	strb	r3, [r7, #31]
 8002d0e:	e095      	b.n	8002e3c <UART_SetConfig+0x348>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a2f      	ldr	r2, [pc, #188]	@ (8002dd4 <UART_SetConfig+0x2e0>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d125      	bne.n	8002d66 <UART_SetConfig+0x272>
 8002d1a:	4b29      	ldr	r3, [pc, #164]	@ (8002dc0 <UART_SetConfig+0x2cc>)
 8002d1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d20:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002d24:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002d28:	d017      	beq.n	8002d5a <UART_SetConfig+0x266>
 8002d2a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002d2e:	d817      	bhi.n	8002d60 <UART_SetConfig+0x26c>
 8002d30:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002d34:	d00b      	beq.n	8002d4e <UART_SetConfig+0x25a>
 8002d36:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002d3a:	d811      	bhi.n	8002d60 <UART_SetConfig+0x26c>
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d003      	beq.n	8002d48 <UART_SetConfig+0x254>
 8002d40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d44:	d006      	beq.n	8002d54 <UART_SetConfig+0x260>
 8002d46:	e00b      	b.n	8002d60 <UART_SetConfig+0x26c>
 8002d48:	2301      	movs	r3, #1
 8002d4a:	77fb      	strb	r3, [r7, #31]
 8002d4c:	e076      	b.n	8002e3c <UART_SetConfig+0x348>
 8002d4e:	2302      	movs	r3, #2
 8002d50:	77fb      	strb	r3, [r7, #31]
 8002d52:	e073      	b.n	8002e3c <UART_SetConfig+0x348>
 8002d54:	2304      	movs	r3, #4
 8002d56:	77fb      	strb	r3, [r7, #31]
 8002d58:	e070      	b.n	8002e3c <UART_SetConfig+0x348>
 8002d5a:	2308      	movs	r3, #8
 8002d5c:	77fb      	strb	r3, [r7, #31]
 8002d5e:	e06d      	b.n	8002e3c <UART_SetConfig+0x348>
 8002d60:	2310      	movs	r3, #16
 8002d62:	77fb      	strb	r3, [r7, #31]
 8002d64:	e06a      	b.n	8002e3c <UART_SetConfig+0x348>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a1b      	ldr	r2, [pc, #108]	@ (8002dd8 <UART_SetConfig+0x2e4>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d138      	bne.n	8002de2 <UART_SetConfig+0x2ee>
 8002d70:	4b13      	ldr	r3, [pc, #76]	@ (8002dc0 <UART_SetConfig+0x2cc>)
 8002d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d76:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8002d7a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002d7e:	d017      	beq.n	8002db0 <UART_SetConfig+0x2bc>
 8002d80:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002d84:	d82a      	bhi.n	8002ddc <UART_SetConfig+0x2e8>
 8002d86:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d8a:	d00b      	beq.n	8002da4 <UART_SetConfig+0x2b0>
 8002d8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d90:	d824      	bhi.n	8002ddc <UART_SetConfig+0x2e8>
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d003      	beq.n	8002d9e <UART_SetConfig+0x2aa>
 8002d96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d9a:	d006      	beq.n	8002daa <UART_SetConfig+0x2b6>
 8002d9c:	e01e      	b.n	8002ddc <UART_SetConfig+0x2e8>
 8002d9e:	2300      	movs	r3, #0
 8002da0:	77fb      	strb	r3, [r7, #31]
 8002da2:	e04b      	b.n	8002e3c <UART_SetConfig+0x348>
 8002da4:	2302      	movs	r3, #2
 8002da6:	77fb      	strb	r3, [r7, #31]
 8002da8:	e048      	b.n	8002e3c <UART_SetConfig+0x348>
 8002daa:	2304      	movs	r3, #4
 8002dac:	77fb      	strb	r3, [r7, #31]
 8002dae:	e045      	b.n	8002e3c <UART_SetConfig+0x348>
 8002db0:	2308      	movs	r3, #8
 8002db2:	77fb      	strb	r3, [r7, #31]
 8002db4:	e042      	b.n	8002e3c <UART_SetConfig+0x348>
 8002db6:	bf00      	nop
 8002db8:	efff69f3 	.word	0xefff69f3
 8002dbc:	40011000 	.word	0x40011000
 8002dc0:	40023800 	.word	0x40023800
 8002dc4:	40004400 	.word	0x40004400
 8002dc8:	40004800 	.word	0x40004800
 8002dcc:	40004c00 	.word	0x40004c00
 8002dd0:	40005000 	.word	0x40005000
 8002dd4:	40011400 	.word	0x40011400
 8002dd8:	40007800 	.word	0x40007800
 8002ddc:	2310      	movs	r3, #16
 8002dde:	77fb      	strb	r3, [r7, #31]
 8002de0:	e02c      	b.n	8002e3c <UART_SetConfig+0x348>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a72      	ldr	r2, [pc, #456]	@ (8002fb0 <UART_SetConfig+0x4bc>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d125      	bne.n	8002e38 <UART_SetConfig+0x344>
 8002dec:	4b71      	ldr	r3, [pc, #452]	@ (8002fb4 <UART_SetConfig+0x4c0>)
 8002dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002df2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002df6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8002dfa:	d017      	beq.n	8002e2c <UART_SetConfig+0x338>
 8002dfc:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8002e00:	d817      	bhi.n	8002e32 <UART_SetConfig+0x33e>
 8002e02:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e06:	d00b      	beq.n	8002e20 <UART_SetConfig+0x32c>
 8002e08:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e0c:	d811      	bhi.n	8002e32 <UART_SetConfig+0x33e>
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d003      	beq.n	8002e1a <UART_SetConfig+0x326>
 8002e12:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002e16:	d006      	beq.n	8002e26 <UART_SetConfig+0x332>
 8002e18:	e00b      	b.n	8002e32 <UART_SetConfig+0x33e>
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	77fb      	strb	r3, [r7, #31]
 8002e1e:	e00d      	b.n	8002e3c <UART_SetConfig+0x348>
 8002e20:	2302      	movs	r3, #2
 8002e22:	77fb      	strb	r3, [r7, #31]
 8002e24:	e00a      	b.n	8002e3c <UART_SetConfig+0x348>
 8002e26:	2304      	movs	r3, #4
 8002e28:	77fb      	strb	r3, [r7, #31]
 8002e2a:	e007      	b.n	8002e3c <UART_SetConfig+0x348>
 8002e2c:	2308      	movs	r3, #8
 8002e2e:	77fb      	strb	r3, [r7, #31]
 8002e30:	e004      	b.n	8002e3c <UART_SetConfig+0x348>
 8002e32:	2310      	movs	r3, #16
 8002e34:	77fb      	strb	r3, [r7, #31]
 8002e36:	e001      	b.n	8002e3c <UART_SetConfig+0x348>
 8002e38:	2310      	movs	r3, #16
 8002e3a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	69db      	ldr	r3, [r3, #28]
 8002e40:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e44:	d15b      	bne.n	8002efe <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8002e46:	7ffb      	ldrb	r3, [r7, #31]
 8002e48:	2b08      	cmp	r3, #8
 8002e4a:	d828      	bhi.n	8002e9e <UART_SetConfig+0x3aa>
 8002e4c:	a201      	add	r2, pc, #4	@ (adr r2, 8002e54 <UART_SetConfig+0x360>)
 8002e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e52:	bf00      	nop
 8002e54:	08002e79 	.word	0x08002e79
 8002e58:	08002e81 	.word	0x08002e81
 8002e5c:	08002e89 	.word	0x08002e89
 8002e60:	08002e9f 	.word	0x08002e9f
 8002e64:	08002e8f 	.word	0x08002e8f
 8002e68:	08002e9f 	.word	0x08002e9f
 8002e6c:	08002e9f 	.word	0x08002e9f
 8002e70:	08002e9f 	.word	0x08002e9f
 8002e74:	08002e97 	.word	0x08002e97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e78:	f7ff f99e 	bl	80021b8 <HAL_RCC_GetPCLK1Freq>
 8002e7c:	61b8      	str	r0, [r7, #24]
        break;
 8002e7e:	e013      	b.n	8002ea8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002e80:	f7ff f9ae 	bl	80021e0 <HAL_RCC_GetPCLK2Freq>
 8002e84:	61b8      	str	r0, [r7, #24]
        break;
 8002e86:	e00f      	b.n	8002ea8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e88:	4b4b      	ldr	r3, [pc, #300]	@ (8002fb8 <UART_SetConfig+0x4c4>)
 8002e8a:	61bb      	str	r3, [r7, #24]
        break;
 8002e8c:	e00c      	b.n	8002ea8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e8e:	f7ff f881 	bl	8001f94 <HAL_RCC_GetSysClockFreq>
 8002e92:	61b8      	str	r0, [r7, #24]
        break;
 8002e94:	e008      	b.n	8002ea8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002e9a:	61bb      	str	r3, [r7, #24]
        break;
 8002e9c:	e004      	b.n	8002ea8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	77bb      	strb	r3, [r7, #30]
        break;
 8002ea6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002ea8:	69bb      	ldr	r3, [r7, #24]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d074      	beq.n	8002f98 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	005a      	lsls	r2, r3, #1
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	085b      	lsrs	r3, r3, #1
 8002eb8:	441a      	add	r2, r3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ec2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	2b0f      	cmp	r3, #15
 8002ec8:	d916      	bls.n	8002ef8 <UART_SetConfig+0x404>
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ed0:	d212      	bcs.n	8002ef8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	b29b      	uxth	r3, r3
 8002ed6:	f023 030f 	bic.w	r3, r3, #15
 8002eda:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	085b      	lsrs	r3, r3, #1
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	f003 0307 	and.w	r3, r3, #7
 8002ee6:	b29a      	uxth	r2, r3
 8002ee8:	89fb      	ldrh	r3, [r7, #14]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	89fa      	ldrh	r2, [r7, #14]
 8002ef4:	60da      	str	r2, [r3, #12]
 8002ef6:	e04f      	b.n	8002f98 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	77bb      	strb	r3, [r7, #30]
 8002efc:	e04c      	b.n	8002f98 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002efe:	7ffb      	ldrb	r3, [r7, #31]
 8002f00:	2b08      	cmp	r3, #8
 8002f02:	d828      	bhi.n	8002f56 <UART_SetConfig+0x462>
 8002f04:	a201      	add	r2, pc, #4	@ (adr r2, 8002f0c <UART_SetConfig+0x418>)
 8002f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f0a:	bf00      	nop
 8002f0c:	08002f31 	.word	0x08002f31
 8002f10:	08002f39 	.word	0x08002f39
 8002f14:	08002f41 	.word	0x08002f41
 8002f18:	08002f57 	.word	0x08002f57
 8002f1c:	08002f47 	.word	0x08002f47
 8002f20:	08002f57 	.word	0x08002f57
 8002f24:	08002f57 	.word	0x08002f57
 8002f28:	08002f57 	.word	0x08002f57
 8002f2c:	08002f4f 	.word	0x08002f4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f30:	f7ff f942 	bl	80021b8 <HAL_RCC_GetPCLK1Freq>
 8002f34:	61b8      	str	r0, [r7, #24]
        break;
 8002f36:	e013      	b.n	8002f60 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f38:	f7ff f952 	bl	80021e0 <HAL_RCC_GetPCLK2Freq>
 8002f3c:	61b8      	str	r0, [r7, #24]
        break;
 8002f3e:	e00f      	b.n	8002f60 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f40:	4b1d      	ldr	r3, [pc, #116]	@ (8002fb8 <UART_SetConfig+0x4c4>)
 8002f42:	61bb      	str	r3, [r7, #24]
        break;
 8002f44:	e00c      	b.n	8002f60 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f46:	f7ff f825 	bl	8001f94 <HAL_RCC_GetSysClockFreq>
 8002f4a:	61b8      	str	r0, [r7, #24]
        break;
 8002f4c:	e008      	b.n	8002f60 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002f52:	61bb      	str	r3, [r7, #24]
        break;
 8002f54:	e004      	b.n	8002f60 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8002f56:	2300      	movs	r3, #0
 8002f58:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	77bb      	strb	r3, [r7, #30]
        break;
 8002f5e:	bf00      	nop
    }

    if (pclk != 0U)
 8002f60:	69bb      	ldr	r3, [r7, #24]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d018      	beq.n	8002f98 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	085a      	lsrs	r2, r3, #1
 8002f6c:	69bb      	ldr	r3, [r7, #24]
 8002f6e:	441a      	add	r2, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f78:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	2b0f      	cmp	r3, #15
 8002f7e:	d909      	bls.n	8002f94 <UART_SetConfig+0x4a0>
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f86:	d205      	bcs.n	8002f94 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	b29a      	uxth	r2, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	60da      	str	r2, [r3, #12]
 8002f92:	e001      	b.n	8002f98 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002fa4:	7fbb      	ldrb	r3, [r7, #30]
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3720      	adds	r7, #32
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	40007c00 	.word	0x40007c00
 8002fb4:	40023800 	.word	0x40023800
 8002fb8:	00f42400 	.word	0x00f42400

08002fbc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fc8:	f003 0308 	and.w	r3, r3, #8
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d00a      	beq.n	8002fe6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	430a      	orrs	r2, r1
 8002fe4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fea:	f003 0301 	and.w	r3, r3, #1
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d00a      	beq.n	8003008 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	430a      	orrs	r2, r1
 8003006:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800300c:	f003 0302 	and.w	r3, r3, #2
 8003010:	2b00      	cmp	r3, #0
 8003012:	d00a      	beq.n	800302a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	430a      	orrs	r2, r1
 8003028:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800302e:	f003 0304 	and.w	r3, r3, #4
 8003032:	2b00      	cmp	r3, #0
 8003034:	d00a      	beq.n	800304c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	430a      	orrs	r2, r1
 800304a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003050:	f003 0310 	and.w	r3, r3, #16
 8003054:	2b00      	cmp	r3, #0
 8003056:	d00a      	beq.n	800306e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	430a      	orrs	r2, r1
 800306c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003072:	f003 0320 	and.w	r3, r3, #32
 8003076:	2b00      	cmp	r3, #0
 8003078:	d00a      	beq.n	8003090 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	430a      	orrs	r2, r1
 800308e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003094:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003098:	2b00      	cmp	r3, #0
 800309a:	d01a      	beq.n	80030d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	430a      	orrs	r2, r1
 80030b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80030ba:	d10a      	bne.n	80030d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	430a      	orrs	r2, r1
 80030d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d00a      	beq.n	80030f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	430a      	orrs	r2, r1
 80030f2:	605a      	str	r2, [r3, #4]
  }
}
 80030f4:	bf00      	nop
 80030f6:	370c      	adds	r7, #12
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr

08003100 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b098      	sub	sp, #96	@ 0x60
 8003104:	af02      	add	r7, sp, #8
 8003106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2200      	movs	r2, #0
 800310c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003110:	f7fd fe90 	bl	8000e34 <HAL_GetTick>
 8003114:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0308 	and.w	r3, r3, #8
 8003120:	2b08      	cmp	r3, #8
 8003122:	d12e      	bne.n	8003182 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003124:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003128:	9300      	str	r3, [sp, #0]
 800312a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800312c:	2200      	movs	r2, #0
 800312e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f000 f88c 	bl	8003250 <UART_WaitOnFlagUntilTimeout>
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d021      	beq.n	8003182 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003144:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003146:	e853 3f00 	ldrex	r3, [r3]
 800314a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800314c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800314e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003152:	653b      	str	r3, [r7, #80]	@ 0x50
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	461a      	mov	r2, r3
 800315a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800315c:	647b      	str	r3, [r7, #68]	@ 0x44
 800315e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003160:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003162:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003164:	e841 2300 	strex	r3, r2, [r1]
 8003168:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800316a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800316c:	2b00      	cmp	r3, #0
 800316e:	d1e6      	bne.n	800313e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2220      	movs	r2, #32
 8003174:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e062      	b.n	8003248 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0304 	and.w	r3, r3, #4
 800318c:	2b04      	cmp	r3, #4
 800318e:	d149      	bne.n	8003224 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003190:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003194:	9300      	str	r3, [sp, #0]
 8003196:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003198:	2200      	movs	r2, #0
 800319a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f000 f856 	bl	8003250 <UART_WaitOnFlagUntilTimeout>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d03c      	beq.n	8003224 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031b2:	e853 3f00 	ldrex	r3, [r3]
 80031b6:	623b      	str	r3, [r7, #32]
   return(result);
 80031b8:	6a3b      	ldr	r3, [r7, #32]
 80031ba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80031be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	461a      	mov	r2, r3
 80031c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80031c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80031ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031cc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80031ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80031d0:	e841 2300 	strex	r3, r2, [r1]
 80031d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80031d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d1e6      	bne.n	80031aa <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	3308      	adds	r3, #8
 80031e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	e853 3f00 	ldrex	r3, [r3]
 80031ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f023 0301 	bic.w	r3, r3, #1
 80031f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	3308      	adds	r3, #8
 80031fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80031fc:	61fa      	str	r2, [r7, #28]
 80031fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003200:	69b9      	ldr	r1, [r7, #24]
 8003202:	69fa      	ldr	r2, [r7, #28]
 8003204:	e841 2300 	strex	r3, r2, [r1]
 8003208:	617b      	str	r3, [r7, #20]
   return(result);
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d1e5      	bne.n	80031dc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2220      	movs	r2, #32
 8003214:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2200      	movs	r2, #0
 800321c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003220:	2303      	movs	r3, #3
 8003222:	e011      	b.n	8003248 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2220      	movs	r2, #32
 8003228:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2220      	movs	r2, #32
 800322e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2200      	movs	r2, #0
 8003236:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2200      	movs	r2, #0
 800323c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003246:	2300      	movs	r3, #0
}
 8003248:	4618      	mov	r0, r3
 800324a:	3758      	adds	r7, #88	@ 0x58
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}

08003250 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b084      	sub	sp, #16
 8003254:	af00      	add	r7, sp, #0
 8003256:	60f8      	str	r0, [r7, #12]
 8003258:	60b9      	str	r1, [r7, #8]
 800325a:	603b      	str	r3, [r7, #0]
 800325c:	4613      	mov	r3, r2
 800325e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003260:	e04f      	b.n	8003302 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003262:	69bb      	ldr	r3, [r7, #24]
 8003264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003268:	d04b      	beq.n	8003302 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800326a:	f7fd fde3 	bl	8000e34 <HAL_GetTick>
 800326e:	4602      	mov	r2, r0
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	69ba      	ldr	r2, [r7, #24]
 8003276:	429a      	cmp	r2, r3
 8003278:	d302      	bcc.n	8003280 <UART_WaitOnFlagUntilTimeout+0x30>
 800327a:	69bb      	ldr	r3, [r7, #24]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d101      	bne.n	8003284 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003280:	2303      	movs	r3, #3
 8003282:	e04e      	b.n	8003322 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0304 	and.w	r3, r3, #4
 800328e:	2b00      	cmp	r3, #0
 8003290:	d037      	beq.n	8003302 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	2b80      	cmp	r3, #128	@ 0x80
 8003296:	d034      	beq.n	8003302 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	2b40      	cmp	r3, #64	@ 0x40
 800329c:	d031      	beq.n	8003302 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	69db      	ldr	r3, [r3, #28]
 80032a4:	f003 0308 	and.w	r3, r3, #8
 80032a8:	2b08      	cmp	r3, #8
 80032aa:	d110      	bne.n	80032ce <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	2208      	movs	r2, #8
 80032b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80032b4:	68f8      	ldr	r0, [r7, #12]
 80032b6:	f000 f838 	bl	800332a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2208      	movs	r2, #8
 80032be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2200      	movs	r2, #0
 80032c6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e029      	b.n	8003322 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	69db      	ldr	r3, [r3, #28]
 80032d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80032d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80032dc:	d111      	bne.n	8003302 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80032e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80032e8:	68f8      	ldr	r0, [r7, #12]
 80032ea:	f000 f81e 	bl	800332a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2220      	movs	r2, #32
 80032f2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2200      	movs	r2, #0
 80032fa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	e00f      	b.n	8003322 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	69da      	ldr	r2, [r3, #28]
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	4013      	ands	r3, r2
 800330c:	68ba      	ldr	r2, [r7, #8]
 800330e:	429a      	cmp	r2, r3
 8003310:	bf0c      	ite	eq
 8003312:	2301      	moveq	r3, #1
 8003314:	2300      	movne	r3, #0
 8003316:	b2db      	uxtb	r3, r3
 8003318:	461a      	mov	r2, r3
 800331a:	79fb      	ldrb	r3, [r7, #7]
 800331c:	429a      	cmp	r2, r3
 800331e:	d0a0      	beq.n	8003262 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003320:	2300      	movs	r3, #0
}
 8003322:	4618      	mov	r0, r3
 8003324:	3710      	adds	r7, #16
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}

0800332a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800332a:	b480      	push	{r7}
 800332c:	b095      	sub	sp, #84	@ 0x54
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003338:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800333a:	e853 3f00 	ldrex	r3, [r3]
 800333e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003340:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003342:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003346:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	461a      	mov	r2, r3
 800334e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003350:	643b      	str	r3, [r7, #64]	@ 0x40
 8003352:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003354:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003356:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003358:	e841 2300 	strex	r3, r2, [r1]
 800335c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800335e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003360:	2b00      	cmp	r3, #0
 8003362:	d1e6      	bne.n	8003332 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	3308      	adds	r3, #8
 800336a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800336c:	6a3b      	ldr	r3, [r7, #32]
 800336e:	e853 3f00 	ldrex	r3, [r3]
 8003372:	61fb      	str	r3, [r7, #28]
   return(result);
 8003374:	69fb      	ldr	r3, [r7, #28]
 8003376:	f023 0301 	bic.w	r3, r3, #1
 800337a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	3308      	adds	r3, #8
 8003382:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003384:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003386:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003388:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800338a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800338c:	e841 2300 	strex	r3, r2, [r1]
 8003390:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003394:	2b00      	cmp	r3, #0
 8003396:	d1e5      	bne.n	8003364 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800339c:	2b01      	cmp	r3, #1
 800339e:	d118      	bne.n	80033d2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	e853 3f00 	ldrex	r3, [r3]
 80033ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	f023 0310 	bic.w	r3, r3, #16
 80033b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	461a      	mov	r2, r3
 80033bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80033be:	61bb      	str	r3, [r7, #24]
 80033c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033c2:	6979      	ldr	r1, [r7, #20]
 80033c4:	69ba      	ldr	r2, [r7, #24]
 80033c6:	e841 2300 	strex	r3, r2, [r1]
 80033ca:	613b      	str	r3, [r7, #16]
   return(result);
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d1e6      	bne.n	80033a0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2220      	movs	r2, #32
 80033d6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2200      	movs	r2, #0
 80033e4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80033e6:	bf00      	nop
 80033e8:	3754      	adds	r7, #84	@ 0x54
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr

080033f2 <memset>:
 80033f2:	4402      	add	r2, r0
 80033f4:	4603      	mov	r3, r0
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d100      	bne.n	80033fc <memset+0xa>
 80033fa:	4770      	bx	lr
 80033fc:	f803 1b01 	strb.w	r1, [r3], #1
 8003400:	e7f9      	b.n	80033f6 <memset+0x4>
	...

08003404 <__libc_init_array>:
 8003404:	b570      	push	{r4, r5, r6, lr}
 8003406:	4d0d      	ldr	r5, [pc, #52]	@ (800343c <__libc_init_array+0x38>)
 8003408:	4c0d      	ldr	r4, [pc, #52]	@ (8003440 <__libc_init_array+0x3c>)
 800340a:	1b64      	subs	r4, r4, r5
 800340c:	10a4      	asrs	r4, r4, #2
 800340e:	2600      	movs	r6, #0
 8003410:	42a6      	cmp	r6, r4
 8003412:	d109      	bne.n	8003428 <__libc_init_array+0x24>
 8003414:	4d0b      	ldr	r5, [pc, #44]	@ (8003444 <__libc_init_array+0x40>)
 8003416:	4c0c      	ldr	r4, [pc, #48]	@ (8003448 <__libc_init_array+0x44>)
 8003418:	f000 f818 	bl	800344c <_init>
 800341c:	1b64      	subs	r4, r4, r5
 800341e:	10a4      	asrs	r4, r4, #2
 8003420:	2600      	movs	r6, #0
 8003422:	42a6      	cmp	r6, r4
 8003424:	d105      	bne.n	8003432 <__libc_init_array+0x2e>
 8003426:	bd70      	pop	{r4, r5, r6, pc}
 8003428:	f855 3b04 	ldr.w	r3, [r5], #4
 800342c:	4798      	blx	r3
 800342e:	3601      	adds	r6, #1
 8003430:	e7ee      	b.n	8003410 <__libc_init_array+0xc>
 8003432:	f855 3b04 	ldr.w	r3, [r5], #4
 8003436:	4798      	blx	r3
 8003438:	3601      	adds	r6, #1
 800343a:	e7f2      	b.n	8003422 <__libc_init_array+0x1e>
 800343c:	08003484 	.word	0x08003484
 8003440:	08003484 	.word	0x08003484
 8003444:	08003484 	.word	0x08003484
 8003448:	08003488 	.word	0x08003488

0800344c <_init>:
 800344c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800344e:	bf00      	nop
 8003450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003452:	bc08      	pop	{r3}
 8003454:	469e      	mov	lr, r3
 8003456:	4770      	bx	lr

08003458 <_fini>:
 8003458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800345a:	bf00      	nop
 800345c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800345e:	bc08      	pop	{r3}
 8003460:	469e      	mov	lr, r3
 8003462:	4770      	bx	lr
