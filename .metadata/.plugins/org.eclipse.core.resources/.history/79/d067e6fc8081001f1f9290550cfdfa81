#include "sys_can_transmit.h"

const int num_tx_params = 2;
tx_param_t last_tx_params[2];
const uint32_t std_id = 0x103;
const uint32_t std_DLC = 8;
const uint32_t std_IDE = CAN_ID_STD;
const uint32_t std_RTR = CAN_RTR_DATA;

void can_tx_init() {

	// code here to be auto generated but for now it will not be
	for (int i = 0; i < num_tx_params; i++) {
		tx_param_t* last_param = &last_tx_params[i];
		tx_param_t* current_param = &current_tx_param2[i];

		last_param->tx_header.IDE = std_IDE;
		last_param->tx_header.DLC = std_DLC;
		last_param->tx_header.RTR = std_RTR;
		last_param->tx_header.StdId = std_id;
		last_param->tx_header.TransmitGlobalTime = ENABLE;
		last_param->tx_data.ID = i + 1;
		last_param->tx_data.bval = false;

		current_param->tx_header.IDE = std_IDE;
		current_param->tx_header.DLC = std_DLC;
		current_param->tx_header.RTR = std_RTR;
		current_param->tx_header.StdId = std_id;
		current_param->tx_header.TransmitGlobalTime = ENABLE;
		current_param->tx_data.ID = i + 1;
		current_param->tx_data.bval = false;
	}

}

void can_incremental_update(tx_param_t* tx_params) {
	for (int i = 0; i < num_tx_params; i++) {

	}
}
