
CAN_Test2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004334  080001f8  080001f8  000011f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800452c  0800452c  0000552c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004544  08004544  00006014  2**0
                  CONTENTS
  4 .ARM          00000008  08004544  08004544  00005544  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800454c  0800454c  00006014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800454c  0800454c  0000554c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004550  08004550  00005550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08004554  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000608  20000014  08004568  00006014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000061c  08004568  0000661c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00006014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010143  00000000  00000000  00006042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002557  00000000  00000000  00016185  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c40  00000000  00000000  000186e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000095a  00000000  00000000  00019320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000273fb  00000000  00000000  00019c7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f9d3  00000000  00000000  00041075  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2aac  00000000  00000000  00050a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001434f4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032c8  00000000  00000000  00143538  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  00146800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000014 	.word	0x20000014
 8000214:	00000000 	.word	0x00000000
 8000218:	08004514 	.word	0x08004514

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000018 	.word	0x20000018
 8000234:	08004514 	.word	0x08004514

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96a 	b.w	8000524 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	460c      	mov	r4, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d14e      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000274:	4694      	mov	ip, r2
 8000276:	458c      	cmp	ip, r1
 8000278:	4686      	mov	lr, r0
 800027a:	fab2 f282 	clz	r2, r2
 800027e:	d962      	bls.n	8000346 <__udivmoddi4+0xde>
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0320 	rsb	r3, r2, #32
 8000286:	4091      	lsls	r1, r2
 8000288:	fa20 f303 	lsr.w	r3, r0, r3
 800028c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000290:	4319      	orrs	r1, r3
 8000292:	fa00 fe02 	lsl.w	lr, r0, r2
 8000296:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800029a:	fa1f f68c 	uxth.w	r6, ip
 800029e:	fbb1 f4f7 	udiv	r4, r1, r7
 80002a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002a6:	fb07 1114 	mls	r1, r7, r4, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb04 f106 	mul.w	r1, r4, r6
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f104 30ff 	add.w	r0, r4, #4294967295
 80002be:	f080 8112 	bcs.w	80004e6 <__udivmoddi4+0x27e>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 810f 	bls.w	80004e6 <__udivmoddi4+0x27e>
 80002c8:	3c02      	subs	r4, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a59      	subs	r1, r3, r1
 80002ce:	fa1f f38e 	uxth.w	r3, lr
 80002d2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002d6:	fb07 1110 	mls	r1, r7, r0, r1
 80002da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002de:	fb00 f606 	mul.w	r6, r0, r6
 80002e2:	429e      	cmp	r6, r3
 80002e4:	d90a      	bls.n	80002fc <__udivmoddi4+0x94>
 80002e6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ea:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ee:	f080 80fc 	bcs.w	80004ea <__udivmoddi4+0x282>
 80002f2:	429e      	cmp	r6, r3
 80002f4:	f240 80f9 	bls.w	80004ea <__udivmoddi4+0x282>
 80002f8:	4463      	add	r3, ip
 80002fa:	3802      	subs	r0, #2
 80002fc:	1b9b      	subs	r3, r3, r6
 80002fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000302:	2100      	movs	r1, #0
 8000304:	b11d      	cbz	r5, 800030e <__udivmoddi4+0xa6>
 8000306:	40d3      	lsrs	r3, r2
 8000308:	2200      	movs	r2, #0
 800030a:	e9c5 3200 	strd	r3, r2, [r5]
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d905      	bls.n	8000322 <__udivmoddi4+0xba>
 8000316:	b10d      	cbz	r5, 800031c <__udivmoddi4+0xb4>
 8000318:	e9c5 0100 	strd	r0, r1, [r5]
 800031c:	2100      	movs	r1, #0
 800031e:	4608      	mov	r0, r1
 8000320:	e7f5      	b.n	800030e <__udivmoddi4+0xa6>
 8000322:	fab3 f183 	clz	r1, r3
 8000326:	2900      	cmp	r1, #0
 8000328:	d146      	bne.n	80003b8 <__udivmoddi4+0x150>
 800032a:	42a3      	cmp	r3, r4
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xcc>
 800032e:	4290      	cmp	r0, r2
 8000330:	f0c0 80f0 	bcc.w	8000514 <__udivmoddi4+0x2ac>
 8000334:	1a86      	subs	r6, r0, r2
 8000336:	eb64 0303 	sbc.w	r3, r4, r3
 800033a:	2001      	movs	r0, #1
 800033c:	2d00      	cmp	r5, #0
 800033e:	d0e6      	beq.n	800030e <__udivmoddi4+0xa6>
 8000340:	e9c5 6300 	strd	r6, r3, [r5]
 8000344:	e7e3      	b.n	800030e <__udivmoddi4+0xa6>
 8000346:	2a00      	cmp	r2, #0
 8000348:	f040 8090 	bne.w	800046c <__udivmoddi4+0x204>
 800034c:	eba1 040c 	sub.w	r4, r1, ip
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	fa1f f78c 	uxth.w	r7, ip
 8000358:	2101      	movs	r1, #1
 800035a:	fbb4 f6f8 	udiv	r6, r4, r8
 800035e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000362:	fb08 4416 	mls	r4, r8, r6, r4
 8000366:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036a:	fb07 f006 	mul.w	r0, r7, r6
 800036e:	4298      	cmp	r0, r3
 8000370:	d908      	bls.n	8000384 <__udivmoddi4+0x11c>
 8000372:	eb1c 0303 	adds.w	r3, ip, r3
 8000376:	f106 34ff 	add.w	r4, r6, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x11a>
 800037c:	4298      	cmp	r0, r3
 800037e:	f200 80cd 	bhi.w	800051c <__udivmoddi4+0x2b4>
 8000382:	4626      	mov	r6, r4
 8000384:	1a1c      	subs	r4, r3, r0
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb4 f0f8 	udiv	r0, r4, r8
 800038e:	fb08 4410 	mls	r4, r8, r0, r4
 8000392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000396:	fb00 f707 	mul.w	r7, r0, r7
 800039a:	429f      	cmp	r7, r3
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x148>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 34ff 	add.w	r4, r0, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x146>
 80003a8:	429f      	cmp	r7, r3
 80003aa:	f200 80b0 	bhi.w	800050e <__udivmoddi4+0x2a6>
 80003ae:	4620      	mov	r0, r4
 80003b0:	1bdb      	subs	r3, r3, r7
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	e7a5      	b.n	8000304 <__udivmoddi4+0x9c>
 80003b8:	f1c1 0620 	rsb	r6, r1, #32
 80003bc:	408b      	lsls	r3, r1
 80003be:	fa22 f706 	lsr.w	r7, r2, r6
 80003c2:	431f      	orrs	r7, r3
 80003c4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003c8:	fa04 f301 	lsl.w	r3, r4, r1
 80003cc:	ea43 030c 	orr.w	r3, r3, ip
 80003d0:	40f4      	lsrs	r4, r6
 80003d2:	fa00 f801 	lsl.w	r8, r0, r1
 80003d6:	0c38      	lsrs	r0, r7, #16
 80003d8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003dc:	fbb4 fef0 	udiv	lr, r4, r0
 80003e0:	fa1f fc87 	uxth.w	ip, r7
 80003e4:	fb00 441e 	mls	r4, r0, lr, r4
 80003e8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ec:	fb0e f90c 	mul.w	r9, lr, ip
 80003f0:	45a1      	cmp	r9, r4
 80003f2:	fa02 f201 	lsl.w	r2, r2, r1
 80003f6:	d90a      	bls.n	800040e <__udivmoddi4+0x1a6>
 80003f8:	193c      	adds	r4, r7, r4
 80003fa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003fe:	f080 8084 	bcs.w	800050a <__udivmoddi4+0x2a2>
 8000402:	45a1      	cmp	r9, r4
 8000404:	f240 8081 	bls.w	800050a <__udivmoddi4+0x2a2>
 8000408:	f1ae 0e02 	sub.w	lr, lr, #2
 800040c:	443c      	add	r4, r7
 800040e:	eba4 0409 	sub.w	r4, r4, r9
 8000412:	fa1f f983 	uxth.w	r9, r3
 8000416:	fbb4 f3f0 	udiv	r3, r4, r0
 800041a:	fb00 4413 	mls	r4, r0, r3, r4
 800041e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000422:	fb03 fc0c 	mul.w	ip, r3, ip
 8000426:	45a4      	cmp	ip, r4
 8000428:	d907      	bls.n	800043a <__udivmoddi4+0x1d2>
 800042a:	193c      	adds	r4, r7, r4
 800042c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000430:	d267      	bcs.n	8000502 <__udivmoddi4+0x29a>
 8000432:	45a4      	cmp	ip, r4
 8000434:	d965      	bls.n	8000502 <__udivmoddi4+0x29a>
 8000436:	3b02      	subs	r3, #2
 8000438:	443c      	add	r4, r7
 800043a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800043e:	fba0 9302 	umull	r9, r3, r0, r2
 8000442:	eba4 040c 	sub.w	r4, r4, ip
 8000446:	429c      	cmp	r4, r3
 8000448:	46ce      	mov	lr, r9
 800044a:	469c      	mov	ip, r3
 800044c:	d351      	bcc.n	80004f2 <__udivmoddi4+0x28a>
 800044e:	d04e      	beq.n	80004ee <__udivmoddi4+0x286>
 8000450:	b155      	cbz	r5, 8000468 <__udivmoddi4+0x200>
 8000452:	ebb8 030e 	subs.w	r3, r8, lr
 8000456:	eb64 040c 	sbc.w	r4, r4, ip
 800045a:	fa04 f606 	lsl.w	r6, r4, r6
 800045e:	40cb      	lsrs	r3, r1
 8000460:	431e      	orrs	r6, r3
 8000462:	40cc      	lsrs	r4, r1
 8000464:	e9c5 6400 	strd	r6, r4, [r5]
 8000468:	2100      	movs	r1, #0
 800046a:	e750      	b.n	800030e <__udivmoddi4+0xa6>
 800046c:	f1c2 0320 	rsb	r3, r2, #32
 8000470:	fa20 f103 	lsr.w	r1, r0, r3
 8000474:	fa0c fc02 	lsl.w	ip, ip, r2
 8000478:	fa24 f303 	lsr.w	r3, r4, r3
 800047c:	4094      	lsls	r4, r2
 800047e:	430c      	orrs	r4, r1
 8000480:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000484:	fa00 fe02 	lsl.w	lr, r0, r2
 8000488:	fa1f f78c 	uxth.w	r7, ip
 800048c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000490:	fb08 3110 	mls	r1, r8, r0, r3
 8000494:	0c23      	lsrs	r3, r4, #16
 8000496:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049a:	fb00 f107 	mul.w	r1, r0, r7
 800049e:	4299      	cmp	r1, r3
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x24c>
 80004a2:	eb1c 0303 	adds.w	r3, ip, r3
 80004a6:	f100 36ff 	add.w	r6, r0, #4294967295
 80004aa:	d22c      	bcs.n	8000506 <__udivmoddi4+0x29e>
 80004ac:	4299      	cmp	r1, r3
 80004ae:	d92a      	bls.n	8000506 <__udivmoddi4+0x29e>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4463      	add	r3, ip
 80004b4:	1a5b      	subs	r3, r3, r1
 80004b6:	b2a4      	uxth	r4, r4
 80004b8:	fbb3 f1f8 	udiv	r1, r3, r8
 80004bc:	fb08 3311 	mls	r3, r8, r1, r3
 80004c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004c4:	fb01 f307 	mul.w	r3, r1, r7
 80004c8:	42a3      	cmp	r3, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x276>
 80004cc:	eb1c 0404 	adds.w	r4, ip, r4
 80004d0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004d4:	d213      	bcs.n	80004fe <__udivmoddi4+0x296>
 80004d6:	42a3      	cmp	r3, r4
 80004d8:	d911      	bls.n	80004fe <__udivmoddi4+0x296>
 80004da:	3902      	subs	r1, #2
 80004dc:	4464      	add	r4, ip
 80004de:	1ae4      	subs	r4, r4, r3
 80004e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004e4:	e739      	b.n	800035a <__udivmoddi4+0xf2>
 80004e6:	4604      	mov	r4, r0
 80004e8:	e6f0      	b.n	80002cc <__udivmoddi4+0x64>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e706      	b.n	80002fc <__udivmoddi4+0x94>
 80004ee:	45c8      	cmp	r8, r9
 80004f0:	d2ae      	bcs.n	8000450 <__udivmoddi4+0x1e8>
 80004f2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004f6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004fa:	3801      	subs	r0, #1
 80004fc:	e7a8      	b.n	8000450 <__udivmoddi4+0x1e8>
 80004fe:	4631      	mov	r1, r6
 8000500:	e7ed      	b.n	80004de <__udivmoddi4+0x276>
 8000502:	4603      	mov	r3, r0
 8000504:	e799      	b.n	800043a <__udivmoddi4+0x1d2>
 8000506:	4630      	mov	r0, r6
 8000508:	e7d4      	b.n	80004b4 <__udivmoddi4+0x24c>
 800050a:	46d6      	mov	lr, sl
 800050c:	e77f      	b.n	800040e <__udivmoddi4+0x1a6>
 800050e:	4463      	add	r3, ip
 8000510:	3802      	subs	r0, #2
 8000512:	e74d      	b.n	80003b0 <__udivmoddi4+0x148>
 8000514:	4606      	mov	r6, r0
 8000516:	4623      	mov	r3, r4
 8000518:	4608      	mov	r0, r1
 800051a:	e70f      	b.n	800033c <__udivmoddi4+0xd4>
 800051c:	3e02      	subs	r6, #2
 800051e:	4463      	add	r3, ip
 8000520:	e730      	b.n	8000384 <__udivmoddi4+0x11c>
 8000522:	bf00      	nop

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
	can_recieve_message(hcan);
 8000530:	6878      	ldr	r0, [r7, #4]
 8000532:	f000 fbdd 	bl	8000cf0 <can_recieve_message>
}
 8000536:	bf00      	nop
 8000538:	3708      	adds	r7, #8
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
	...

08000540 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000544:	f000 fcb9 	bl	8000eba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000548:	f000 f814 	bl	8000574 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800054c:	f000 f92e 	bl	80007ac <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000550:	f000 f8ce 	bl	80006f0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000554:	f000 f8fc 	bl	8000750 <MX_USB_OTG_FS_PCD_Init>
  MX_CAN1_Init();
 8000558:	f000 f876 	bl	8000648 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */

  HAL_CAN_Start(&hcan1);
 800055c:	4804      	ldr	r0, [pc, #16]	@ (8000570 <main+0x30>)
 800055e:	f000 ff15 	bl	800138c <HAL_CAN_Start>


  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000562:	2102      	movs	r1, #2
 8000564:	4802      	ldr	r0, [pc, #8]	@ (8000570 <main+0x30>)
 8000566:	f001 f877 	bl	8001658 <HAL_CAN_ActivateNotification>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	can_recieve_stale();
 800056a:	f000 fbff 	bl	8000d6c <can_recieve_stale>
 800056e:	e7fc      	b.n	800056a <main+0x2a>
 8000570:	20000030 	.word	0x20000030

08000574 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b094      	sub	sp, #80	@ 0x50
 8000578:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057a:	f107 031c 	add.w	r3, r7, #28
 800057e:	2234      	movs	r2, #52	@ 0x34
 8000580:	2100      	movs	r1, #0
 8000582:	4618      	mov	r0, r3
 8000584:	f003 ff99 	bl	80044ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000588:	f107 0308 	add.w	r3, r7, #8
 800058c:	2200      	movs	r2, #0
 800058e:	601a      	str	r2, [r3, #0]
 8000590:	605a      	str	r2, [r3, #4]
 8000592:	609a      	str	r2, [r3, #8]
 8000594:	60da      	str	r2, [r3, #12]
 8000596:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000598:	f001 fec6 	bl	8002328 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800059c:	4b28      	ldr	r3, [pc, #160]	@ (8000640 <SystemClock_Config+0xcc>)
 800059e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005a0:	4a27      	ldr	r2, [pc, #156]	@ (8000640 <SystemClock_Config+0xcc>)
 80005a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80005a8:	4b25      	ldr	r3, [pc, #148]	@ (8000640 <SystemClock_Config+0xcc>)
 80005aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005b0:	607b      	str	r3, [r7, #4]
 80005b2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005b4:	4b23      	ldr	r3, [pc, #140]	@ (8000644 <SystemClock_Config+0xd0>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80005bc:	4a21      	ldr	r2, [pc, #132]	@ (8000644 <SystemClock_Config+0xd0>)
 80005be:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005c2:	6013      	str	r3, [r2, #0]
 80005c4:	4b1f      	ldr	r3, [pc, #124]	@ (8000644 <SystemClock_Config+0xd0>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005cc:	603b      	str	r3, [r7, #0]
 80005ce:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005d0:	2301      	movs	r3, #1
 80005d2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005d4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005d8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005da:	2302      	movs	r3, #2
 80005dc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005de:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005e2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005e4:	2304      	movs	r3, #4
 80005e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80005e8:	2360      	movs	r3, #96	@ 0x60
 80005ea:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005ec:	2302      	movs	r3, #2
 80005ee:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005f0:	2304      	movs	r3, #4
 80005f2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005f4:	2302      	movs	r3, #2
 80005f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f8:	f107 031c 	add.w	r3, r7, #28
 80005fc:	4618      	mov	r0, r3
 80005fe:	f001 fea3 	bl	8002348 <HAL_RCC_OscConfig>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000608:	f000 f9d8 	bl	80009bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800060c:	230f      	movs	r3, #15
 800060e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000610:	2302      	movs	r3, #2
 8000612:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 8000614:	2390      	movs	r3, #144	@ 0x90
 8000616:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000618:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800061c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800061e:	2300      	movs	r3, #0
 8000620:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000622:	f107 0308 	add.w	r3, r7, #8
 8000626:	2100      	movs	r1, #0
 8000628:	4618      	mov	r0, r3
 800062a:	f002 f93b 	bl	80028a4 <HAL_RCC_ClockConfig>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000634:	f000 f9c2 	bl	80009bc <Error_Handler>
  }
}
 8000638:	bf00      	nop
 800063a:	3750      	adds	r7, #80	@ 0x50
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	40023800 	.word	0x40023800
 8000644:	40007000 	.word	0x40007000

08000648 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b08a      	sub	sp, #40	@ 0x28
 800064c:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800064e:	4b26      	ldr	r3, [pc, #152]	@ (80006e8 <MX_CAN1_Init+0xa0>)
 8000650:	4a26      	ldr	r2, [pc, #152]	@ (80006ec <MX_CAN1_Init+0xa4>)
 8000652:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 8000654:	4b24      	ldr	r3, [pc, #144]	@ (80006e8 <MX_CAN1_Init+0xa0>)
 8000656:	2204      	movs	r2, #4
 8000658:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800065a:	4b23      	ldr	r3, [pc, #140]	@ (80006e8 <MX_CAN1_Init+0xa0>)
 800065c:	2200      	movs	r2, #0
 800065e:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_2TQ;
 8000660:	4b21      	ldr	r3, [pc, #132]	@ (80006e8 <MX_CAN1_Init+0xa0>)
 8000662:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000666:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000668:	4b1f      	ldr	r3, [pc, #124]	@ (80006e8 <MX_CAN1_Init+0xa0>)
 800066a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800066e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000670:	4b1d      	ldr	r3, [pc, #116]	@ (80006e8 <MX_CAN1_Init+0xa0>)
 8000672:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000676:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000678:	4b1b      	ldr	r3, [pc, #108]	@ (80006e8 <MX_CAN1_Init+0xa0>)
 800067a:	2200      	movs	r2, #0
 800067c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800067e:	4b1a      	ldr	r3, [pc, #104]	@ (80006e8 <MX_CAN1_Init+0xa0>)
 8000680:	2200      	movs	r2, #0
 8000682:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000684:	4b18      	ldr	r3, [pc, #96]	@ (80006e8 <MX_CAN1_Init+0xa0>)
 8000686:	2200      	movs	r2, #0
 8000688:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800068a:	4b17      	ldr	r3, [pc, #92]	@ (80006e8 <MX_CAN1_Init+0xa0>)
 800068c:	2200      	movs	r2, #0
 800068e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000690:	4b15      	ldr	r3, [pc, #84]	@ (80006e8 <MX_CAN1_Init+0xa0>)
 8000692:	2200      	movs	r2, #0
 8000694:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000696:	4b14      	ldr	r3, [pc, #80]	@ (80006e8 <MX_CAN1_Init+0xa0>)
 8000698:	2200      	movs	r2, #0
 800069a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800069c:	4812      	ldr	r0, [pc, #72]	@ (80006e8 <MX_CAN1_Init+0xa0>)
 800069e:	f000 fc8d 	bl	8000fbc <HAL_CAN_Init>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <MX_CAN1_Init+0x64>
  {
    Error_Handler();
 80006a8:	f000 f988 	bl	80009bc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef canfilterconfig;

      canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80006ac:	2301      	movs	r3, #1
 80006ae:	623b      	str	r3, [r7, #32]
      canfilterconfig.FilterBank = 18;  // which filter bank to use from the assigned ones
 80006b0:	2312      	movs	r3, #18
 80006b2:	617b      	str	r3, [r7, #20]
      canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80006b4:	2300      	movs	r3, #0
 80006b6:	613b      	str	r3, [r7, #16]
      canfilterconfig.FilterIdHigh = 0x001<<5;
 80006b8:	2320      	movs	r3, #32
 80006ba:	603b      	str	r3, [r7, #0]
      canfilterconfig.FilterIdLow = 0;
 80006bc:	2300      	movs	r3, #0
 80006be:	607b      	str	r3, [r7, #4]
      canfilterconfig.FilterMaskIdHigh = 0x001<<5;
 80006c0:	2320      	movs	r3, #32
 80006c2:	60bb      	str	r3, [r7, #8]
      canfilterconfig.FilterMaskIdLow = 0x0000;
 80006c4:	2300      	movs	r3, #0
 80006c6:	60fb      	str	r3, [r7, #12]
      canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80006c8:	2300      	movs	r3, #0
 80006ca:	61bb      	str	r3, [r7, #24]
      canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80006cc:	2301      	movs	r3, #1
 80006ce:	61fb      	str	r3, [r7, #28]
      canfilterconfig.SlaveStartFilterBank = 20;  // how many filters to assign to the CAN1 (master can)
 80006d0:	2314      	movs	r3, #20
 80006d2:	627b      	str	r3, [r7, #36]	@ 0x24

      HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 80006d4:	463b      	mov	r3, r7
 80006d6:	4619      	mov	r1, r3
 80006d8:	4803      	ldr	r0, [pc, #12]	@ (80006e8 <MX_CAN1_Init+0xa0>)
 80006da:	f000 fd6b 	bl	80011b4 <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN1_Init 2 */

}
 80006de:	bf00      	nop
 80006e0:	3728      	adds	r7, #40	@ 0x28
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	20000030 	.word	0x20000030
 80006ec:	40006400 	.word	0x40006400

080006f0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80006f4:	4b14      	ldr	r3, [pc, #80]	@ (8000748 <MX_USART3_UART_Init+0x58>)
 80006f6:	4a15      	ldr	r2, [pc, #84]	@ (800074c <MX_USART3_UART_Init+0x5c>)
 80006f8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80006fa:	4b13      	ldr	r3, [pc, #76]	@ (8000748 <MX_USART3_UART_Init+0x58>)
 80006fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000700:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000702:	4b11      	ldr	r3, [pc, #68]	@ (8000748 <MX_USART3_UART_Init+0x58>)
 8000704:	2200      	movs	r2, #0
 8000706:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000708:	4b0f      	ldr	r3, [pc, #60]	@ (8000748 <MX_USART3_UART_Init+0x58>)
 800070a:	2200      	movs	r2, #0
 800070c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800070e:	4b0e      	ldr	r3, [pc, #56]	@ (8000748 <MX_USART3_UART_Init+0x58>)
 8000710:	2200      	movs	r2, #0
 8000712:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000714:	4b0c      	ldr	r3, [pc, #48]	@ (8000748 <MX_USART3_UART_Init+0x58>)
 8000716:	220c      	movs	r2, #12
 8000718:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800071a:	4b0b      	ldr	r3, [pc, #44]	@ (8000748 <MX_USART3_UART_Init+0x58>)
 800071c:	2200      	movs	r2, #0
 800071e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000720:	4b09      	ldr	r3, [pc, #36]	@ (8000748 <MX_USART3_UART_Init+0x58>)
 8000722:	2200      	movs	r2, #0
 8000724:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000726:	4b08      	ldr	r3, [pc, #32]	@ (8000748 <MX_USART3_UART_Init+0x58>)
 8000728:	2200      	movs	r2, #0
 800072a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800072c:	4b06      	ldr	r3, [pc, #24]	@ (8000748 <MX_USART3_UART_Init+0x58>)
 800072e:	2200      	movs	r2, #0
 8000730:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000732:	4805      	ldr	r0, [pc, #20]	@ (8000748 <MX_USART3_UART_Init+0x58>)
 8000734:	f002 ff04 	bl	8003540 <HAL_UART_Init>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800073e:	f000 f93d 	bl	80009bc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000742:	bf00      	nop
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	20000058 	.word	0x20000058
 800074c:	40004800 	.word	0x40004800

08000750 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000754:	4b14      	ldr	r3, [pc, #80]	@ (80007a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000756:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800075a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800075c:	4b12      	ldr	r3, [pc, #72]	@ (80007a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800075e:	2206      	movs	r2, #6
 8000760:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000762:	4b11      	ldr	r3, [pc, #68]	@ (80007a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000764:	2202      	movs	r2, #2
 8000766:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000768:	4b0f      	ldr	r3, [pc, #60]	@ (80007a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800076a:	2200      	movs	r2, #0
 800076c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800076e:	4b0e      	ldr	r3, [pc, #56]	@ (80007a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000770:	2202      	movs	r2, #2
 8000772:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000774:	4b0c      	ldr	r3, [pc, #48]	@ (80007a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000776:	2201      	movs	r2, #1
 8000778:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800077a:	4b0b      	ldr	r3, [pc, #44]	@ (80007a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800077c:	2200      	movs	r2, #0
 800077e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000780:	4b09      	ldr	r3, [pc, #36]	@ (80007a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000782:	2200      	movs	r2, #0
 8000784:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000786:	4b08      	ldr	r3, [pc, #32]	@ (80007a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000788:	2201      	movs	r2, #1
 800078a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800078c:	4b06      	ldr	r3, [pc, #24]	@ (80007a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800078e:	2200      	movs	r2, #0
 8000790:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000792:	4805      	ldr	r0, [pc, #20]	@ (80007a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000794:	f001 fc8d 	bl	80020b2 <HAL_PCD_Init>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800079e:	f000 f90d 	bl	80009bc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80007a2:	bf00      	nop
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	200000e0 	.word	0x200000e0

080007ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b08c      	sub	sp, #48	@ 0x30
 80007b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b2:	f107 031c 	add.w	r3, r7, #28
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
 80007bc:	609a      	str	r2, [r3, #8]
 80007be:	60da      	str	r2, [r3, #12]
 80007c0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c2:	4b78      	ldr	r3, [pc, #480]	@ (80009a4 <MX_GPIO_Init+0x1f8>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c6:	4a77      	ldr	r2, [pc, #476]	@ (80009a4 <MX_GPIO_Init+0x1f8>)
 80007c8:	f043 0304 	orr.w	r3, r3, #4
 80007cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ce:	4b75      	ldr	r3, [pc, #468]	@ (80009a4 <MX_GPIO_Init+0x1f8>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d2:	f003 0304 	and.w	r3, r3, #4
 80007d6:	61bb      	str	r3, [r7, #24]
 80007d8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007da:	4b72      	ldr	r3, [pc, #456]	@ (80009a4 <MX_GPIO_Init+0x1f8>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007de:	4a71      	ldr	r2, [pc, #452]	@ (80009a4 <MX_GPIO_Init+0x1f8>)
 80007e0:	f043 0320 	orr.w	r3, r3, #32
 80007e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007e6:	4b6f      	ldr	r3, [pc, #444]	@ (80009a4 <MX_GPIO_Init+0x1f8>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ea:	f003 0320 	and.w	r3, r3, #32
 80007ee:	617b      	str	r3, [r7, #20]
 80007f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007f2:	4b6c      	ldr	r3, [pc, #432]	@ (80009a4 <MX_GPIO_Init+0x1f8>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f6:	4a6b      	ldr	r2, [pc, #428]	@ (80009a4 <MX_GPIO_Init+0x1f8>)
 80007f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007fe:	4b69      	ldr	r3, [pc, #420]	@ (80009a4 <MX_GPIO_Init+0x1f8>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000802:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000806:	613b      	str	r3, [r7, #16]
 8000808:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800080a:	4b66      	ldr	r3, [pc, #408]	@ (80009a4 <MX_GPIO_Init+0x1f8>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080e:	4a65      	ldr	r2, [pc, #404]	@ (80009a4 <MX_GPIO_Init+0x1f8>)
 8000810:	f043 0301 	orr.w	r3, r3, #1
 8000814:	6313      	str	r3, [r2, #48]	@ 0x30
 8000816:	4b63      	ldr	r3, [pc, #396]	@ (80009a4 <MX_GPIO_Init+0x1f8>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081a:	f003 0301 	and.w	r3, r3, #1
 800081e:	60fb      	str	r3, [r7, #12]
 8000820:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000822:	4b60      	ldr	r3, [pc, #384]	@ (80009a4 <MX_GPIO_Init+0x1f8>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000826:	4a5f      	ldr	r2, [pc, #380]	@ (80009a4 <MX_GPIO_Init+0x1f8>)
 8000828:	f043 0302 	orr.w	r3, r3, #2
 800082c:	6313      	str	r3, [r2, #48]	@ 0x30
 800082e:	4b5d      	ldr	r3, [pc, #372]	@ (80009a4 <MX_GPIO_Init+0x1f8>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000832:	f003 0302 	and.w	r3, r3, #2
 8000836:	60bb      	str	r3, [r7, #8]
 8000838:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800083a:	4b5a      	ldr	r3, [pc, #360]	@ (80009a4 <MX_GPIO_Init+0x1f8>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083e:	4a59      	ldr	r2, [pc, #356]	@ (80009a4 <MX_GPIO_Init+0x1f8>)
 8000840:	f043 0308 	orr.w	r3, r3, #8
 8000844:	6313      	str	r3, [r2, #48]	@ 0x30
 8000846:	4b57      	ldr	r3, [pc, #348]	@ (80009a4 <MX_GPIO_Init+0x1f8>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084a:	f003 0308 	and.w	r3, r3, #8
 800084e:	607b      	str	r3, [r7, #4]
 8000850:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000852:	4b54      	ldr	r3, [pc, #336]	@ (80009a4 <MX_GPIO_Init+0x1f8>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000856:	4a53      	ldr	r2, [pc, #332]	@ (80009a4 <MX_GPIO_Init+0x1f8>)
 8000858:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800085c:	6313      	str	r3, [r2, #48]	@ 0x30
 800085e:	4b51      	ldr	r3, [pc, #324]	@ (80009a4 <MX_GPIO_Init+0x1f8>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000862:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000866:	603b      	str	r3, [r7, #0]
 8000868:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LD1_Pin|LD2_Pin, GPIO_PIN_RESET);
 800086a:	2200      	movs	r2, #0
 800086c:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8000870:	484d      	ldr	r0, [pc, #308]	@ (80009a8 <MX_GPIO_Init+0x1fc>)
 8000872:	f001 fc05 	bl	8002080 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ULD1_Pin|LD3_Pin|ULD2_Pin, GPIO_PIN_RESET);
 8000876:	2200      	movs	r2, #0
 8000878:	f244 0181 	movw	r1, #16513	@ 0x4081
 800087c:	484b      	ldr	r0, [pc, #300]	@ (80009ac <MX_GPIO_Init+0x200>)
 800087e:	f001 fbff 	bl	8002080 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000882:	2200      	movs	r2, #0
 8000884:	2140      	movs	r1, #64	@ 0x40
 8000886:	484a      	ldr	r0, [pc, #296]	@ (80009b0 <MX_GPIO_Init+0x204>)
 8000888:	f001 fbfa 	bl	8002080 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800088c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000890:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000892:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000896:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000898:	2300      	movs	r3, #0
 800089a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800089c:	f107 031c 	add.w	r3, r7, #28
 80008a0:	4619      	mov	r1, r3
 80008a2:	4844      	ldr	r0, [pc, #272]	@ (80009b4 <MX_GPIO_Init+0x208>)
 80008a4:	f001 fa40 	bl	8001d28 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD2_Pin;
 80008a8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80008ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ae:	2301      	movs	r3, #1
 80008b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b6:	2300      	movs	r3, #0
 80008b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80008ba:	f107 031c 	add.w	r3, r7, #28
 80008be:	4619      	mov	r1, r3
 80008c0:	4839      	ldr	r0, [pc, #228]	@ (80009a8 <MX_GPIO_Init+0x1fc>)
 80008c2:	f001 fa31 	bl	8001d28 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80008c6:	2332      	movs	r3, #50	@ 0x32
 80008c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ca:	2302      	movs	r3, #2
 80008cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008d2:	2303      	movs	r3, #3
 80008d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008d6:	230b      	movs	r3, #11
 80008d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008da:	f107 031c 	add.w	r3, r7, #28
 80008de:	4619      	mov	r1, r3
 80008e0:	4834      	ldr	r0, [pc, #208]	@ (80009b4 <MX_GPIO_Init+0x208>)
 80008e2:	f001 fa21 	bl	8001d28 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80008e6:	2386      	movs	r3, #134	@ 0x86
 80008e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ea:	2302      	movs	r3, #2
 80008ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008f2:	2303      	movs	r3, #3
 80008f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008f6:	230b      	movs	r3, #11
 80008f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fa:	f107 031c 	add.w	r3, r7, #28
 80008fe:	4619      	mov	r1, r3
 8000900:	482d      	ldr	r0, [pc, #180]	@ (80009b8 <MX_GPIO_Init+0x20c>)
 8000902:	f001 fa11 	bl	8001d28 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULD1_Pin LD3_Pin ULD2_Pin */
  GPIO_InitStruct.Pin = ULD1_Pin|LD3_Pin|ULD2_Pin;
 8000906:	f244 0381 	movw	r3, #16513	@ 0x4081
 800090a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090c:	2301      	movs	r3, #1
 800090e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000914:	2300      	movs	r3, #0
 8000916:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000918:	f107 031c 	add.w	r3, r7, #28
 800091c:	4619      	mov	r1, r3
 800091e:	4823      	ldr	r0, [pc, #140]	@ (80009ac <MX_GPIO_Init+0x200>)
 8000920:	f001 fa02 	bl	8001d28 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000924:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000928:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092a:	2302      	movs	r3, #2
 800092c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092e:	2300      	movs	r3, #0
 8000930:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000932:	2303      	movs	r3, #3
 8000934:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000936:	230b      	movs	r3, #11
 8000938:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800093a:	f107 031c 	add.w	r3, r7, #28
 800093e:	4619      	mov	r1, r3
 8000940:	481a      	ldr	r0, [pc, #104]	@ (80009ac <MX_GPIO_Init+0x200>)
 8000942:	f001 f9f1 	bl	8001d28 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000946:	2340      	movs	r3, #64	@ 0x40
 8000948:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800094a:	2301      	movs	r3, #1
 800094c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000952:	2300      	movs	r3, #0
 8000954:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000956:	f107 031c 	add.w	r3, r7, #28
 800095a:	4619      	mov	r1, r3
 800095c:	4814      	ldr	r0, [pc, #80]	@ (80009b0 <MX_GPIO_Init+0x204>)
 800095e:	f001 f9e3 	bl	8001d28 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000962:	2380      	movs	r3, #128	@ 0x80
 8000964:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000966:	2300      	movs	r3, #0
 8000968:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	2300      	movs	r3, #0
 800096c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800096e:	f107 031c 	add.w	r3, r7, #28
 8000972:	4619      	mov	r1, r3
 8000974:	480e      	ldr	r0, [pc, #56]	@ (80009b0 <MX_GPIO_Init+0x204>)
 8000976:	f001 f9d7 	bl	8001d28 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800097a:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800097e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000980:	2302      	movs	r3, #2
 8000982:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000984:	2300      	movs	r3, #0
 8000986:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000988:	2303      	movs	r3, #3
 800098a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800098c:	230b      	movs	r3, #11
 800098e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000990:	f107 031c 	add.w	r3, r7, #28
 8000994:	4619      	mov	r1, r3
 8000996:	4806      	ldr	r0, [pc, #24]	@ (80009b0 <MX_GPIO_Init+0x204>)
 8000998:	f001 f9c6 	bl	8001d28 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800099c:	bf00      	nop
 800099e:	3730      	adds	r7, #48	@ 0x30
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	40023800 	.word	0x40023800
 80009a8:	40021400 	.word	0x40021400
 80009ac:	40020400 	.word	0x40020400
 80009b0:	40021800 	.word	0x40021800
 80009b4:	40020800 	.word	0x40020800
 80009b8:	40020000 	.word	0x40020000

080009bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009c0:	b672      	cpsid	i
}
 80009c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009c4:	bf00      	nop
 80009c6:	e7fd      	b.n	80009c4 <Error_Handler+0x8>

080009c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80009ce:	4b0f      	ldr	r3, [pc, #60]	@ (8000a0c <HAL_MspInit+0x44>)
 80009d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009d2:	4a0e      	ldr	r2, [pc, #56]	@ (8000a0c <HAL_MspInit+0x44>)
 80009d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80009da:	4b0c      	ldr	r3, [pc, #48]	@ (8000a0c <HAL_MspInit+0x44>)
 80009dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009e2:	607b      	str	r3, [r7, #4]
 80009e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009e6:	4b09      	ldr	r3, [pc, #36]	@ (8000a0c <HAL_MspInit+0x44>)
 80009e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009ea:	4a08      	ldr	r2, [pc, #32]	@ (8000a0c <HAL_MspInit+0x44>)
 80009ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80009f2:	4b06      	ldr	r3, [pc, #24]	@ (8000a0c <HAL_MspInit+0x44>)
 80009f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009fa:	603b      	str	r3, [r7, #0]
 80009fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009fe:	bf00      	nop
 8000a00:	370c      	adds	r7, #12
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	40023800 	.word	0x40023800

08000a10 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b08a      	sub	sp, #40	@ 0x28
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a18:	f107 0314 	add.w	r3, r7, #20
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	609a      	str	r2, [r3, #8]
 8000a24:	60da      	str	r2, [r3, #12]
 8000a26:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a23      	ldr	r2, [pc, #140]	@ (8000abc <HAL_CAN_MspInit+0xac>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d13f      	bne.n	8000ab2 <HAL_CAN_MspInit+0xa2>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000a32:	4b23      	ldr	r3, [pc, #140]	@ (8000ac0 <HAL_CAN_MspInit+0xb0>)
 8000a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a36:	4a22      	ldr	r2, [pc, #136]	@ (8000ac0 <HAL_CAN_MspInit+0xb0>)
 8000a38:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000a3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a3e:	4b20      	ldr	r3, [pc, #128]	@ (8000ac0 <HAL_CAN_MspInit+0xb0>)
 8000a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000a46:	613b      	str	r3, [r7, #16]
 8000a48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a4a:	4b1d      	ldr	r3, [pc, #116]	@ (8000ac0 <HAL_CAN_MspInit+0xb0>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a4e:	4a1c      	ldr	r2, [pc, #112]	@ (8000ac0 <HAL_CAN_MspInit+0xb0>)
 8000a50:	f043 0308 	orr.w	r3, r3, #8
 8000a54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a56:	4b1a      	ldr	r3, [pc, #104]	@ (8000ac0 <HAL_CAN_MspInit+0xb0>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5a:	f003 0308 	and.w	r3, r3, #8
 8000a5e:	60fb      	str	r3, [r7, #12]
 8000a60:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a62:	2301      	movs	r3, #1
 8000a64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a66:	2302      	movs	r3, #2
 8000a68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a6e:	2303      	movs	r3, #3
 8000a70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000a72:	2309      	movs	r3, #9
 8000a74:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a76:	f107 0314 	add.w	r3, r7, #20
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4811      	ldr	r0, [pc, #68]	@ (8000ac4 <HAL_CAN_MspInit+0xb4>)
 8000a7e:	f001 f953 	bl	8001d28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000a82:	2302      	movs	r3, #2
 8000a84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a86:	2302      	movs	r3, #2
 8000a88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a8e:	2303      	movs	r3, #3
 8000a90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000a92:	2309      	movs	r3, #9
 8000a94:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a96:	f107 0314 	add.w	r3, r7, #20
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4809      	ldr	r0, [pc, #36]	@ (8000ac4 <HAL_CAN_MspInit+0xb4>)
 8000a9e:	f001 f943 	bl	8001d28 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	2014      	movs	r0, #20
 8000aa8:	f001 f907 	bl	8001cba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000aac:	2014      	movs	r0, #20
 8000aae:	f001 f920 	bl	8001cf2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8000ab2:	bf00      	nop
 8000ab4:	3728      	adds	r7, #40	@ 0x28
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	40006400 	.word	0x40006400
 8000ac0:	40023800 	.word	0x40023800
 8000ac4:	40020c00 	.word	0x40020c00

08000ac8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b0ae      	sub	sp, #184	@ 0xb8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
 8000ad8:	605a      	str	r2, [r3, #4]
 8000ada:	609a      	str	r2, [r3, #8]
 8000adc:	60da      	str	r2, [r3, #12]
 8000ade:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ae0:	f107 0314 	add.w	r3, r7, #20
 8000ae4:	2290      	movs	r2, #144	@ 0x90
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f003 fce6 	bl	80044ba <memset>
  if(huart->Instance==USART3)
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	4a22      	ldr	r2, [pc, #136]	@ (8000b7c <HAL_UART_MspInit+0xb4>)
 8000af4:	4293      	cmp	r3, r2
 8000af6:	d13c      	bne.n	8000b72 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000af8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000afc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000afe:	2300      	movs	r3, #0
 8000b00:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b02:	f107 0314 	add.w	r3, r7, #20
 8000b06:	4618      	mov	r0, r3
 8000b08:	f002 f8f2 	bl	8002cf0 <HAL_RCCEx_PeriphCLKConfig>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000b12:	f7ff ff53 	bl	80009bc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b16:	4b1a      	ldr	r3, [pc, #104]	@ (8000b80 <HAL_UART_MspInit+0xb8>)
 8000b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b1a:	4a19      	ldr	r2, [pc, #100]	@ (8000b80 <HAL_UART_MspInit+0xb8>)
 8000b1c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000b20:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b22:	4b17      	ldr	r3, [pc, #92]	@ (8000b80 <HAL_UART_MspInit+0xb8>)
 8000b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b26:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000b2a:	613b      	str	r3, [r7, #16]
 8000b2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b2e:	4b14      	ldr	r3, [pc, #80]	@ (8000b80 <HAL_UART_MspInit+0xb8>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b32:	4a13      	ldr	r2, [pc, #76]	@ (8000b80 <HAL_UART_MspInit+0xb8>)
 8000b34:	f043 0308 	orr.w	r3, r3, #8
 8000b38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b3a:	4b11      	ldr	r3, [pc, #68]	@ (8000b80 <HAL_UART_MspInit+0xb8>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3e:	f003 0308 	and.w	r3, r3, #8
 8000b42:	60fb      	str	r3, [r7, #12]
 8000b44:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000b46:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000b4a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b54:	2300      	movs	r3, #0
 8000b56:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b5a:	2303      	movs	r3, #3
 8000b5c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b60:	2307      	movs	r3, #7
 8000b62:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b66:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	4805      	ldr	r0, [pc, #20]	@ (8000b84 <HAL_UART_MspInit+0xbc>)
 8000b6e:	f001 f8db 	bl	8001d28 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000b72:	bf00      	nop
 8000b74:	37b8      	adds	r7, #184	@ 0xb8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	40004800 	.word	0x40004800
 8000b80:	40023800 	.word	0x40023800
 8000b84:	40020c00 	.word	0x40020c00

08000b88 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b0ae      	sub	sp, #184	@ 0xb8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b90:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	605a      	str	r2, [r3, #4]
 8000b9a:	609a      	str	r2, [r3, #8]
 8000b9c:	60da      	str	r2, [r3, #12]
 8000b9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ba0:	f107 0314 	add.w	r3, r7, #20
 8000ba4:	2290      	movs	r2, #144	@ 0x90
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f003 fc86 	bl	80044ba <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000bb6:	d159      	bne.n	8000c6c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000bb8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8000bbc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bc4:	f107 0314 	add.w	r3, r7, #20
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f002 f891 	bl	8002cf0 <HAL_RCCEx_PeriphCLKConfig>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000bd4:	f7ff fef2 	bl	80009bc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd8:	4b26      	ldr	r3, [pc, #152]	@ (8000c74 <HAL_PCD_MspInit+0xec>)
 8000bda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bdc:	4a25      	ldr	r2, [pc, #148]	@ (8000c74 <HAL_PCD_MspInit+0xec>)
 8000bde:	f043 0301 	orr.w	r3, r3, #1
 8000be2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000be4:	4b23      	ldr	r3, [pc, #140]	@ (8000c74 <HAL_PCD_MspInit+0xec>)
 8000be6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be8:	f003 0301 	and.w	r3, r3, #1
 8000bec:	613b      	str	r3, [r7, #16]
 8000bee:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000bf0:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000bf4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c04:	2303      	movs	r3, #3
 8000c06:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000c0a:	230a      	movs	r3, #10
 8000c0c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c10:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000c14:	4619      	mov	r1, r3
 8000c16:	4818      	ldr	r0, [pc, #96]	@ (8000c78 <HAL_PCD_MspInit+0xf0>)
 8000c18:	f001 f886 	bl	8001d28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000c1c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c20:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c24:	2300      	movs	r3, #0
 8000c26:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000c30:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000c34:	4619      	mov	r1, r3
 8000c36:	4810      	ldr	r0, [pc, #64]	@ (8000c78 <HAL_PCD_MspInit+0xf0>)
 8000c38:	f001 f876 	bl	8001d28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000c3c:	4b0d      	ldr	r3, [pc, #52]	@ (8000c74 <HAL_PCD_MspInit+0xec>)
 8000c3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c40:	4a0c      	ldr	r2, [pc, #48]	@ (8000c74 <HAL_PCD_MspInit+0xec>)
 8000c42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c46:	6353      	str	r3, [r2, #52]	@ 0x34
 8000c48:	4b0a      	ldr	r3, [pc, #40]	@ (8000c74 <HAL_PCD_MspInit+0xec>)
 8000c4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c50:	60fb      	str	r3, [r7, #12]
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	4b07      	ldr	r3, [pc, #28]	@ (8000c74 <HAL_PCD_MspInit+0xec>)
 8000c56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c58:	4a06      	ldr	r2, [pc, #24]	@ (8000c74 <HAL_PCD_MspInit+0xec>)
 8000c5a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c5e:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c60:	4b04      	ldr	r3, [pc, #16]	@ (8000c74 <HAL_PCD_MspInit+0xec>)
 8000c62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c64:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c68:	60bb      	str	r3, [r7, #8]
 8000c6a:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8000c6c:	bf00      	nop
 8000c6e:	37b8      	adds	r7, #184	@ 0xb8
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	40023800 	.word	0x40023800
 8000c78:	40020000 	.word	0x40020000

08000c7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c80:	bf00      	nop
 8000c82:	e7fd      	b.n	8000c80 <NMI_Handler+0x4>

08000c84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c88:	bf00      	nop
 8000c8a:	e7fd      	b.n	8000c88 <HardFault_Handler+0x4>

08000c8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c90:	bf00      	nop
 8000c92:	e7fd      	b.n	8000c90 <MemManage_Handler+0x4>

08000c94 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c98:	bf00      	nop
 8000c9a:	e7fd      	b.n	8000c98 <BusFault_Handler+0x4>

08000c9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ca0:	bf00      	nop
 8000ca2:	e7fd      	b.n	8000ca0 <UsageFault_Handler+0x4>

08000ca4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ca8:	bf00      	nop
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr

08000cb2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cb6:	bf00      	nop
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr

08000cc0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cc4:	bf00      	nop
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr

08000cce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cd2:	f000 f92f 	bl	8000f34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cd6:	bf00      	nop
 8000cd8:	bd80      	pop	{r7, pc}
	...

08000cdc <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000ce0:	4802      	ldr	r0, [pc, #8]	@ (8000cec <CAN1_RX0_IRQHandler+0x10>)
 8000ce2:	f000 fcdf 	bl	80016a4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000ce6:	bf00      	nop
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	20000030 	.word	0x20000030

08000cf0 <can_recieve_message>:
} rx_param_t;

const int can_num_functions = 2;
rx_param_t rx_params[2];

void can_recieve_message(CAN_HandleTypeDef* hcan) {
 8000cf0:	b590      	push	{r4, r7, lr}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
	static CAN_RxHeaderTypeDef RxHeader;
	static rx_param_t rx_param;
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, rx_param.data.data) != HAL_OK ) return;
 8000cf8:	4b18      	ldr	r3, [pc, #96]	@ (8000d5c <can_recieve_message+0x6c>)
 8000cfa:	4a19      	ldr	r2, [pc, #100]	@ (8000d60 <can_recieve_message+0x70>)
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	6878      	ldr	r0, [r7, #4]
 8000d00:	f000 fb88 	bl	8001414 <HAL_CAN_GetRxMessage>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d124      	bne.n	8000d54 <can_recieve_message+0x64>
	can_functions[rx_param.data.ID - 1](rx_param.data);
 8000d0a:	4b14      	ldr	r3, [pc, #80]	@ (8000d5c <can_recieve_message+0x6c>)
 8000d0c:	881b      	ldrh	r3, [r3, #0]
 8000d0e:	3b01      	subs	r3, #1
 8000d10:	4a14      	ldr	r2, [pc, #80]	@ (8000d64 <can_recieve_message+0x74>)
 8000d12:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8000d16:	4b11      	ldr	r3, [pc, #68]	@ (8000d5c <can_recieve_message+0x6c>)
 8000d18:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000d1c:	47a0      	blx	r4
	rx_params[rx_param.data.ID - 1].stale = false;
 8000d1e:	4b0f      	ldr	r3, [pc, #60]	@ (8000d5c <can_recieve_message+0x6c>)
 8000d20:	881b      	ldrh	r3, [r3, #0]
 8000d22:	1e5a      	subs	r2, r3, #1
 8000d24:	4910      	ldr	r1, [pc, #64]	@ (8000d68 <can_recieve_message+0x78>)
 8000d26:	4613      	mov	r3, r2
 8000d28:	009b      	lsls	r3, r3, #2
 8000d2a:	4413      	add	r3, r2
 8000d2c:	009b      	lsls	r3, r3, #2
 8000d2e:	440b      	add	r3, r1
 8000d30:	3310      	adds	r3, #16
 8000d32:	2200      	movs	r2, #0
 8000d34:	701a      	strb	r2, [r3, #0]
	rx_params[rx_param.data.ID - 1].timestamp = HAL_GetTick();
 8000d36:	4b09      	ldr	r3, [pc, #36]	@ (8000d5c <can_recieve_message+0x6c>)
 8000d38:	881b      	ldrh	r3, [r3, #0]
 8000d3a:	1e5c      	subs	r4, r3, #1
 8000d3c:	f000 f90e 	bl	8000f5c <HAL_GetTick>
 8000d40:	4602      	mov	r2, r0
 8000d42:	4909      	ldr	r1, [pc, #36]	@ (8000d68 <can_recieve_message+0x78>)
 8000d44:	4623      	mov	r3, r4
 8000d46:	009b      	lsls	r3, r3, #2
 8000d48:	4423      	add	r3, r4
 8000d4a:	009b      	lsls	r3, r3, #2
 8000d4c:	440b      	add	r3, r1
 8000d4e:	330c      	adds	r3, #12
 8000d50:	601a      	str	r2, [r3, #0]
 8000d52:	e000      	b.n	8000d56 <can_recieve_message+0x66>
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, rx_param.data.data) != HAL_OK ) return;
 8000d54:	bf00      	nop

}
 8000d56:	370c      	adds	r7, #12
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd90      	pop	{r4, r7, pc}
 8000d5c:	20000604 	.word	0x20000604
 8000d60:	200005e8 	.word	0x200005e8
 8000d64:	20000000 	.word	0x20000000
 8000d68:	200005c0 	.word	0x200005c0

08000d6c <can_recieve_stale>:

void can_recieve_stale() {
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b084      	sub	sp, #16
 8000d70:	af00      	add	r7, sp, #0
	uint32_t tick = HAL_GetTick();
 8000d72:	f000 f8f3 	bl	8000f5c <HAL_GetTick>
 8000d76:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < can_num_functions; i++) {
 8000d78:	2300      	movs	r3, #0
 8000d7a:	60fb      	str	r3, [r7, #12]
 8000d7c:	e01a      	b.n	8000db4 <can_recieve_stale+0x48>
		if (rx_params[i].timestamp + STALE_CONSTANT < tick) {
 8000d7e:	4929      	ldr	r1, [pc, #164]	@ (8000e24 <can_recieve_stale+0xb8>)
 8000d80:	68fa      	ldr	r2, [r7, #12]
 8000d82:	4613      	mov	r3, r2
 8000d84:	009b      	lsls	r3, r3, #2
 8000d86:	4413      	add	r3, r2
 8000d88:	009b      	lsls	r3, r3, #2
 8000d8a:	440b      	add	r3, r1
 8000d8c:	330c      	adds	r3, #12
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f503 6396 	add.w	r3, r3, #1200	@ 0x4b0
 8000d94:	687a      	ldr	r2, [r7, #4]
 8000d96:	429a      	cmp	r2, r3
 8000d98:	d909      	bls.n	8000dae <can_recieve_stale+0x42>
			rx_params[i].stale = true;
 8000d9a:	4922      	ldr	r1, [pc, #136]	@ (8000e24 <can_recieve_stale+0xb8>)
 8000d9c:	68fa      	ldr	r2, [r7, #12]
 8000d9e:	4613      	mov	r3, r2
 8000da0:	009b      	lsls	r3, r3, #2
 8000da2:	4413      	add	r3, r2
 8000da4:	009b      	lsls	r3, r3, #2
 8000da6:	440b      	add	r3, r1
 8000da8:	3310      	adds	r3, #16
 8000daa:	2201      	movs	r2, #1
 8000dac:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < can_num_functions; i++) {
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	3301      	adds	r3, #1
 8000db2:	60fb      	str	r3, [r7, #12]
 8000db4:	2202      	movs	r2, #2
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	4293      	cmp	r3, r2
 8000dba:	dbe0      	blt.n	8000d7e <can_recieve_stale+0x12>
		}
	}
	for (int i = 0; i < can_num_functions; i++) {
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	60bb      	str	r3, [r7, #8]
 8000dc0:	e026      	b.n	8000e10 <can_recieve_stale+0xa4>
		if (rx_params[i].stale == true) {
 8000dc2:	4918      	ldr	r1, [pc, #96]	@ (8000e24 <can_recieve_stale+0xb8>)
 8000dc4:	68ba      	ldr	r2, [r7, #8]
 8000dc6:	4613      	mov	r3, r2
 8000dc8:	009b      	lsls	r3, r3, #2
 8000dca:	4413      	add	r3, r2
 8000dcc:	009b      	lsls	r3, r3, #2
 8000dce:	440b      	add	r3, r1
 8000dd0:	3310      	adds	r3, #16
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d00c      	beq.n	8000df2 <can_recieve_stale+0x86>
			HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, 1);
 8000dd8:	2201      	movs	r2, #1
 8000dda:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000dde:	4812      	ldr	r0, [pc, #72]	@ (8000e28 <can_recieve_stale+0xbc>)
 8000de0:	f001 f94e 	bl	8002080 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 8000de4:	2201      	movs	r2, #1
 8000de6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000dea:	480f      	ldr	r0, [pc, #60]	@ (8000e28 <can_recieve_stale+0xbc>)
 8000dec:	f001 f948 	bl	8002080 <HAL_GPIO_WritePin>
			break;
 8000df0:	e013      	b.n	8000e1a <can_recieve_stale+0xae>
		}
		HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, 0);
 8000df2:	2200      	movs	r2, #0
 8000df4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000df8:	480b      	ldr	r0, [pc, #44]	@ (8000e28 <can_recieve_stale+0xbc>)
 8000dfa:	f001 f941 	bl	8002080 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 8000dfe:	2200      	movs	r2, #0
 8000e00:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e04:	4808      	ldr	r0, [pc, #32]	@ (8000e28 <can_recieve_stale+0xbc>)
 8000e06:	f001 f93b 	bl	8002080 <HAL_GPIO_WritePin>
	for (int i = 0; i < can_num_functions; i++) {
 8000e0a:	68bb      	ldr	r3, [r7, #8]
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	60bb      	str	r3, [r7, #8]
 8000e10:	2202      	movs	r2, #2
 8000e12:	68bb      	ldr	r3, [r7, #8]
 8000e14:	4293      	cmp	r3, r2
 8000e16:	dbd4      	blt.n	8000dc2 <can_recieve_stale+0x56>
	}
}
 8000e18:	bf00      	nop
 8000e1a:	bf00      	nop
 8000e1c:	3710      	adds	r7, #16
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	200005c0 	.word	0x200005c0
 8000e28:	40021400 	.word	0x40021400

08000e2c <nop>:

static void nop(can_data_t msg) { return; }
 8000e2c:	b480      	push	{r7}
 8000e2e:	b085      	sub	sp, #20
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	1d3b      	adds	r3, r7, #4
 8000e34:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8000e38:	bf00      	nop
 8000e3a:	3714      	adds	r7, #20
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr

08000e44 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e48:	4b06      	ldr	r3, [pc, #24]	@ (8000e64 <SystemInit+0x20>)
 8000e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e4e:	4a05      	ldr	r2, [pc, #20]	@ (8000e64 <SystemInit+0x20>)
 8000e50:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e54:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e58:	bf00      	nop
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	e000ed00 	.word	0xe000ed00

08000e68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e68:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ea0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e6c:	f7ff ffea 	bl	8000e44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e70:	480c      	ldr	r0, [pc, #48]	@ (8000ea4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e72:	490d      	ldr	r1, [pc, #52]	@ (8000ea8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e74:	4a0d      	ldr	r2, [pc, #52]	@ (8000eac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e78:	e002      	b.n	8000e80 <LoopCopyDataInit>

08000e7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e7e:	3304      	adds	r3, #4

08000e80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e84:	d3f9      	bcc.n	8000e7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e86:	4a0a      	ldr	r2, [pc, #40]	@ (8000eb0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e88:	4c0a      	ldr	r4, [pc, #40]	@ (8000eb4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e8c:	e001      	b.n	8000e92 <LoopFillZerobss>

08000e8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e90:	3204      	adds	r2, #4

08000e92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e94:	d3fb      	bcc.n	8000e8e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000e96:	f003 fb19 	bl	80044cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e9a:	f7ff fb51 	bl	8000540 <main>
  bx  lr    
 8000e9e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ea0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000ea4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ea8:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000eac:	08004554 	.word	0x08004554
  ldr r2, =_sbss
 8000eb0:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000eb4:	2000061c 	.word	0x2000061c

08000eb8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000eb8:	e7fe      	b.n	8000eb8 <ADC_IRQHandler>

08000eba <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eba:	b580      	push	{r7, lr}
 8000ebc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ebe:	2003      	movs	r0, #3
 8000ec0:	f000 fef0 	bl	8001ca4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ec4:	2000      	movs	r0, #0
 8000ec6:	f000 f805 	bl	8000ed4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000eca:	f7ff fd7d 	bl	80009c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ece:	2300      	movs	r3, #0
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000edc:	4b12      	ldr	r3, [pc, #72]	@ (8000f28 <HAL_InitTick+0x54>)
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	4b12      	ldr	r3, [pc, #72]	@ (8000f2c <HAL_InitTick+0x58>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000eea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f000 ff0b 	bl	8001d0e <HAL_SYSTICK_Config>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000efe:	2301      	movs	r3, #1
 8000f00:	e00e      	b.n	8000f20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2b0f      	cmp	r3, #15
 8000f06:	d80a      	bhi.n	8000f1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f08:	2200      	movs	r2, #0
 8000f0a:	6879      	ldr	r1, [r7, #4]
 8000f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f10:	f000 fed3 	bl	8001cba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f14:	4a06      	ldr	r2, [pc, #24]	@ (8000f30 <HAL_InitTick+0x5c>)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	e000      	b.n	8000f20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f1e:	2301      	movs	r3, #1
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3708      	adds	r7, #8
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	20000008 	.word	0x20000008
 8000f2c:	20000010 	.word	0x20000010
 8000f30:	2000000c 	.word	0x2000000c

08000f34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f38:	4b06      	ldr	r3, [pc, #24]	@ (8000f54 <HAL_IncTick+0x20>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	4b06      	ldr	r3, [pc, #24]	@ (8000f58 <HAL_IncTick+0x24>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4413      	add	r3, r2
 8000f44:	4a04      	ldr	r2, [pc, #16]	@ (8000f58 <HAL_IncTick+0x24>)
 8000f46:	6013      	str	r3, [r2, #0]
}
 8000f48:	bf00      	nop
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	20000010 	.word	0x20000010
 8000f58:	20000618 	.word	0x20000618

08000f5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f60:	4b03      	ldr	r3, [pc, #12]	@ (8000f70 <HAL_GetTick+0x14>)
 8000f62:	681b      	ldr	r3, [r3, #0]
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	20000618 	.word	0x20000618

08000f74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f7c:	f7ff ffee 	bl	8000f5c <HAL_GetTick>
 8000f80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f8c:	d005      	beq.n	8000f9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f8e:	4b0a      	ldr	r3, [pc, #40]	@ (8000fb8 <HAL_Delay+0x44>)
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	461a      	mov	r2, r3
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	4413      	add	r3, r2
 8000f98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f9a:	bf00      	nop
 8000f9c:	f7ff ffde 	bl	8000f5c <HAL_GetTick>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	68bb      	ldr	r3, [r7, #8]
 8000fa4:	1ad3      	subs	r3, r2, r3
 8000fa6:	68fa      	ldr	r2, [r7, #12]
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	d8f7      	bhi.n	8000f9c <HAL_Delay+0x28>
  {
  }
}
 8000fac:	bf00      	nop
 8000fae:	bf00      	nop
 8000fb0:	3710      	adds	r7, #16
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	20000010 	.word	0x20000010

08000fbc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d101      	bne.n	8000fce <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e0ed      	b.n	80011aa <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d102      	bne.n	8000fe0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000fda:	6878      	ldr	r0, [r7, #4]
 8000fdc:	f7ff fd18 	bl	8000a10 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f042 0201 	orr.w	r2, r2, #1
 8000fee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ff0:	f7ff ffb4 	bl	8000f5c <HAL_GetTick>
 8000ff4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000ff6:	e012      	b.n	800101e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ff8:	f7ff ffb0 	bl	8000f5c <HAL_GetTick>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	1ad3      	subs	r3, r2, r3
 8001002:	2b0a      	cmp	r3, #10
 8001004:	d90b      	bls.n	800101e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800100a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2205      	movs	r2, #5
 8001016:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800101a:	2301      	movs	r3, #1
 800101c:	e0c5      	b.n	80011aa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f003 0301 	and.w	r3, r3, #1
 8001028:	2b00      	cmp	r3, #0
 800102a:	d0e5      	beq.n	8000ff8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f022 0202 	bic.w	r2, r2, #2
 800103a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800103c:	f7ff ff8e 	bl	8000f5c <HAL_GetTick>
 8001040:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001042:	e012      	b.n	800106a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001044:	f7ff ff8a 	bl	8000f5c <HAL_GetTick>
 8001048:	4602      	mov	r2, r0
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	1ad3      	subs	r3, r2, r3
 800104e:	2b0a      	cmp	r3, #10
 8001050:	d90b      	bls.n	800106a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001056:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2205      	movs	r2, #5
 8001062:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001066:	2301      	movs	r3, #1
 8001068:	e09f      	b.n	80011aa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f003 0302 	and.w	r3, r3, #2
 8001074:	2b00      	cmp	r3, #0
 8001076:	d1e5      	bne.n	8001044 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	7e1b      	ldrb	r3, [r3, #24]
 800107c:	2b01      	cmp	r3, #1
 800107e:	d108      	bne.n	8001092 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	e007      	b.n	80010a2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80010a0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	7e5b      	ldrb	r3, [r3, #25]
 80010a6:	2b01      	cmp	r3, #1
 80010a8:	d108      	bne.n	80010bc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	e007      	b.n	80010cc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80010ca:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	7e9b      	ldrb	r3, [r3, #26]
 80010d0:	2b01      	cmp	r3, #1
 80010d2:	d108      	bne.n	80010e6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f042 0220 	orr.w	r2, r2, #32
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	e007      	b.n	80010f6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f022 0220 	bic.w	r2, r2, #32
 80010f4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	7edb      	ldrb	r3, [r3, #27]
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d108      	bne.n	8001110 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f022 0210 	bic.w	r2, r2, #16
 800110c:	601a      	str	r2, [r3, #0]
 800110e:	e007      	b.n	8001120 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f042 0210 	orr.w	r2, r2, #16
 800111e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	7f1b      	ldrb	r3, [r3, #28]
 8001124:	2b01      	cmp	r3, #1
 8001126:	d108      	bne.n	800113a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f042 0208 	orr.w	r2, r2, #8
 8001136:	601a      	str	r2, [r3, #0]
 8001138:	e007      	b.n	800114a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f022 0208 	bic.w	r2, r2, #8
 8001148:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	7f5b      	ldrb	r3, [r3, #29]
 800114e:	2b01      	cmp	r3, #1
 8001150:	d108      	bne.n	8001164 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f042 0204 	orr.w	r2, r2, #4
 8001160:	601a      	str	r2, [r3, #0]
 8001162:	e007      	b.n	8001174 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f022 0204 	bic.w	r2, r2, #4
 8001172:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	689a      	ldr	r2, [r3, #8]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	431a      	orrs	r2, r3
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	691b      	ldr	r3, [r3, #16]
 8001182:	431a      	orrs	r2, r3
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	695b      	ldr	r3, [r3, #20]
 8001188:	ea42 0103 	orr.w	r1, r2, r3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	1e5a      	subs	r2, r3, #1
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	430a      	orrs	r2, r1
 8001198:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2200      	movs	r2, #0
 800119e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2201      	movs	r2, #1
 80011a4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80011a8:	2300      	movs	r3, #0
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3710      	adds	r7, #16
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
	...

080011b4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b087      	sub	sp, #28
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011ca:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80011cc:	7cfb      	ldrb	r3, [r7, #19]
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d003      	beq.n	80011da <HAL_CAN_ConfigFilter+0x26>
 80011d2:	7cfb      	ldrb	r3, [r7, #19]
 80011d4:	2b02      	cmp	r3, #2
 80011d6:	f040 80c7 	bne.w	8001368 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a69      	ldr	r2, [pc, #420]	@ (8001384 <HAL_CAN_ConfigFilter+0x1d0>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d001      	beq.n	80011e8 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 80011e4:	4b68      	ldr	r3, [pc, #416]	@ (8001388 <HAL_CAN_ConfigFilter+0x1d4>)
 80011e6:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80011ee:	f043 0201 	orr.w	r2, r3, #1
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	4a63      	ldr	r2, [pc, #396]	@ (8001388 <HAL_CAN_ConfigFilter+0x1d4>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d111      	bne.n	8001224 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001206:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800121a:	021b      	lsls	r3, r3, #8
 800121c:	431a      	orrs	r2, r3
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	695b      	ldr	r3, [r3, #20]
 8001228:	f003 031f 	and.w	r3, r3, #31
 800122c:	2201      	movs	r2, #1
 800122e:	fa02 f303 	lsl.w	r3, r2, r3
 8001232:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	43db      	mvns	r3, r3
 800123e:	401a      	ands	r2, r3
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	69db      	ldr	r3, [r3, #28]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d123      	bne.n	8001296 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	43db      	mvns	r3, r3
 8001258:	401a      	ands	r2, r3
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800126c:	683a      	ldr	r2, [r7, #0]
 800126e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001270:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	3248      	adds	r2, #72	@ 0x48
 8001276:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800128a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800128c:	6979      	ldr	r1, [r7, #20]
 800128e:	3348      	adds	r3, #72	@ 0x48
 8001290:	00db      	lsls	r3, r3, #3
 8001292:	440b      	add	r3, r1
 8001294:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	69db      	ldr	r3, [r3, #28]
 800129a:	2b01      	cmp	r3, #1
 800129c:	d122      	bne.n	80012e4 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	431a      	orrs	r2, r3
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80012ba:	683a      	ldr	r2, [r7, #0]
 80012bc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80012be:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	3248      	adds	r2, #72	@ 0x48
 80012c4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	68db      	ldr	r3, [r3, #12]
 80012d2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80012d8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80012da:	6979      	ldr	r1, [r7, #20]
 80012dc:	3348      	adds	r3, #72	@ 0x48
 80012de:	00db      	lsls	r3, r3, #3
 80012e0:	440b      	add	r3, r1
 80012e2:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	699b      	ldr	r3, [r3, #24]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d109      	bne.n	8001300 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	43db      	mvns	r3, r3
 80012f6:	401a      	ands	r2, r3
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80012fe:	e007      	b.n	8001310 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	431a      	orrs	r2, r3
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	691b      	ldr	r3, [r3, #16]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d109      	bne.n	800132c <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	43db      	mvns	r3, r3
 8001322:	401a      	ands	r2, r3
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800132a:	e007      	b.n	800133c <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	431a      	orrs	r2, r3
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	6a1b      	ldr	r3, [r3, #32]
 8001340:	2b01      	cmp	r3, #1
 8001342:	d107      	bne.n	8001354 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	431a      	orrs	r2, r3
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800135a:	f023 0201 	bic.w	r2, r3, #1
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001364:	2300      	movs	r3, #0
 8001366:	e006      	b.n	8001376 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800136c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001374:	2301      	movs	r3, #1
  }
}
 8001376:	4618      	mov	r0, r3
 8001378:	371c      	adds	r7, #28
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	40003400 	.word	0x40003400
 8001388:	40006400 	.word	0x40006400

0800138c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f893 3020 	ldrb.w	r3, [r3, #32]
 800139a:	b2db      	uxtb	r3, r3
 800139c:	2b01      	cmp	r3, #1
 800139e:	d12e      	bne.n	80013fe <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2202      	movs	r2, #2
 80013a4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f022 0201 	bic.w	r2, r2, #1
 80013b6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80013b8:	f7ff fdd0 	bl	8000f5c <HAL_GetTick>
 80013bc:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80013be:	e012      	b.n	80013e6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80013c0:	f7ff fdcc 	bl	8000f5c <HAL_GetTick>
 80013c4:	4602      	mov	r2, r0
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	2b0a      	cmp	r3, #10
 80013cc:	d90b      	bls.n	80013e6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013d2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2205      	movs	r2, #5
 80013de:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
 80013e4:	e012      	b.n	800140c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f003 0301 	and.w	r3, r3, #1
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d1e5      	bne.n	80013c0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2200      	movs	r2, #0
 80013f8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80013fa:	2300      	movs	r3, #0
 80013fc:	e006      	b.n	800140c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001402:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
  }
}
 800140c:	4618      	mov	r0, r3
 800140e:	3710      	adds	r7, #16
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}

08001414 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001414:	b480      	push	{r7}
 8001416:	b087      	sub	sp, #28
 8001418:	af00      	add	r7, sp, #0
 800141a:	60f8      	str	r0, [r7, #12]
 800141c:	60b9      	str	r1, [r7, #8]
 800141e:	607a      	str	r2, [r7, #4]
 8001420:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001428:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800142a:	7dfb      	ldrb	r3, [r7, #23]
 800142c:	2b01      	cmp	r3, #1
 800142e:	d003      	beq.n	8001438 <HAL_CAN_GetRxMessage+0x24>
 8001430:	7dfb      	ldrb	r3, [r7, #23]
 8001432:	2b02      	cmp	r3, #2
 8001434:	f040 8103 	bne.w	800163e <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d10e      	bne.n	800145c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	f003 0303 	and.w	r3, r3, #3
 8001448:	2b00      	cmp	r3, #0
 800144a:	d116      	bne.n	800147a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001450:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001458:	2301      	movs	r3, #1
 800145a:	e0f7      	b.n	800164c <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	691b      	ldr	r3, [r3, #16]
 8001462:	f003 0303 	and.w	r3, r3, #3
 8001466:	2b00      	cmp	r3, #0
 8001468:	d107      	bne.n	800147a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800146e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	e0e8      	b.n	800164c <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	68bb      	ldr	r3, [r7, #8]
 8001480:	331b      	adds	r3, #27
 8001482:	011b      	lsls	r3, r3, #4
 8001484:	4413      	add	r3, r2
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f003 0204 	and.w	r2, r3, #4
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d10c      	bne.n	80014b2 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	331b      	adds	r3, #27
 80014a0:	011b      	lsls	r3, r3, #4
 80014a2:	4413      	add	r3, r2
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	0d5b      	lsrs	r3, r3, #21
 80014a8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	e00b      	b.n	80014ca <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	331b      	adds	r3, #27
 80014ba:	011b      	lsls	r3, r3, #4
 80014bc:	4413      	add	r3, r2
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	08db      	lsrs	r3, r3, #3
 80014c2:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	331b      	adds	r3, #27
 80014d2:	011b      	lsls	r3, r3, #4
 80014d4:	4413      	add	r3, r2
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f003 0202 	and.w	r2, r3, #2
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	331b      	adds	r3, #27
 80014e8:	011b      	lsls	r3, r3, #4
 80014ea:	4413      	add	r3, r2
 80014ec:	3304      	adds	r3, #4
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f003 0308 	and.w	r3, r3, #8
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d003      	beq.n	8001500 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2208      	movs	r2, #8
 80014fc:	611a      	str	r2, [r3, #16]
 80014fe:	e00b      	b.n	8001518 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	331b      	adds	r3, #27
 8001508:	011b      	lsls	r3, r3, #4
 800150a:	4413      	add	r3, r2
 800150c:	3304      	adds	r3, #4
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f003 020f 	and.w	r2, r3, #15
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	331b      	adds	r3, #27
 8001520:	011b      	lsls	r3, r3, #4
 8001522:	4413      	add	r3, r2
 8001524:	3304      	adds	r3, #4
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	0a1b      	lsrs	r3, r3, #8
 800152a:	b2da      	uxtb	r2, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	331b      	adds	r3, #27
 8001538:	011b      	lsls	r3, r3, #4
 800153a:	4413      	add	r3, r2
 800153c:	3304      	adds	r3, #4
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	0c1b      	lsrs	r3, r3, #16
 8001542:	b29a      	uxth	r2, r3
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	011b      	lsls	r3, r3, #4
 8001550:	4413      	add	r3, r2
 8001552:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	b2da      	uxtb	r2, r3
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	011b      	lsls	r3, r3, #4
 8001566:	4413      	add	r3, r2
 8001568:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	0a1a      	lsrs	r2, r3, #8
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	3301      	adds	r3, #1
 8001574:	b2d2      	uxtb	r2, r2
 8001576:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	011b      	lsls	r3, r3, #4
 8001580:	4413      	add	r3, r2
 8001582:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	0c1a      	lsrs	r2, r3, #16
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	3302      	adds	r3, #2
 800158e:	b2d2      	uxtb	r2, r2
 8001590:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	011b      	lsls	r3, r3, #4
 800159a:	4413      	add	r3, r2
 800159c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	0e1a      	lsrs	r2, r3, #24
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	3303      	adds	r3, #3
 80015a8:	b2d2      	uxtb	r2, r2
 80015aa:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	011b      	lsls	r3, r3, #4
 80015b4:	4413      	add	r3, r2
 80015b6:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	3304      	adds	r3, #4
 80015c0:	b2d2      	uxtb	r2, r2
 80015c2:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	011b      	lsls	r3, r3, #4
 80015cc:	4413      	add	r3, r2
 80015ce:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	0a1a      	lsrs	r2, r3, #8
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	3305      	adds	r3, #5
 80015da:	b2d2      	uxtb	r2, r2
 80015dc:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	011b      	lsls	r3, r3, #4
 80015e6:	4413      	add	r3, r2
 80015e8:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	0c1a      	lsrs	r2, r3, #16
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	3306      	adds	r3, #6
 80015f4:	b2d2      	uxtb	r2, r2
 80015f6:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	011b      	lsls	r3, r3, #4
 8001600:	4413      	add	r3, r2
 8001602:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	0e1a      	lsrs	r2, r3, #24
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	3307      	adds	r3, #7
 800160e:	b2d2      	uxtb	r2, r2
 8001610:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001612:	68bb      	ldr	r3, [r7, #8]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d108      	bne.n	800162a <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	68da      	ldr	r2, [r3, #12]
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f042 0220 	orr.w	r2, r2, #32
 8001626:	60da      	str	r2, [r3, #12]
 8001628:	e007      	b.n	800163a <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	691a      	ldr	r2, [r3, #16]
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f042 0220 	orr.w	r2, r2, #32
 8001638:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800163a:	2300      	movs	r3, #0
 800163c:	e006      	b.n	800164c <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001642:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
  }
}
 800164c:	4618      	mov	r0, r3
 800164e:	371c      	adds	r7, #28
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr

08001658 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001658:	b480      	push	{r7}
 800165a:	b085      	sub	sp, #20
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001668:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800166a:	7bfb      	ldrb	r3, [r7, #15]
 800166c:	2b01      	cmp	r3, #1
 800166e:	d002      	beq.n	8001676 <HAL_CAN_ActivateNotification+0x1e>
 8001670:	7bfb      	ldrb	r3, [r7, #15]
 8001672:	2b02      	cmp	r3, #2
 8001674:	d109      	bne.n	800168a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	6959      	ldr	r1, [r3, #20]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	683a      	ldr	r2, [r7, #0]
 8001682:	430a      	orrs	r2, r1
 8001684:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001686:	2300      	movs	r3, #0
 8001688:	e006      	b.n	8001698 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800168e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
  }
}
 8001698:	4618      	mov	r0, r3
 800169a:	3714      	adds	r7, #20
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr

080016a4 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b08a      	sub	sp, #40	@ 0x28
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80016ac:	2300      	movs	r3, #0
 80016ae:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	695b      	ldr	r3, [r3, #20]
 80016b6:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	68db      	ldr	r3, [r3, #12]
 80016ce:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	691b      	ldr	r3, [r3, #16]
 80016d6:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	699b      	ldr	r3, [r3, #24]
 80016de:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80016e0:	6a3b      	ldr	r3, [r7, #32]
 80016e2:	f003 0301 	and.w	r3, r3, #1
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d07c      	beq.n	80017e4 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	f003 0301 	and.w	r3, r3, #1
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d023      	beq.n	800173c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	2201      	movs	r2, #1
 80016fa:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80016fc:	69bb      	ldr	r3, [r7, #24]
 80016fe:	f003 0302 	and.w	r3, r3, #2
 8001702:	2b00      	cmp	r3, #0
 8001704:	d003      	beq.n	800170e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	f000 f983 	bl	8001a12 <HAL_CAN_TxMailbox0CompleteCallback>
 800170c:	e016      	b.n	800173c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800170e:	69bb      	ldr	r3, [r7, #24]
 8001710:	f003 0304 	and.w	r3, r3, #4
 8001714:	2b00      	cmp	r3, #0
 8001716:	d004      	beq.n	8001722 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800171a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800171e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001720:	e00c      	b.n	800173c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001722:	69bb      	ldr	r3, [r7, #24]
 8001724:	f003 0308 	and.w	r3, r3, #8
 8001728:	2b00      	cmp	r3, #0
 800172a:	d004      	beq.n	8001736 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800172c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800172e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001732:	627b      	str	r3, [r7, #36]	@ 0x24
 8001734:	e002      	b.n	800173c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f000 f989 	bl	8001a4e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800173c:	69bb      	ldr	r3, [r7, #24]
 800173e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001742:	2b00      	cmp	r3, #0
 8001744:	d024      	beq.n	8001790 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800174e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001750:	69bb      	ldr	r3, [r7, #24]
 8001752:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001756:	2b00      	cmp	r3, #0
 8001758:	d003      	beq.n	8001762 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f000 f963 	bl	8001a26 <HAL_CAN_TxMailbox1CompleteCallback>
 8001760:	e016      	b.n	8001790 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001762:	69bb      	ldr	r3, [r7, #24]
 8001764:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001768:	2b00      	cmp	r3, #0
 800176a:	d004      	beq.n	8001776 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800176c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800176e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001772:	627b      	str	r3, [r7, #36]	@ 0x24
 8001774:	e00c      	b.n	8001790 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001776:	69bb      	ldr	r3, [r7, #24]
 8001778:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800177c:	2b00      	cmp	r3, #0
 800177e:	d004      	beq.n	800178a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001782:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001786:	627b      	str	r3, [r7, #36]	@ 0x24
 8001788:	e002      	b.n	8001790 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f000 f969 	bl	8001a62 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001790:	69bb      	ldr	r3, [r7, #24]
 8001792:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d024      	beq.n	80017e4 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80017a2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80017a4:	69bb      	ldr	r3, [r7, #24]
 80017a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d003      	beq.n	80017b6 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f000 f943 	bl	8001a3a <HAL_CAN_TxMailbox2CompleteCallback>
 80017b4:	e016      	b.n	80017e4 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80017b6:	69bb      	ldr	r3, [r7, #24]
 80017b8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d004      	beq.n	80017ca <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80017c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80017c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80017c8:	e00c      	b.n	80017e4 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80017ca:	69bb      	ldr	r3, [r7, #24]
 80017cc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d004      	beq.n	80017de <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80017d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017da:	627b      	str	r3, [r7, #36]	@ 0x24
 80017dc:	e002      	b.n	80017e4 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f000 f949 	bl	8001a76 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80017e4:	6a3b      	ldr	r3, [r7, #32]
 80017e6:	f003 0308 	and.w	r3, r3, #8
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d00c      	beq.n	8001808 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	f003 0310 	and.w	r3, r3, #16
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d007      	beq.n	8001808 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80017f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80017fe:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2210      	movs	r2, #16
 8001806:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001808:	6a3b      	ldr	r3, [r7, #32]
 800180a:	f003 0304 	and.w	r3, r3, #4
 800180e:	2b00      	cmp	r3, #0
 8001810:	d00b      	beq.n	800182a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	f003 0308 	and.w	r3, r3, #8
 8001818:	2b00      	cmp	r3, #0
 800181a:	d006      	beq.n	800182a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	2208      	movs	r2, #8
 8001822:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	f000 f930 	bl	8001a8a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800182a:	6a3b      	ldr	r3, [r7, #32]
 800182c:	f003 0302 	and.w	r3, r3, #2
 8001830:	2b00      	cmp	r3, #0
 8001832:	d009      	beq.n	8001848 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	68db      	ldr	r3, [r3, #12]
 800183a:	f003 0303 	and.w	r3, r3, #3
 800183e:	2b00      	cmp	r3, #0
 8001840:	d002      	beq.n	8001848 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f7fe fe70 	bl	8000528 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001848:	6a3b      	ldr	r3, [r7, #32]
 800184a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800184e:	2b00      	cmp	r3, #0
 8001850:	d00c      	beq.n	800186c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	f003 0310 	and.w	r3, r3, #16
 8001858:	2b00      	cmp	r3, #0
 800185a:	d007      	beq.n	800186c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800185c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800185e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001862:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2210      	movs	r2, #16
 800186a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800186c:	6a3b      	ldr	r3, [r7, #32]
 800186e:	f003 0320 	and.w	r3, r3, #32
 8001872:	2b00      	cmp	r3, #0
 8001874:	d00b      	beq.n	800188e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	f003 0308 	and.w	r3, r3, #8
 800187c:	2b00      	cmp	r3, #0
 800187e:	d006      	beq.n	800188e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	2208      	movs	r2, #8
 8001886:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f000 f912 	bl	8001ab2 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800188e:	6a3b      	ldr	r3, [r7, #32]
 8001890:	f003 0310 	and.w	r3, r3, #16
 8001894:	2b00      	cmp	r3, #0
 8001896:	d009      	beq.n	80018ac <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	691b      	ldr	r3, [r3, #16]
 800189e:	f003 0303 	and.w	r3, r3, #3
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d002      	beq.n	80018ac <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f000 f8f9 	bl	8001a9e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80018ac:	6a3b      	ldr	r3, [r7, #32]
 80018ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d00b      	beq.n	80018ce <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	f003 0310 	and.w	r3, r3, #16
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d006      	beq.n	80018ce <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2210      	movs	r2, #16
 80018c6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	f000 f8fc 	bl	8001ac6 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80018ce:	6a3b      	ldr	r3, [r7, #32]
 80018d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d00b      	beq.n	80018f0 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	f003 0308 	and.w	r3, r3, #8
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d006      	beq.n	80018f0 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	2208      	movs	r2, #8
 80018e8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f000 f8f5 	bl	8001ada <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80018f0:	6a3b      	ldr	r3, [r7, #32]
 80018f2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d07b      	beq.n	80019f2 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	f003 0304 	and.w	r3, r3, #4
 8001900:	2b00      	cmp	r3, #0
 8001902:	d072      	beq.n	80019ea <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001904:	6a3b      	ldr	r3, [r7, #32]
 8001906:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800190a:	2b00      	cmp	r3, #0
 800190c:	d008      	beq.n	8001920 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001914:	2b00      	cmp	r3, #0
 8001916:	d003      	beq.n	8001920 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800191a:	f043 0301 	orr.w	r3, r3, #1
 800191e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001920:	6a3b      	ldr	r3, [r7, #32]
 8001922:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001926:	2b00      	cmp	r3, #0
 8001928:	d008      	beq.n	800193c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001930:	2b00      	cmp	r3, #0
 8001932:	d003      	beq.n	800193c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001936:	f043 0302 	orr.w	r3, r3, #2
 800193a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800193c:	6a3b      	ldr	r3, [r7, #32]
 800193e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001942:	2b00      	cmp	r3, #0
 8001944:	d008      	beq.n	8001958 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800194c:	2b00      	cmp	r3, #0
 800194e:	d003      	beq.n	8001958 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001952:	f043 0304 	orr.w	r3, r3, #4
 8001956:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001958:	6a3b      	ldr	r3, [r7, #32]
 800195a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800195e:	2b00      	cmp	r3, #0
 8001960:	d043      	beq.n	80019ea <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001968:	2b00      	cmp	r3, #0
 800196a:	d03e      	beq.n	80019ea <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001972:	2b60      	cmp	r3, #96	@ 0x60
 8001974:	d02b      	beq.n	80019ce <HAL_CAN_IRQHandler+0x32a>
 8001976:	2b60      	cmp	r3, #96	@ 0x60
 8001978:	d82e      	bhi.n	80019d8 <HAL_CAN_IRQHandler+0x334>
 800197a:	2b50      	cmp	r3, #80	@ 0x50
 800197c:	d022      	beq.n	80019c4 <HAL_CAN_IRQHandler+0x320>
 800197e:	2b50      	cmp	r3, #80	@ 0x50
 8001980:	d82a      	bhi.n	80019d8 <HAL_CAN_IRQHandler+0x334>
 8001982:	2b40      	cmp	r3, #64	@ 0x40
 8001984:	d019      	beq.n	80019ba <HAL_CAN_IRQHandler+0x316>
 8001986:	2b40      	cmp	r3, #64	@ 0x40
 8001988:	d826      	bhi.n	80019d8 <HAL_CAN_IRQHandler+0x334>
 800198a:	2b30      	cmp	r3, #48	@ 0x30
 800198c:	d010      	beq.n	80019b0 <HAL_CAN_IRQHandler+0x30c>
 800198e:	2b30      	cmp	r3, #48	@ 0x30
 8001990:	d822      	bhi.n	80019d8 <HAL_CAN_IRQHandler+0x334>
 8001992:	2b10      	cmp	r3, #16
 8001994:	d002      	beq.n	800199c <HAL_CAN_IRQHandler+0x2f8>
 8001996:	2b20      	cmp	r3, #32
 8001998:	d005      	beq.n	80019a6 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800199a:	e01d      	b.n	80019d8 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800199c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800199e:	f043 0308 	orr.w	r3, r3, #8
 80019a2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80019a4:	e019      	b.n	80019da <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80019a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019a8:	f043 0310 	orr.w	r3, r3, #16
 80019ac:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80019ae:	e014      	b.n	80019da <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80019b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019b2:	f043 0320 	orr.w	r3, r3, #32
 80019b6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80019b8:	e00f      	b.n	80019da <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80019ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80019c0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80019c2:	e00a      	b.n	80019da <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80019c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80019ca:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80019cc:	e005      	b.n	80019da <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80019ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019d4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80019d6:	e000      	b.n	80019da <HAL_CAN_IRQHandler+0x336>
            break;
 80019d8:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	699a      	ldr	r2, [r3, #24]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80019e8:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	2204      	movs	r2, #4
 80019f0:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80019f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d008      	beq.n	8001a0a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80019fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019fe:	431a      	orrs	r2, r3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f000 f872 	bl	8001aee <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001a0a:	bf00      	nop
 8001a0c:	3728      	adds	r7, #40	@ 0x28
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}

08001a12 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001a12:	b480      	push	{r7}
 8001a14:	b083      	sub	sp, #12
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001a1a:	bf00      	nop
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr

08001a26 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001a26:	b480      	push	{r7}
 8001a28:	b083      	sub	sp, #12
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001a2e:	bf00      	nop
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr

08001a3a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	b083      	sub	sp, #12
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001a42:	bf00      	nop
 8001a44:	370c      	adds	r7, #12
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr

08001a4e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001a4e:	b480      	push	{r7}
 8001a50:	b083      	sub	sp, #12
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001a56:	bf00      	nop
 8001a58:	370c      	adds	r7, #12
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr

08001a62 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001a62:	b480      	push	{r7}
 8001a64:	b083      	sub	sp, #12
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001a6a:	bf00      	nop
 8001a6c:	370c      	adds	r7, #12
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr

08001a76 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001a76:	b480      	push	{r7}
 8001a78:	b083      	sub	sp, #12
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001a7e:	bf00      	nop
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr

08001a8a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001a8a:	b480      	push	{r7}
 8001a8c:	b083      	sub	sp, #12
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001a92:	bf00      	nop
 8001a94:	370c      	adds	r7, #12
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr

08001a9e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001a9e:	b480      	push	{r7}
 8001aa0:	b083      	sub	sp, #12
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001aa6:	bf00      	nop
 8001aa8:	370c      	adds	r7, #12
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr

08001ab2 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	b083      	sub	sp, #12
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001aba:	bf00      	nop
 8001abc:	370c      	adds	r7, #12
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr

08001ac6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001ac6:	b480      	push	{r7}
 8001ac8:	b083      	sub	sp, #12
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001ace:	bf00      	nop
 8001ad0:	370c      	adds	r7, #12
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr

08001ada <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001ada:	b480      	push	{r7}
 8001adc:	b083      	sub	sp, #12
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001ae2:	bf00      	nop
 8001ae4:	370c      	adds	r7, #12
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr

08001aee <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001aee:	b480      	push	{r7}
 8001af0:	b083      	sub	sp, #12
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001af6:	bf00      	nop
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
	...

08001b04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b085      	sub	sp, #20
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	f003 0307 	and.w	r3, r3, #7
 8001b12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b14:	4b0b      	ldr	r3, [pc, #44]	@ (8001b44 <__NVIC_SetPriorityGrouping+0x40>)
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b1a:	68ba      	ldr	r2, [r7, #8]
 8001b1c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b20:	4013      	ands	r3, r2
 8001b22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001b2c:	4b06      	ldr	r3, [pc, #24]	@ (8001b48 <__NVIC_SetPriorityGrouping+0x44>)
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b32:	4a04      	ldr	r2, [pc, #16]	@ (8001b44 <__NVIC_SetPriorityGrouping+0x40>)
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	60d3      	str	r3, [r2, #12]
}
 8001b38:	bf00      	nop
 8001b3a:	3714      	adds	r7, #20
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr
 8001b44:	e000ed00 	.word	0xe000ed00
 8001b48:	05fa0000 	.word	0x05fa0000

08001b4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b50:	4b04      	ldr	r3, [pc, #16]	@ (8001b64 <__NVIC_GetPriorityGrouping+0x18>)
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	0a1b      	lsrs	r3, r3, #8
 8001b56:	f003 0307 	and.w	r3, r3, #7
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr
 8001b64:	e000ed00 	.word	0xe000ed00

08001b68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	4603      	mov	r3, r0
 8001b70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	db0b      	blt.n	8001b92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b7a:	79fb      	ldrb	r3, [r7, #7]
 8001b7c:	f003 021f 	and.w	r2, r3, #31
 8001b80:	4907      	ldr	r1, [pc, #28]	@ (8001ba0 <__NVIC_EnableIRQ+0x38>)
 8001b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b86:	095b      	lsrs	r3, r3, #5
 8001b88:	2001      	movs	r0, #1
 8001b8a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b92:	bf00      	nop
 8001b94:	370c      	adds	r7, #12
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	e000e100 	.word	0xe000e100

08001ba4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	4603      	mov	r3, r0
 8001bac:	6039      	str	r1, [r7, #0]
 8001bae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	db0a      	blt.n	8001bce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	b2da      	uxtb	r2, r3
 8001bbc:	490c      	ldr	r1, [pc, #48]	@ (8001bf0 <__NVIC_SetPriority+0x4c>)
 8001bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc2:	0112      	lsls	r2, r2, #4
 8001bc4:	b2d2      	uxtb	r2, r2
 8001bc6:	440b      	add	r3, r1
 8001bc8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bcc:	e00a      	b.n	8001be4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	b2da      	uxtb	r2, r3
 8001bd2:	4908      	ldr	r1, [pc, #32]	@ (8001bf4 <__NVIC_SetPriority+0x50>)
 8001bd4:	79fb      	ldrb	r3, [r7, #7]
 8001bd6:	f003 030f 	and.w	r3, r3, #15
 8001bda:	3b04      	subs	r3, #4
 8001bdc:	0112      	lsls	r2, r2, #4
 8001bde:	b2d2      	uxtb	r2, r2
 8001be0:	440b      	add	r3, r1
 8001be2:	761a      	strb	r2, [r3, #24]
}
 8001be4:	bf00      	nop
 8001be6:	370c      	adds	r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr
 8001bf0:	e000e100 	.word	0xe000e100
 8001bf4:	e000ed00 	.word	0xe000ed00

08001bf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b089      	sub	sp, #36	@ 0x24
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	60f8      	str	r0, [r7, #12]
 8001c00:	60b9      	str	r1, [r7, #8]
 8001c02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	f003 0307 	and.w	r3, r3, #7
 8001c0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	f1c3 0307 	rsb	r3, r3, #7
 8001c12:	2b04      	cmp	r3, #4
 8001c14:	bf28      	it	cs
 8001c16:	2304      	movcs	r3, #4
 8001c18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	3304      	adds	r3, #4
 8001c1e:	2b06      	cmp	r3, #6
 8001c20:	d902      	bls.n	8001c28 <NVIC_EncodePriority+0x30>
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	3b03      	subs	r3, #3
 8001c26:	e000      	b.n	8001c2a <NVIC_EncodePriority+0x32>
 8001c28:	2300      	movs	r3, #0
 8001c2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c30:	69bb      	ldr	r3, [r7, #24]
 8001c32:	fa02 f303 	lsl.w	r3, r2, r3
 8001c36:	43da      	mvns	r2, r3
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	401a      	ands	r2, r3
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c40:	f04f 31ff 	mov.w	r1, #4294967295
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	fa01 f303 	lsl.w	r3, r1, r3
 8001c4a:	43d9      	mvns	r1, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c50:	4313      	orrs	r3, r2
         );
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3724      	adds	r7, #36	@ 0x24
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
	...

08001c60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	3b01      	subs	r3, #1
 8001c6c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c70:	d301      	bcc.n	8001c76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c72:	2301      	movs	r3, #1
 8001c74:	e00f      	b.n	8001c96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c76:	4a0a      	ldr	r2, [pc, #40]	@ (8001ca0 <SysTick_Config+0x40>)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	3b01      	subs	r3, #1
 8001c7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c7e:	210f      	movs	r1, #15
 8001c80:	f04f 30ff 	mov.w	r0, #4294967295
 8001c84:	f7ff ff8e 	bl	8001ba4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c88:	4b05      	ldr	r3, [pc, #20]	@ (8001ca0 <SysTick_Config+0x40>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c8e:	4b04      	ldr	r3, [pc, #16]	@ (8001ca0 <SysTick_Config+0x40>)
 8001c90:	2207      	movs	r2, #7
 8001c92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c94:	2300      	movs	r3, #0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3708      	adds	r7, #8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	e000e010 	.word	0xe000e010

08001ca4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f7ff ff29 	bl	8001b04 <__NVIC_SetPriorityGrouping>
}
 8001cb2:	bf00      	nop
 8001cb4:	3708      	adds	r7, #8
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}

08001cba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	b086      	sub	sp, #24
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	60b9      	str	r1, [r7, #8]
 8001cc4:	607a      	str	r2, [r7, #4]
 8001cc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ccc:	f7ff ff3e 	bl	8001b4c <__NVIC_GetPriorityGrouping>
 8001cd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	68b9      	ldr	r1, [r7, #8]
 8001cd6:	6978      	ldr	r0, [r7, #20]
 8001cd8:	f7ff ff8e 	bl	8001bf8 <NVIC_EncodePriority>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ce2:	4611      	mov	r1, r2
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f7ff ff5d 	bl	8001ba4 <__NVIC_SetPriority>
}
 8001cea:	bf00      	nop
 8001cec:	3718      	adds	r7, #24
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cf2:	b580      	push	{r7, lr}
 8001cf4:	b082      	sub	sp, #8
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7ff ff31 	bl	8001b68 <__NVIC_EnableIRQ>
}
 8001d06:	bf00      	nop
 8001d08:	3708      	adds	r7, #8
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}

08001d0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d0e:	b580      	push	{r7, lr}
 8001d10:	b082      	sub	sp, #8
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f7ff ffa2 	bl	8001c60 <SysTick_Config>
 8001d1c:	4603      	mov	r3, r0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
	...

08001d28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b089      	sub	sp, #36	@ 0x24
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001d32:	2300      	movs	r3, #0
 8001d34:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001d36:	2300      	movs	r3, #0
 8001d38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001d42:	2300      	movs	r3, #0
 8001d44:	61fb      	str	r3, [r7, #28]
 8001d46:	e175      	b.n	8002034 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001d48:	2201      	movs	r2, #1
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	697a      	ldr	r2, [r7, #20]
 8001d58:	4013      	ands	r3, r2
 8001d5a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001d5c:	693a      	ldr	r2, [r7, #16]
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	429a      	cmp	r2, r3
 8001d62:	f040 8164 	bne.w	800202e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f003 0303 	and.w	r3, r3, #3
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d005      	beq.n	8001d7e <HAL_GPIO_Init+0x56>
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f003 0303 	and.w	r3, r3, #3
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d130      	bne.n	8001de0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	005b      	lsls	r3, r3, #1
 8001d88:	2203      	movs	r2, #3
 8001d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8e:	43db      	mvns	r3, r3
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	4013      	ands	r3, r2
 8001d94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	68da      	ldr	r2, [r3, #12]
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	005b      	lsls	r3, r3, #1
 8001d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001da2:	69ba      	ldr	r2, [r7, #24]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	69ba      	ldr	r2, [r7, #24]
 8001dac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001db4:	2201      	movs	r2, #1
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbc:	43db      	mvns	r3, r3
 8001dbe:	69ba      	ldr	r2, [r7, #24]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	091b      	lsrs	r3, r3, #4
 8001dca:	f003 0201 	and.w	r2, r3, #1
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd4:	69ba      	ldr	r2, [r7, #24]
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f003 0303 	and.w	r3, r3, #3
 8001de8:	2b03      	cmp	r3, #3
 8001dea:	d017      	beq.n	8001e1c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	005b      	lsls	r3, r3, #1
 8001df6:	2203      	movs	r2, #3
 8001df8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfc:	43db      	mvns	r3, r3
 8001dfe:	69ba      	ldr	r2, [r7, #24]
 8001e00:	4013      	ands	r3, r2
 8001e02:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	689a      	ldr	r2, [r3, #8]
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	005b      	lsls	r3, r3, #1
 8001e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e10:	69ba      	ldr	r2, [r7, #24]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	69ba      	ldr	r2, [r7, #24]
 8001e1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f003 0303 	and.w	r3, r3, #3
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d123      	bne.n	8001e70 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	08da      	lsrs	r2, r3, #3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	3208      	adds	r2, #8
 8001e30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	f003 0307 	and.w	r3, r3, #7
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	220f      	movs	r2, #15
 8001e40:	fa02 f303 	lsl.w	r3, r2, r3
 8001e44:	43db      	mvns	r3, r3
 8001e46:	69ba      	ldr	r2, [r7, #24]
 8001e48:	4013      	ands	r3, r2
 8001e4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	691a      	ldr	r2, [r3, #16]
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	f003 0307 	and.w	r3, r3, #7
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	08da      	lsrs	r2, r3, #3
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	3208      	adds	r2, #8
 8001e6a:	69b9      	ldr	r1, [r7, #24]
 8001e6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	005b      	lsls	r3, r3, #1
 8001e7a:	2203      	movs	r2, #3
 8001e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e80:	43db      	mvns	r3, r3
 8001e82:	69ba      	ldr	r2, [r7, #24]
 8001e84:	4013      	ands	r3, r2
 8001e86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f003 0203 	and.w	r2, r3, #3
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	005b      	lsls	r3, r3, #1
 8001e94:	fa02 f303 	lsl.w	r3, r2, r3
 8001e98:	69ba      	ldr	r2, [r7, #24]
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	69ba      	ldr	r2, [r7, #24]
 8001ea2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	f000 80be 	beq.w	800202e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eb2:	4b66      	ldr	r3, [pc, #408]	@ (800204c <HAL_GPIO_Init+0x324>)
 8001eb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eb6:	4a65      	ldr	r2, [pc, #404]	@ (800204c <HAL_GPIO_Init+0x324>)
 8001eb8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ebc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ebe:	4b63      	ldr	r3, [pc, #396]	@ (800204c <HAL_GPIO_Init+0x324>)
 8001ec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ec2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ec6:	60fb      	str	r3, [r7, #12]
 8001ec8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001eca:	4a61      	ldr	r2, [pc, #388]	@ (8002050 <HAL_GPIO_Init+0x328>)
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	089b      	lsrs	r3, r3, #2
 8001ed0:	3302      	adds	r3, #2
 8001ed2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	f003 0303 	and.w	r3, r3, #3
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	220f      	movs	r2, #15
 8001ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee6:	43db      	mvns	r3, r3
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	4013      	ands	r3, r2
 8001eec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a58      	ldr	r2, [pc, #352]	@ (8002054 <HAL_GPIO_Init+0x32c>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d037      	beq.n	8001f66 <HAL_GPIO_Init+0x23e>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a57      	ldr	r2, [pc, #348]	@ (8002058 <HAL_GPIO_Init+0x330>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d031      	beq.n	8001f62 <HAL_GPIO_Init+0x23a>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a56      	ldr	r2, [pc, #344]	@ (800205c <HAL_GPIO_Init+0x334>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d02b      	beq.n	8001f5e <HAL_GPIO_Init+0x236>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a55      	ldr	r2, [pc, #340]	@ (8002060 <HAL_GPIO_Init+0x338>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d025      	beq.n	8001f5a <HAL_GPIO_Init+0x232>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a54      	ldr	r2, [pc, #336]	@ (8002064 <HAL_GPIO_Init+0x33c>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d01f      	beq.n	8001f56 <HAL_GPIO_Init+0x22e>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a53      	ldr	r2, [pc, #332]	@ (8002068 <HAL_GPIO_Init+0x340>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d019      	beq.n	8001f52 <HAL_GPIO_Init+0x22a>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a52      	ldr	r2, [pc, #328]	@ (800206c <HAL_GPIO_Init+0x344>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d013      	beq.n	8001f4e <HAL_GPIO_Init+0x226>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a51      	ldr	r2, [pc, #324]	@ (8002070 <HAL_GPIO_Init+0x348>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d00d      	beq.n	8001f4a <HAL_GPIO_Init+0x222>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a50      	ldr	r2, [pc, #320]	@ (8002074 <HAL_GPIO_Init+0x34c>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d007      	beq.n	8001f46 <HAL_GPIO_Init+0x21e>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a4f      	ldr	r2, [pc, #316]	@ (8002078 <HAL_GPIO_Init+0x350>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d101      	bne.n	8001f42 <HAL_GPIO_Init+0x21a>
 8001f3e:	2309      	movs	r3, #9
 8001f40:	e012      	b.n	8001f68 <HAL_GPIO_Init+0x240>
 8001f42:	230a      	movs	r3, #10
 8001f44:	e010      	b.n	8001f68 <HAL_GPIO_Init+0x240>
 8001f46:	2308      	movs	r3, #8
 8001f48:	e00e      	b.n	8001f68 <HAL_GPIO_Init+0x240>
 8001f4a:	2307      	movs	r3, #7
 8001f4c:	e00c      	b.n	8001f68 <HAL_GPIO_Init+0x240>
 8001f4e:	2306      	movs	r3, #6
 8001f50:	e00a      	b.n	8001f68 <HAL_GPIO_Init+0x240>
 8001f52:	2305      	movs	r3, #5
 8001f54:	e008      	b.n	8001f68 <HAL_GPIO_Init+0x240>
 8001f56:	2304      	movs	r3, #4
 8001f58:	e006      	b.n	8001f68 <HAL_GPIO_Init+0x240>
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e004      	b.n	8001f68 <HAL_GPIO_Init+0x240>
 8001f5e:	2302      	movs	r3, #2
 8001f60:	e002      	b.n	8001f68 <HAL_GPIO_Init+0x240>
 8001f62:	2301      	movs	r3, #1
 8001f64:	e000      	b.n	8001f68 <HAL_GPIO_Init+0x240>
 8001f66:	2300      	movs	r3, #0
 8001f68:	69fa      	ldr	r2, [r7, #28]
 8001f6a:	f002 0203 	and.w	r2, r2, #3
 8001f6e:	0092      	lsls	r2, r2, #2
 8001f70:	4093      	lsls	r3, r2
 8001f72:	69ba      	ldr	r2, [r7, #24]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001f78:	4935      	ldr	r1, [pc, #212]	@ (8002050 <HAL_GPIO_Init+0x328>)
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	089b      	lsrs	r3, r3, #2
 8001f7e:	3302      	adds	r3, #2
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f86:	4b3d      	ldr	r3, [pc, #244]	@ (800207c <HAL_GPIO_Init+0x354>)
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	43db      	mvns	r3, r3
 8001f90:	69ba      	ldr	r2, [r7, #24]
 8001f92:	4013      	ands	r3, r2
 8001f94:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d003      	beq.n	8001faa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001fa2:	69ba      	ldr	r2, [r7, #24]
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001faa:	4a34      	ldr	r2, [pc, #208]	@ (800207c <HAL_GPIO_Init+0x354>)
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fb0:	4b32      	ldr	r3, [pc, #200]	@ (800207c <HAL_GPIO_Init+0x354>)
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	43db      	mvns	r3, r3
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d003      	beq.n	8001fd4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fd4:	4a29      	ldr	r2, [pc, #164]	@ (800207c <HAL_GPIO_Init+0x354>)
 8001fd6:	69bb      	ldr	r3, [r7, #24]
 8001fd8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001fda:	4b28      	ldr	r3, [pc, #160]	@ (800207c <HAL_GPIO_Init+0x354>)
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	43db      	mvns	r3, r3
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d003      	beq.n	8001ffe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001ff6:	69ba      	ldr	r2, [r7, #24]
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ffe:	4a1f      	ldr	r2, [pc, #124]	@ (800207c <HAL_GPIO_Init+0x354>)
 8002000:	69bb      	ldr	r3, [r7, #24]
 8002002:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002004:	4b1d      	ldr	r3, [pc, #116]	@ (800207c <HAL_GPIO_Init+0x354>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	43db      	mvns	r3, r3
 800200e:	69ba      	ldr	r2, [r7, #24]
 8002010:	4013      	ands	r3, r2
 8002012:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800201c:	2b00      	cmp	r3, #0
 800201e:	d003      	beq.n	8002028 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	4313      	orrs	r3, r2
 8002026:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002028:	4a14      	ldr	r2, [pc, #80]	@ (800207c <HAL_GPIO_Init+0x354>)
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	3301      	adds	r3, #1
 8002032:	61fb      	str	r3, [r7, #28]
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	2b0f      	cmp	r3, #15
 8002038:	f67f ae86 	bls.w	8001d48 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800203c:	bf00      	nop
 800203e:	bf00      	nop
 8002040:	3724      	adds	r7, #36	@ 0x24
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	40023800 	.word	0x40023800
 8002050:	40013800 	.word	0x40013800
 8002054:	40020000 	.word	0x40020000
 8002058:	40020400 	.word	0x40020400
 800205c:	40020800 	.word	0x40020800
 8002060:	40020c00 	.word	0x40020c00
 8002064:	40021000 	.word	0x40021000
 8002068:	40021400 	.word	0x40021400
 800206c:	40021800 	.word	0x40021800
 8002070:	40021c00 	.word	0x40021c00
 8002074:	40022000 	.word	0x40022000
 8002078:	40022400 	.word	0x40022400
 800207c:	40013c00 	.word	0x40013c00

08002080 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	460b      	mov	r3, r1
 800208a:	807b      	strh	r3, [r7, #2]
 800208c:	4613      	mov	r3, r2
 800208e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002090:	787b      	ldrb	r3, [r7, #1]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d003      	beq.n	800209e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002096:	887a      	ldrh	r2, [r7, #2]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800209c:	e003      	b.n	80020a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800209e:	887b      	ldrh	r3, [r7, #2]
 80020a0:	041a      	lsls	r2, r3, #16
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	619a      	str	r2, [r3, #24]
}
 80020a6:	bf00      	nop
 80020a8:	370c      	adds	r7, #12
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr

080020b2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80020b2:	b580      	push	{r7, lr}
 80020b4:	b086      	sub	sp, #24
 80020b6:	af02      	add	r7, sp, #8
 80020b8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d101      	bne.n	80020c4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e108      	b.n	80022d6 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d106      	bne.n	80020e4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2200      	movs	r2, #0
 80020da:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f7fe fd52 	bl	8000b88 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2203      	movs	r2, #3
 80020e8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80020f2:	d102      	bne.n	80020fa <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2200      	movs	r2, #0
 80020f8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4618      	mov	r0, r3
 8002100:	f001 ff46 	bl	8003f90 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6818      	ldr	r0, [r3, #0]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	7c1a      	ldrb	r2, [r3, #16]
 800210c:	f88d 2000 	strb.w	r2, [sp]
 8002110:	3304      	adds	r3, #4
 8002112:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002114:	f001 fee2 	bl	8003edc <USB_CoreInit>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d005      	beq.n	800212a <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2202      	movs	r2, #2
 8002122:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e0d5      	b.n	80022d6 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	2100      	movs	r1, #0
 8002130:	4618      	mov	r0, r3
 8002132:	f001 ff3e 	bl	8003fb2 <USB_SetCurrentMode>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d005      	beq.n	8002148 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2202      	movs	r2, #2
 8002140:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e0c6      	b.n	80022d6 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002148:	2300      	movs	r3, #0
 800214a:	73fb      	strb	r3, [r7, #15]
 800214c:	e04a      	b.n	80021e4 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800214e:	7bfa      	ldrb	r2, [r7, #15]
 8002150:	6879      	ldr	r1, [r7, #4]
 8002152:	4613      	mov	r3, r2
 8002154:	00db      	lsls	r3, r3, #3
 8002156:	4413      	add	r3, r2
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	440b      	add	r3, r1
 800215c:	3315      	adds	r3, #21
 800215e:	2201      	movs	r2, #1
 8002160:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002162:	7bfa      	ldrb	r2, [r7, #15]
 8002164:	6879      	ldr	r1, [r7, #4]
 8002166:	4613      	mov	r3, r2
 8002168:	00db      	lsls	r3, r3, #3
 800216a:	4413      	add	r3, r2
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	440b      	add	r3, r1
 8002170:	3314      	adds	r3, #20
 8002172:	7bfa      	ldrb	r2, [r7, #15]
 8002174:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002176:	7bfa      	ldrb	r2, [r7, #15]
 8002178:	7bfb      	ldrb	r3, [r7, #15]
 800217a:	b298      	uxth	r0, r3
 800217c:	6879      	ldr	r1, [r7, #4]
 800217e:	4613      	mov	r3, r2
 8002180:	00db      	lsls	r3, r3, #3
 8002182:	4413      	add	r3, r2
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	440b      	add	r3, r1
 8002188:	332e      	adds	r3, #46	@ 0x2e
 800218a:	4602      	mov	r2, r0
 800218c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800218e:	7bfa      	ldrb	r2, [r7, #15]
 8002190:	6879      	ldr	r1, [r7, #4]
 8002192:	4613      	mov	r3, r2
 8002194:	00db      	lsls	r3, r3, #3
 8002196:	4413      	add	r3, r2
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	440b      	add	r3, r1
 800219c:	3318      	adds	r3, #24
 800219e:	2200      	movs	r2, #0
 80021a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80021a2:	7bfa      	ldrb	r2, [r7, #15]
 80021a4:	6879      	ldr	r1, [r7, #4]
 80021a6:	4613      	mov	r3, r2
 80021a8:	00db      	lsls	r3, r3, #3
 80021aa:	4413      	add	r3, r2
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	440b      	add	r3, r1
 80021b0:	331c      	adds	r3, #28
 80021b2:	2200      	movs	r2, #0
 80021b4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80021b6:	7bfa      	ldrb	r2, [r7, #15]
 80021b8:	6879      	ldr	r1, [r7, #4]
 80021ba:	4613      	mov	r3, r2
 80021bc:	00db      	lsls	r3, r3, #3
 80021be:	4413      	add	r3, r2
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	440b      	add	r3, r1
 80021c4:	3320      	adds	r3, #32
 80021c6:	2200      	movs	r2, #0
 80021c8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80021ca:	7bfa      	ldrb	r2, [r7, #15]
 80021cc:	6879      	ldr	r1, [r7, #4]
 80021ce:	4613      	mov	r3, r2
 80021d0:	00db      	lsls	r3, r3, #3
 80021d2:	4413      	add	r3, r2
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	440b      	add	r3, r1
 80021d8:	3324      	adds	r3, #36	@ 0x24
 80021da:	2200      	movs	r2, #0
 80021dc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021de:	7bfb      	ldrb	r3, [r7, #15]
 80021e0:	3301      	adds	r3, #1
 80021e2:	73fb      	strb	r3, [r7, #15]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	791b      	ldrb	r3, [r3, #4]
 80021e8:	7bfa      	ldrb	r2, [r7, #15]
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d3af      	bcc.n	800214e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021ee:	2300      	movs	r3, #0
 80021f0:	73fb      	strb	r3, [r7, #15]
 80021f2:	e044      	b.n	800227e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80021f4:	7bfa      	ldrb	r2, [r7, #15]
 80021f6:	6879      	ldr	r1, [r7, #4]
 80021f8:	4613      	mov	r3, r2
 80021fa:	00db      	lsls	r3, r3, #3
 80021fc:	4413      	add	r3, r2
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	440b      	add	r3, r1
 8002202:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002206:	2200      	movs	r2, #0
 8002208:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800220a:	7bfa      	ldrb	r2, [r7, #15]
 800220c:	6879      	ldr	r1, [r7, #4]
 800220e:	4613      	mov	r3, r2
 8002210:	00db      	lsls	r3, r3, #3
 8002212:	4413      	add	r3, r2
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	440b      	add	r3, r1
 8002218:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800221c:	7bfa      	ldrb	r2, [r7, #15]
 800221e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002220:	7bfa      	ldrb	r2, [r7, #15]
 8002222:	6879      	ldr	r1, [r7, #4]
 8002224:	4613      	mov	r3, r2
 8002226:	00db      	lsls	r3, r3, #3
 8002228:	4413      	add	r3, r2
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	440b      	add	r3, r1
 800222e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002232:	2200      	movs	r2, #0
 8002234:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002236:	7bfa      	ldrb	r2, [r7, #15]
 8002238:	6879      	ldr	r1, [r7, #4]
 800223a:	4613      	mov	r3, r2
 800223c:	00db      	lsls	r3, r3, #3
 800223e:	4413      	add	r3, r2
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	440b      	add	r3, r1
 8002244:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002248:	2200      	movs	r2, #0
 800224a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800224c:	7bfa      	ldrb	r2, [r7, #15]
 800224e:	6879      	ldr	r1, [r7, #4]
 8002250:	4613      	mov	r3, r2
 8002252:	00db      	lsls	r3, r3, #3
 8002254:	4413      	add	r3, r2
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	440b      	add	r3, r1
 800225a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800225e:	2200      	movs	r2, #0
 8002260:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002262:	7bfa      	ldrb	r2, [r7, #15]
 8002264:	6879      	ldr	r1, [r7, #4]
 8002266:	4613      	mov	r3, r2
 8002268:	00db      	lsls	r3, r3, #3
 800226a:	4413      	add	r3, r2
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	440b      	add	r3, r1
 8002270:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002274:	2200      	movs	r2, #0
 8002276:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002278:	7bfb      	ldrb	r3, [r7, #15]
 800227a:	3301      	adds	r3, #1
 800227c:	73fb      	strb	r3, [r7, #15]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	791b      	ldrb	r3, [r3, #4]
 8002282:	7bfa      	ldrb	r2, [r7, #15]
 8002284:	429a      	cmp	r2, r3
 8002286:	d3b5      	bcc.n	80021f4 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6818      	ldr	r0, [r3, #0]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	7c1a      	ldrb	r2, [r3, #16]
 8002290:	f88d 2000 	strb.w	r2, [sp]
 8002294:	3304      	adds	r3, #4
 8002296:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002298:	f001 fed8 	bl	800404c <USB_DevInit>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d005      	beq.n	80022ae <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2202      	movs	r2, #2
 80022a6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e013      	b.n	80022d6 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	7b1b      	ldrb	r3, [r3, #12]
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d102      	bne.n	80022ca <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f000 f80b 	bl	80022e0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4618      	mov	r0, r3
 80022d0:	f002 f893 	bl	80043fa <USB_DevDisconnect>

  return HAL_OK;
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3710      	adds	r7, #16
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
	...

080022e0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b085      	sub	sp, #20
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2201      	movs	r2, #1
 80022f2:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	699b      	ldr	r3, [r3, #24]
 8002302:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800230e:	4b05      	ldr	r3, [pc, #20]	@ (8002324 <HAL_PCDEx_ActivateLPM+0x44>)
 8002310:	4313      	orrs	r3, r2
 8002312:	68fa      	ldr	r2, [r7, #12]
 8002314:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002316:	2300      	movs	r3, #0
}
 8002318:	4618      	mov	r0, r3
 800231a:	3714      	adds	r7, #20
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr
 8002324:	10000003 	.word	0x10000003

08002328 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800232c:	4b05      	ldr	r3, [pc, #20]	@ (8002344 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a04      	ldr	r2, [pc, #16]	@ (8002344 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002332:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002336:	6013      	str	r3, [r2, #0]
}
 8002338:	bf00      	nop
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	40007000 	.word	0x40007000

08002348 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b086      	sub	sp, #24
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002350:	2300      	movs	r3, #0
 8002352:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d101      	bne.n	800235e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e29b      	b.n	8002896 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0301 	and.w	r3, r3, #1
 8002366:	2b00      	cmp	r3, #0
 8002368:	f000 8087 	beq.w	800247a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800236c:	4b96      	ldr	r3, [pc, #600]	@ (80025c8 <HAL_RCC_OscConfig+0x280>)
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	f003 030c 	and.w	r3, r3, #12
 8002374:	2b04      	cmp	r3, #4
 8002376:	d00c      	beq.n	8002392 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002378:	4b93      	ldr	r3, [pc, #588]	@ (80025c8 <HAL_RCC_OscConfig+0x280>)
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	f003 030c 	and.w	r3, r3, #12
 8002380:	2b08      	cmp	r3, #8
 8002382:	d112      	bne.n	80023aa <HAL_RCC_OscConfig+0x62>
 8002384:	4b90      	ldr	r3, [pc, #576]	@ (80025c8 <HAL_RCC_OscConfig+0x280>)
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800238c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002390:	d10b      	bne.n	80023aa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002392:	4b8d      	ldr	r3, [pc, #564]	@ (80025c8 <HAL_RCC_OscConfig+0x280>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d06c      	beq.n	8002478 <HAL_RCC_OscConfig+0x130>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d168      	bne.n	8002478 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e275      	b.n	8002896 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023b2:	d106      	bne.n	80023c2 <HAL_RCC_OscConfig+0x7a>
 80023b4:	4b84      	ldr	r3, [pc, #528]	@ (80025c8 <HAL_RCC_OscConfig+0x280>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a83      	ldr	r2, [pc, #524]	@ (80025c8 <HAL_RCC_OscConfig+0x280>)
 80023ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023be:	6013      	str	r3, [r2, #0]
 80023c0:	e02e      	b.n	8002420 <HAL_RCC_OscConfig+0xd8>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d10c      	bne.n	80023e4 <HAL_RCC_OscConfig+0x9c>
 80023ca:	4b7f      	ldr	r3, [pc, #508]	@ (80025c8 <HAL_RCC_OscConfig+0x280>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a7e      	ldr	r2, [pc, #504]	@ (80025c8 <HAL_RCC_OscConfig+0x280>)
 80023d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023d4:	6013      	str	r3, [r2, #0]
 80023d6:	4b7c      	ldr	r3, [pc, #496]	@ (80025c8 <HAL_RCC_OscConfig+0x280>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a7b      	ldr	r2, [pc, #492]	@ (80025c8 <HAL_RCC_OscConfig+0x280>)
 80023dc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80023e0:	6013      	str	r3, [r2, #0]
 80023e2:	e01d      	b.n	8002420 <HAL_RCC_OscConfig+0xd8>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80023ec:	d10c      	bne.n	8002408 <HAL_RCC_OscConfig+0xc0>
 80023ee:	4b76      	ldr	r3, [pc, #472]	@ (80025c8 <HAL_RCC_OscConfig+0x280>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a75      	ldr	r2, [pc, #468]	@ (80025c8 <HAL_RCC_OscConfig+0x280>)
 80023f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80023f8:	6013      	str	r3, [r2, #0]
 80023fa:	4b73      	ldr	r3, [pc, #460]	@ (80025c8 <HAL_RCC_OscConfig+0x280>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a72      	ldr	r2, [pc, #456]	@ (80025c8 <HAL_RCC_OscConfig+0x280>)
 8002400:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002404:	6013      	str	r3, [r2, #0]
 8002406:	e00b      	b.n	8002420 <HAL_RCC_OscConfig+0xd8>
 8002408:	4b6f      	ldr	r3, [pc, #444]	@ (80025c8 <HAL_RCC_OscConfig+0x280>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a6e      	ldr	r2, [pc, #440]	@ (80025c8 <HAL_RCC_OscConfig+0x280>)
 800240e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002412:	6013      	str	r3, [r2, #0]
 8002414:	4b6c      	ldr	r3, [pc, #432]	@ (80025c8 <HAL_RCC_OscConfig+0x280>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a6b      	ldr	r2, [pc, #428]	@ (80025c8 <HAL_RCC_OscConfig+0x280>)
 800241a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800241e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d013      	beq.n	8002450 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002428:	f7fe fd98 	bl	8000f5c <HAL_GetTick>
 800242c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800242e:	e008      	b.n	8002442 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002430:	f7fe fd94 	bl	8000f5c <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	2b64      	cmp	r3, #100	@ 0x64
 800243c:	d901      	bls.n	8002442 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e229      	b.n	8002896 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002442:	4b61      	ldr	r3, [pc, #388]	@ (80025c8 <HAL_RCC_OscConfig+0x280>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d0f0      	beq.n	8002430 <HAL_RCC_OscConfig+0xe8>
 800244e:	e014      	b.n	800247a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002450:	f7fe fd84 	bl	8000f5c <HAL_GetTick>
 8002454:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002456:	e008      	b.n	800246a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002458:	f7fe fd80 	bl	8000f5c <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	2b64      	cmp	r3, #100	@ 0x64
 8002464:	d901      	bls.n	800246a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e215      	b.n	8002896 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800246a:	4b57      	ldr	r3, [pc, #348]	@ (80025c8 <HAL_RCC_OscConfig+0x280>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d1f0      	bne.n	8002458 <HAL_RCC_OscConfig+0x110>
 8002476:	e000      	b.n	800247a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002478:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0302 	and.w	r3, r3, #2
 8002482:	2b00      	cmp	r3, #0
 8002484:	d069      	beq.n	800255a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002486:	4b50      	ldr	r3, [pc, #320]	@ (80025c8 <HAL_RCC_OscConfig+0x280>)
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	f003 030c 	and.w	r3, r3, #12
 800248e:	2b00      	cmp	r3, #0
 8002490:	d00b      	beq.n	80024aa <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002492:	4b4d      	ldr	r3, [pc, #308]	@ (80025c8 <HAL_RCC_OscConfig+0x280>)
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	f003 030c 	and.w	r3, r3, #12
 800249a:	2b08      	cmp	r3, #8
 800249c:	d11c      	bne.n	80024d8 <HAL_RCC_OscConfig+0x190>
 800249e:	4b4a      	ldr	r3, [pc, #296]	@ (80025c8 <HAL_RCC_OscConfig+0x280>)
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d116      	bne.n	80024d8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024aa:	4b47      	ldr	r3, [pc, #284]	@ (80025c8 <HAL_RCC_OscConfig+0x280>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0302 	and.w	r3, r3, #2
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d005      	beq.n	80024c2 <HAL_RCC_OscConfig+0x17a>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	68db      	ldr	r3, [r3, #12]
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d001      	beq.n	80024c2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e1e9      	b.n	8002896 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024c2:	4b41      	ldr	r3, [pc, #260]	@ (80025c8 <HAL_RCC_OscConfig+0x280>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	691b      	ldr	r3, [r3, #16]
 80024ce:	00db      	lsls	r3, r3, #3
 80024d0:	493d      	ldr	r1, [pc, #244]	@ (80025c8 <HAL_RCC_OscConfig+0x280>)
 80024d2:	4313      	orrs	r3, r2
 80024d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024d6:	e040      	b.n	800255a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d023      	beq.n	8002528 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024e0:	4b39      	ldr	r3, [pc, #228]	@ (80025c8 <HAL_RCC_OscConfig+0x280>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a38      	ldr	r2, [pc, #224]	@ (80025c8 <HAL_RCC_OscConfig+0x280>)
 80024e6:	f043 0301 	orr.w	r3, r3, #1
 80024ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ec:	f7fe fd36 	bl	8000f5c <HAL_GetTick>
 80024f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024f2:	e008      	b.n	8002506 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024f4:	f7fe fd32 	bl	8000f5c <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d901      	bls.n	8002506 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e1c7      	b.n	8002896 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002506:	4b30      	ldr	r3, [pc, #192]	@ (80025c8 <HAL_RCC_OscConfig+0x280>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0302 	and.w	r3, r3, #2
 800250e:	2b00      	cmp	r3, #0
 8002510:	d0f0      	beq.n	80024f4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002512:	4b2d      	ldr	r3, [pc, #180]	@ (80025c8 <HAL_RCC_OscConfig+0x280>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	691b      	ldr	r3, [r3, #16]
 800251e:	00db      	lsls	r3, r3, #3
 8002520:	4929      	ldr	r1, [pc, #164]	@ (80025c8 <HAL_RCC_OscConfig+0x280>)
 8002522:	4313      	orrs	r3, r2
 8002524:	600b      	str	r3, [r1, #0]
 8002526:	e018      	b.n	800255a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002528:	4b27      	ldr	r3, [pc, #156]	@ (80025c8 <HAL_RCC_OscConfig+0x280>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a26      	ldr	r2, [pc, #152]	@ (80025c8 <HAL_RCC_OscConfig+0x280>)
 800252e:	f023 0301 	bic.w	r3, r3, #1
 8002532:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002534:	f7fe fd12 	bl	8000f5c <HAL_GetTick>
 8002538:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800253a:	e008      	b.n	800254e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800253c:	f7fe fd0e 	bl	8000f5c <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	2b02      	cmp	r3, #2
 8002548:	d901      	bls.n	800254e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e1a3      	b.n	8002896 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800254e:	4b1e      	ldr	r3, [pc, #120]	@ (80025c8 <HAL_RCC_OscConfig+0x280>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0302 	and.w	r3, r3, #2
 8002556:	2b00      	cmp	r3, #0
 8002558:	d1f0      	bne.n	800253c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0308 	and.w	r3, r3, #8
 8002562:	2b00      	cmp	r3, #0
 8002564:	d038      	beq.n	80025d8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	695b      	ldr	r3, [r3, #20]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d019      	beq.n	80025a2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800256e:	4b16      	ldr	r3, [pc, #88]	@ (80025c8 <HAL_RCC_OscConfig+0x280>)
 8002570:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002572:	4a15      	ldr	r2, [pc, #84]	@ (80025c8 <HAL_RCC_OscConfig+0x280>)
 8002574:	f043 0301 	orr.w	r3, r3, #1
 8002578:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800257a:	f7fe fcef 	bl	8000f5c <HAL_GetTick>
 800257e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002580:	e008      	b.n	8002594 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002582:	f7fe fceb 	bl	8000f5c <HAL_GetTick>
 8002586:	4602      	mov	r2, r0
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	2b02      	cmp	r3, #2
 800258e:	d901      	bls.n	8002594 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002590:	2303      	movs	r3, #3
 8002592:	e180      	b.n	8002896 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002594:	4b0c      	ldr	r3, [pc, #48]	@ (80025c8 <HAL_RCC_OscConfig+0x280>)
 8002596:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002598:	f003 0302 	and.w	r3, r3, #2
 800259c:	2b00      	cmp	r3, #0
 800259e:	d0f0      	beq.n	8002582 <HAL_RCC_OscConfig+0x23a>
 80025a0:	e01a      	b.n	80025d8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025a2:	4b09      	ldr	r3, [pc, #36]	@ (80025c8 <HAL_RCC_OscConfig+0x280>)
 80025a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025a6:	4a08      	ldr	r2, [pc, #32]	@ (80025c8 <HAL_RCC_OscConfig+0x280>)
 80025a8:	f023 0301 	bic.w	r3, r3, #1
 80025ac:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025ae:	f7fe fcd5 	bl	8000f5c <HAL_GetTick>
 80025b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025b4:	e00a      	b.n	80025cc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025b6:	f7fe fcd1 	bl	8000f5c <HAL_GetTick>
 80025ba:	4602      	mov	r2, r0
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	d903      	bls.n	80025cc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80025c4:	2303      	movs	r3, #3
 80025c6:	e166      	b.n	8002896 <HAL_RCC_OscConfig+0x54e>
 80025c8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025cc:	4b92      	ldr	r3, [pc, #584]	@ (8002818 <HAL_RCC_OscConfig+0x4d0>)
 80025ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025d0:	f003 0302 	and.w	r3, r3, #2
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d1ee      	bne.n	80025b6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0304 	and.w	r3, r3, #4
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	f000 80a4 	beq.w	800272e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025e6:	4b8c      	ldr	r3, [pc, #560]	@ (8002818 <HAL_RCC_OscConfig+0x4d0>)
 80025e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d10d      	bne.n	800260e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80025f2:	4b89      	ldr	r3, [pc, #548]	@ (8002818 <HAL_RCC_OscConfig+0x4d0>)
 80025f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025f6:	4a88      	ldr	r2, [pc, #544]	@ (8002818 <HAL_RCC_OscConfig+0x4d0>)
 80025f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80025fe:	4b86      	ldr	r3, [pc, #536]	@ (8002818 <HAL_RCC_OscConfig+0x4d0>)
 8002600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002602:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002606:	60bb      	str	r3, [r7, #8]
 8002608:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800260a:	2301      	movs	r3, #1
 800260c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800260e:	4b83      	ldr	r3, [pc, #524]	@ (800281c <HAL_RCC_OscConfig+0x4d4>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002616:	2b00      	cmp	r3, #0
 8002618:	d118      	bne.n	800264c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800261a:	4b80      	ldr	r3, [pc, #512]	@ (800281c <HAL_RCC_OscConfig+0x4d4>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a7f      	ldr	r2, [pc, #508]	@ (800281c <HAL_RCC_OscConfig+0x4d4>)
 8002620:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002624:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002626:	f7fe fc99 	bl	8000f5c <HAL_GetTick>
 800262a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800262c:	e008      	b.n	8002640 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800262e:	f7fe fc95 	bl	8000f5c <HAL_GetTick>
 8002632:	4602      	mov	r2, r0
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	2b64      	cmp	r3, #100	@ 0x64
 800263a:	d901      	bls.n	8002640 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800263c:	2303      	movs	r3, #3
 800263e:	e12a      	b.n	8002896 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002640:	4b76      	ldr	r3, [pc, #472]	@ (800281c <HAL_RCC_OscConfig+0x4d4>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002648:	2b00      	cmp	r3, #0
 800264a:	d0f0      	beq.n	800262e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	2b01      	cmp	r3, #1
 8002652:	d106      	bne.n	8002662 <HAL_RCC_OscConfig+0x31a>
 8002654:	4b70      	ldr	r3, [pc, #448]	@ (8002818 <HAL_RCC_OscConfig+0x4d0>)
 8002656:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002658:	4a6f      	ldr	r2, [pc, #444]	@ (8002818 <HAL_RCC_OscConfig+0x4d0>)
 800265a:	f043 0301 	orr.w	r3, r3, #1
 800265e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002660:	e02d      	b.n	80026be <HAL_RCC_OscConfig+0x376>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d10c      	bne.n	8002684 <HAL_RCC_OscConfig+0x33c>
 800266a:	4b6b      	ldr	r3, [pc, #428]	@ (8002818 <HAL_RCC_OscConfig+0x4d0>)
 800266c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800266e:	4a6a      	ldr	r2, [pc, #424]	@ (8002818 <HAL_RCC_OscConfig+0x4d0>)
 8002670:	f023 0301 	bic.w	r3, r3, #1
 8002674:	6713      	str	r3, [r2, #112]	@ 0x70
 8002676:	4b68      	ldr	r3, [pc, #416]	@ (8002818 <HAL_RCC_OscConfig+0x4d0>)
 8002678:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800267a:	4a67      	ldr	r2, [pc, #412]	@ (8002818 <HAL_RCC_OscConfig+0x4d0>)
 800267c:	f023 0304 	bic.w	r3, r3, #4
 8002680:	6713      	str	r3, [r2, #112]	@ 0x70
 8002682:	e01c      	b.n	80026be <HAL_RCC_OscConfig+0x376>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	2b05      	cmp	r3, #5
 800268a:	d10c      	bne.n	80026a6 <HAL_RCC_OscConfig+0x35e>
 800268c:	4b62      	ldr	r3, [pc, #392]	@ (8002818 <HAL_RCC_OscConfig+0x4d0>)
 800268e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002690:	4a61      	ldr	r2, [pc, #388]	@ (8002818 <HAL_RCC_OscConfig+0x4d0>)
 8002692:	f043 0304 	orr.w	r3, r3, #4
 8002696:	6713      	str	r3, [r2, #112]	@ 0x70
 8002698:	4b5f      	ldr	r3, [pc, #380]	@ (8002818 <HAL_RCC_OscConfig+0x4d0>)
 800269a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800269c:	4a5e      	ldr	r2, [pc, #376]	@ (8002818 <HAL_RCC_OscConfig+0x4d0>)
 800269e:	f043 0301 	orr.w	r3, r3, #1
 80026a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80026a4:	e00b      	b.n	80026be <HAL_RCC_OscConfig+0x376>
 80026a6:	4b5c      	ldr	r3, [pc, #368]	@ (8002818 <HAL_RCC_OscConfig+0x4d0>)
 80026a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026aa:	4a5b      	ldr	r2, [pc, #364]	@ (8002818 <HAL_RCC_OscConfig+0x4d0>)
 80026ac:	f023 0301 	bic.w	r3, r3, #1
 80026b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80026b2:	4b59      	ldr	r3, [pc, #356]	@ (8002818 <HAL_RCC_OscConfig+0x4d0>)
 80026b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026b6:	4a58      	ldr	r2, [pc, #352]	@ (8002818 <HAL_RCC_OscConfig+0x4d0>)
 80026b8:	f023 0304 	bic.w	r3, r3, #4
 80026bc:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d015      	beq.n	80026f2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026c6:	f7fe fc49 	bl	8000f5c <HAL_GetTick>
 80026ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026cc:	e00a      	b.n	80026e4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026ce:	f7fe fc45 	bl	8000f5c <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026dc:	4293      	cmp	r3, r2
 80026de:	d901      	bls.n	80026e4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80026e0:	2303      	movs	r3, #3
 80026e2:	e0d8      	b.n	8002896 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026e4:	4b4c      	ldr	r3, [pc, #304]	@ (8002818 <HAL_RCC_OscConfig+0x4d0>)
 80026e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026e8:	f003 0302 	and.w	r3, r3, #2
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d0ee      	beq.n	80026ce <HAL_RCC_OscConfig+0x386>
 80026f0:	e014      	b.n	800271c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026f2:	f7fe fc33 	bl	8000f5c <HAL_GetTick>
 80026f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026f8:	e00a      	b.n	8002710 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026fa:	f7fe fc2f 	bl	8000f5c <HAL_GetTick>
 80026fe:	4602      	mov	r2, r0
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002708:	4293      	cmp	r3, r2
 800270a:	d901      	bls.n	8002710 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800270c:	2303      	movs	r3, #3
 800270e:	e0c2      	b.n	8002896 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002710:	4b41      	ldr	r3, [pc, #260]	@ (8002818 <HAL_RCC_OscConfig+0x4d0>)
 8002712:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002714:	f003 0302 	and.w	r3, r3, #2
 8002718:	2b00      	cmp	r3, #0
 800271a:	d1ee      	bne.n	80026fa <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800271c:	7dfb      	ldrb	r3, [r7, #23]
 800271e:	2b01      	cmp	r3, #1
 8002720:	d105      	bne.n	800272e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002722:	4b3d      	ldr	r3, [pc, #244]	@ (8002818 <HAL_RCC_OscConfig+0x4d0>)
 8002724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002726:	4a3c      	ldr	r2, [pc, #240]	@ (8002818 <HAL_RCC_OscConfig+0x4d0>)
 8002728:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800272c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	699b      	ldr	r3, [r3, #24]
 8002732:	2b00      	cmp	r3, #0
 8002734:	f000 80ae 	beq.w	8002894 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002738:	4b37      	ldr	r3, [pc, #220]	@ (8002818 <HAL_RCC_OscConfig+0x4d0>)
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	f003 030c 	and.w	r3, r3, #12
 8002740:	2b08      	cmp	r3, #8
 8002742:	d06d      	beq.n	8002820 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	699b      	ldr	r3, [r3, #24]
 8002748:	2b02      	cmp	r3, #2
 800274a:	d14b      	bne.n	80027e4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800274c:	4b32      	ldr	r3, [pc, #200]	@ (8002818 <HAL_RCC_OscConfig+0x4d0>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a31      	ldr	r2, [pc, #196]	@ (8002818 <HAL_RCC_OscConfig+0x4d0>)
 8002752:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002756:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002758:	f7fe fc00 	bl	8000f5c <HAL_GetTick>
 800275c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800275e:	e008      	b.n	8002772 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002760:	f7fe fbfc 	bl	8000f5c <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	2b02      	cmp	r3, #2
 800276c:	d901      	bls.n	8002772 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e091      	b.n	8002896 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002772:	4b29      	ldr	r3, [pc, #164]	@ (8002818 <HAL_RCC_OscConfig+0x4d0>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d1f0      	bne.n	8002760 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	69da      	ldr	r2, [r3, #28]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6a1b      	ldr	r3, [r3, #32]
 8002786:	431a      	orrs	r2, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800278c:	019b      	lsls	r3, r3, #6
 800278e:	431a      	orrs	r2, r3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002794:	085b      	lsrs	r3, r3, #1
 8002796:	3b01      	subs	r3, #1
 8002798:	041b      	lsls	r3, r3, #16
 800279a:	431a      	orrs	r2, r3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027a0:	061b      	lsls	r3, r3, #24
 80027a2:	431a      	orrs	r2, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027a8:	071b      	lsls	r3, r3, #28
 80027aa:	491b      	ldr	r1, [pc, #108]	@ (8002818 <HAL_RCC_OscConfig+0x4d0>)
 80027ac:	4313      	orrs	r3, r2
 80027ae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027b0:	4b19      	ldr	r3, [pc, #100]	@ (8002818 <HAL_RCC_OscConfig+0x4d0>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a18      	ldr	r2, [pc, #96]	@ (8002818 <HAL_RCC_OscConfig+0x4d0>)
 80027b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80027ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027bc:	f7fe fbce 	bl	8000f5c <HAL_GetTick>
 80027c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027c2:	e008      	b.n	80027d6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027c4:	f7fe fbca 	bl	8000f5c <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d901      	bls.n	80027d6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e05f      	b.n	8002896 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027d6:	4b10      	ldr	r3, [pc, #64]	@ (8002818 <HAL_RCC_OscConfig+0x4d0>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d0f0      	beq.n	80027c4 <HAL_RCC_OscConfig+0x47c>
 80027e2:	e057      	b.n	8002894 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027e4:	4b0c      	ldr	r3, [pc, #48]	@ (8002818 <HAL_RCC_OscConfig+0x4d0>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a0b      	ldr	r2, [pc, #44]	@ (8002818 <HAL_RCC_OscConfig+0x4d0>)
 80027ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80027ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027f0:	f7fe fbb4 	bl	8000f5c <HAL_GetTick>
 80027f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027f6:	e008      	b.n	800280a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027f8:	f7fe fbb0 	bl	8000f5c <HAL_GetTick>
 80027fc:	4602      	mov	r2, r0
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	2b02      	cmp	r3, #2
 8002804:	d901      	bls.n	800280a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	e045      	b.n	8002896 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800280a:	4b03      	ldr	r3, [pc, #12]	@ (8002818 <HAL_RCC_OscConfig+0x4d0>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d1f0      	bne.n	80027f8 <HAL_RCC_OscConfig+0x4b0>
 8002816:	e03d      	b.n	8002894 <HAL_RCC_OscConfig+0x54c>
 8002818:	40023800 	.word	0x40023800
 800281c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002820:	4b1f      	ldr	r3, [pc, #124]	@ (80028a0 <HAL_RCC_OscConfig+0x558>)
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	699b      	ldr	r3, [r3, #24]
 800282a:	2b01      	cmp	r3, #1
 800282c:	d030      	beq.n	8002890 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002838:	429a      	cmp	r2, r3
 800283a:	d129      	bne.n	8002890 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002846:	429a      	cmp	r2, r3
 8002848:	d122      	bne.n	8002890 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800284a:	68fa      	ldr	r2, [r7, #12]
 800284c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002850:	4013      	ands	r3, r2
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002856:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002858:	4293      	cmp	r3, r2
 800285a:	d119      	bne.n	8002890 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002866:	085b      	lsrs	r3, r3, #1
 8002868:	3b01      	subs	r3, #1
 800286a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800286c:	429a      	cmp	r2, r3
 800286e:	d10f      	bne.n	8002890 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800287a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800287c:	429a      	cmp	r2, r3
 800287e:	d107      	bne.n	8002890 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800288a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800288c:	429a      	cmp	r2, r3
 800288e:	d001      	beq.n	8002894 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e000      	b.n	8002896 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002894:	2300      	movs	r3, #0
}
 8002896:	4618      	mov	r0, r3
 8002898:	3718      	adds	r7, #24
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	40023800 	.word	0x40023800

080028a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b084      	sub	sp, #16
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80028ae:	2300      	movs	r3, #0
 80028b0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d101      	bne.n	80028bc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e0d0      	b.n	8002a5e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028bc:	4b6a      	ldr	r3, [pc, #424]	@ (8002a68 <HAL_RCC_ClockConfig+0x1c4>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 030f 	and.w	r3, r3, #15
 80028c4:	683a      	ldr	r2, [r7, #0]
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d910      	bls.n	80028ec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ca:	4b67      	ldr	r3, [pc, #412]	@ (8002a68 <HAL_RCC_ClockConfig+0x1c4>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f023 020f 	bic.w	r2, r3, #15
 80028d2:	4965      	ldr	r1, [pc, #404]	@ (8002a68 <HAL_RCC_ClockConfig+0x1c4>)
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028da:	4b63      	ldr	r3, [pc, #396]	@ (8002a68 <HAL_RCC_ClockConfig+0x1c4>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 030f 	and.w	r3, r3, #15
 80028e2:	683a      	ldr	r2, [r7, #0]
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d001      	beq.n	80028ec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e0b8      	b.n	8002a5e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0302 	and.w	r3, r3, #2
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d020      	beq.n	800293a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0304 	and.w	r3, r3, #4
 8002900:	2b00      	cmp	r3, #0
 8002902:	d005      	beq.n	8002910 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002904:	4b59      	ldr	r3, [pc, #356]	@ (8002a6c <HAL_RCC_ClockConfig+0x1c8>)
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	4a58      	ldr	r2, [pc, #352]	@ (8002a6c <HAL_RCC_ClockConfig+0x1c8>)
 800290a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800290e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0308 	and.w	r3, r3, #8
 8002918:	2b00      	cmp	r3, #0
 800291a:	d005      	beq.n	8002928 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800291c:	4b53      	ldr	r3, [pc, #332]	@ (8002a6c <HAL_RCC_ClockConfig+0x1c8>)
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	4a52      	ldr	r2, [pc, #328]	@ (8002a6c <HAL_RCC_ClockConfig+0x1c8>)
 8002922:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002926:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002928:	4b50      	ldr	r3, [pc, #320]	@ (8002a6c <HAL_RCC_ClockConfig+0x1c8>)
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	494d      	ldr	r1, [pc, #308]	@ (8002a6c <HAL_RCC_ClockConfig+0x1c8>)
 8002936:	4313      	orrs	r3, r2
 8002938:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0301 	and.w	r3, r3, #1
 8002942:	2b00      	cmp	r3, #0
 8002944:	d040      	beq.n	80029c8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	2b01      	cmp	r3, #1
 800294c:	d107      	bne.n	800295e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800294e:	4b47      	ldr	r3, [pc, #284]	@ (8002a6c <HAL_RCC_ClockConfig+0x1c8>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d115      	bne.n	8002986 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e07f      	b.n	8002a5e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	2b02      	cmp	r3, #2
 8002964:	d107      	bne.n	8002976 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002966:	4b41      	ldr	r3, [pc, #260]	@ (8002a6c <HAL_RCC_ClockConfig+0x1c8>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d109      	bne.n	8002986 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e073      	b.n	8002a5e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002976:	4b3d      	ldr	r3, [pc, #244]	@ (8002a6c <HAL_RCC_ClockConfig+0x1c8>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0302 	and.w	r3, r3, #2
 800297e:	2b00      	cmp	r3, #0
 8002980:	d101      	bne.n	8002986 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e06b      	b.n	8002a5e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002986:	4b39      	ldr	r3, [pc, #228]	@ (8002a6c <HAL_RCC_ClockConfig+0x1c8>)
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	f023 0203 	bic.w	r2, r3, #3
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	4936      	ldr	r1, [pc, #216]	@ (8002a6c <HAL_RCC_ClockConfig+0x1c8>)
 8002994:	4313      	orrs	r3, r2
 8002996:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002998:	f7fe fae0 	bl	8000f5c <HAL_GetTick>
 800299c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800299e:	e00a      	b.n	80029b6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029a0:	f7fe fadc 	bl	8000f5c <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d901      	bls.n	80029b6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e053      	b.n	8002a5e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029b6:	4b2d      	ldr	r3, [pc, #180]	@ (8002a6c <HAL_RCC_ClockConfig+0x1c8>)
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	f003 020c 	and.w	r2, r3, #12
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d1eb      	bne.n	80029a0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029c8:	4b27      	ldr	r3, [pc, #156]	@ (8002a68 <HAL_RCC_ClockConfig+0x1c4>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 030f 	and.w	r3, r3, #15
 80029d0:	683a      	ldr	r2, [r7, #0]
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d210      	bcs.n	80029f8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029d6:	4b24      	ldr	r3, [pc, #144]	@ (8002a68 <HAL_RCC_ClockConfig+0x1c4>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f023 020f 	bic.w	r2, r3, #15
 80029de:	4922      	ldr	r1, [pc, #136]	@ (8002a68 <HAL_RCC_ClockConfig+0x1c4>)
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029e6:	4b20      	ldr	r3, [pc, #128]	@ (8002a68 <HAL_RCC_ClockConfig+0x1c4>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 030f 	and.w	r3, r3, #15
 80029ee:	683a      	ldr	r2, [r7, #0]
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d001      	beq.n	80029f8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e032      	b.n	8002a5e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 0304 	and.w	r3, r3, #4
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d008      	beq.n	8002a16 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a04:	4b19      	ldr	r3, [pc, #100]	@ (8002a6c <HAL_RCC_ClockConfig+0x1c8>)
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	4916      	ldr	r1, [pc, #88]	@ (8002a6c <HAL_RCC_ClockConfig+0x1c8>)
 8002a12:	4313      	orrs	r3, r2
 8002a14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0308 	and.w	r3, r3, #8
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d009      	beq.n	8002a36 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a22:	4b12      	ldr	r3, [pc, #72]	@ (8002a6c <HAL_RCC_ClockConfig+0x1c8>)
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	691b      	ldr	r3, [r3, #16]
 8002a2e:	00db      	lsls	r3, r3, #3
 8002a30:	490e      	ldr	r1, [pc, #56]	@ (8002a6c <HAL_RCC_ClockConfig+0x1c8>)
 8002a32:	4313      	orrs	r3, r2
 8002a34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a36:	f000 f821 	bl	8002a7c <HAL_RCC_GetSysClockFreq>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	4b0b      	ldr	r3, [pc, #44]	@ (8002a6c <HAL_RCC_ClockConfig+0x1c8>)
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	091b      	lsrs	r3, r3, #4
 8002a42:	f003 030f 	and.w	r3, r3, #15
 8002a46:	490a      	ldr	r1, [pc, #40]	@ (8002a70 <HAL_RCC_ClockConfig+0x1cc>)
 8002a48:	5ccb      	ldrb	r3, [r1, r3]
 8002a4a:	fa22 f303 	lsr.w	r3, r2, r3
 8002a4e:	4a09      	ldr	r2, [pc, #36]	@ (8002a74 <HAL_RCC_ClockConfig+0x1d0>)
 8002a50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a52:	4b09      	ldr	r3, [pc, #36]	@ (8002a78 <HAL_RCC_ClockConfig+0x1d4>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4618      	mov	r0, r3
 8002a58:	f7fe fa3c 	bl	8000ed4 <HAL_InitTick>

  return HAL_OK;
 8002a5c:	2300      	movs	r3, #0
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3710      	adds	r7, #16
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	40023c00 	.word	0x40023c00
 8002a6c:	40023800 	.word	0x40023800
 8002a70:	0800452c 	.word	0x0800452c
 8002a74:	20000008 	.word	0x20000008
 8002a78:	2000000c 	.word	0x2000000c

08002a7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a80:	b094      	sub	sp, #80	@ 0x50
 8002a82:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002a84:	2300      	movs	r3, #0
 8002a86:	647b      	str	r3, [r7, #68]	@ 0x44
 8002a88:	2300      	movs	r3, #0
 8002a8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8002a90:	2300      	movs	r3, #0
 8002a92:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a94:	4b79      	ldr	r3, [pc, #484]	@ (8002c7c <HAL_RCC_GetSysClockFreq+0x200>)
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	f003 030c 	and.w	r3, r3, #12
 8002a9c:	2b08      	cmp	r3, #8
 8002a9e:	d00d      	beq.n	8002abc <HAL_RCC_GetSysClockFreq+0x40>
 8002aa0:	2b08      	cmp	r3, #8
 8002aa2:	f200 80e1 	bhi.w	8002c68 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d002      	beq.n	8002ab0 <HAL_RCC_GetSysClockFreq+0x34>
 8002aaa:	2b04      	cmp	r3, #4
 8002aac:	d003      	beq.n	8002ab6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002aae:	e0db      	b.n	8002c68 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ab0:	4b73      	ldr	r3, [pc, #460]	@ (8002c80 <HAL_RCC_GetSysClockFreq+0x204>)
 8002ab2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002ab4:	e0db      	b.n	8002c6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ab6:	4b73      	ldr	r3, [pc, #460]	@ (8002c84 <HAL_RCC_GetSysClockFreq+0x208>)
 8002ab8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002aba:	e0d8      	b.n	8002c6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002abc:	4b6f      	ldr	r3, [pc, #444]	@ (8002c7c <HAL_RCC_GetSysClockFreq+0x200>)
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002ac4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002ac6:	4b6d      	ldr	r3, [pc, #436]	@ (8002c7c <HAL_RCC_GetSysClockFreq+0x200>)
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d063      	beq.n	8002b9a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ad2:	4b6a      	ldr	r3, [pc, #424]	@ (8002c7c <HAL_RCC_GetSysClockFreq+0x200>)
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	099b      	lsrs	r3, r3, #6
 8002ad8:	2200      	movs	r2, #0
 8002ada:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002adc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002ade:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ae0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ae4:	633b      	str	r3, [r7, #48]	@ 0x30
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	637b      	str	r3, [r7, #52]	@ 0x34
 8002aea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002aee:	4622      	mov	r2, r4
 8002af0:	462b      	mov	r3, r5
 8002af2:	f04f 0000 	mov.w	r0, #0
 8002af6:	f04f 0100 	mov.w	r1, #0
 8002afa:	0159      	lsls	r1, r3, #5
 8002afc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b00:	0150      	lsls	r0, r2, #5
 8002b02:	4602      	mov	r2, r0
 8002b04:	460b      	mov	r3, r1
 8002b06:	4621      	mov	r1, r4
 8002b08:	1a51      	subs	r1, r2, r1
 8002b0a:	6139      	str	r1, [r7, #16]
 8002b0c:	4629      	mov	r1, r5
 8002b0e:	eb63 0301 	sbc.w	r3, r3, r1
 8002b12:	617b      	str	r3, [r7, #20]
 8002b14:	f04f 0200 	mov.w	r2, #0
 8002b18:	f04f 0300 	mov.w	r3, #0
 8002b1c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002b20:	4659      	mov	r1, fp
 8002b22:	018b      	lsls	r3, r1, #6
 8002b24:	4651      	mov	r1, sl
 8002b26:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b2a:	4651      	mov	r1, sl
 8002b2c:	018a      	lsls	r2, r1, #6
 8002b2e:	4651      	mov	r1, sl
 8002b30:	ebb2 0801 	subs.w	r8, r2, r1
 8002b34:	4659      	mov	r1, fp
 8002b36:	eb63 0901 	sbc.w	r9, r3, r1
 8002b3a:	f04f 0200 	mov.w	r2, #0
 8002b3e:	f04f 0300 	mov.w	r3, #0
 8002b42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b4e:	4690      	mov	r8, r2
 8002b50:	4699      	mov	r9, r3
 8002b52:	4623      	mov	r3, r4
 8002b54:	eb18 0303 	adds.w	r3, r8, r3
 8002b58:	60bb      	str	r3, [r7, #8]
 8002b5a:	462b      	mov	r3, r5
 8002b5c:	eb49 0303 	adc.w	r3, r9, r3
 8002b60:	60fb      	str	r3, [r7, #12]
 8002b62:	f04f 0200 	mov.w	r2, #0
 8002b66:	f04f 0300 	mov.w	r3, #0
 8002b6a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002b6e:	4629      	mov	r1, r5
 8002b70:	024b      	lsls	r3, r1, #9
 8002b72:	4621      	mov	r1, r4
 8002b74:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002b78:	4621      	mov	r1, r4
 8002b7a:	024a      	lsls	r2, r1, #9
 8002b7c:	4610      	mov	r0, r2
 8002b7e:	4619      	mov	r1, r3
 8002b80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b82:	2200      	movs	r2, #0
 8002b84:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002b86:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002b88:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002b8c:	f7fd fb54 	bl	8000238 <__aeabi_uldivmod>
 8002b90:	4602      	mov	r2, r0
 8002b92:	460b      	mov	r3, r1
 8002b94:	4613      	mov	r3, r2
 8002b96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002b98:	e058      	b.n	8002c4c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b9a:	4b38      	ldr	r3, [pc, #224]	@ (8002c7c <HAL_RCC_GetSysClockFreq+0x200>)
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	099b      	lsrs	r3, r3, #6
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	4611      	mov	r1, r2
 8002ba6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002baa:	623b      	str	r3, [r7, #32]
 8002bac:	2300      	movs	r3, #0
 8002bae:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bb0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002bb4:	4642      	mov	r2, r8
 8002bb6:	464b      	mov	r3, r9
 8002bb8:	f04f 0000 	mov.w	r0, #0
 8002bbc:	f04f 0100 	mov.w	r1, #0
 8002bc0:	0159      	lsls	r1, r3, #5
 8002bc2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bc6:	0150      	lsls	r0, r2, #5
 8002bc8:	4602      	mov	r2, r0
 8002bca:	460b      	mov	r3, r1
 8002bcc:	4641      	mov	r1, r8
 8002bce:	ebb2 0a01 	subs.w	sl, r2, r1
 8002bd2:	4649      	mov	r1, r9
 8002bd4:	eb63 0b01 	sbc.w	fp, r3, r1
 8002bd8:	f04f 0200 	mov.w	r2, #0
 8002bdc:	f04f 0300 	mov.w	r3, #0
 8002be0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002be4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002be8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002bec:	ebb2 040a 	subs.w	r4, r2, sl
 8002bf0:	eb63 050b 	sbc.w	r5, r3, fp
 8002bf4:	f04f 0200 	mov.w	r2, #0
 8002bf8:	f04f 0300 	mov.w	r3, #0
 8002bfc:	00eb      	lsls	r3, r5, #3
 8002bfe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c02:	00e2      	lsls	r2, r4, #3
 8002c04:	4614      	mov	r4, r2
 8002c06:	461d      	mov	r5, r3
 8002c08:	4643      	mov	r3, r8
 8002c0a:	18e3      	adds	r3, r4, r3
 8002c0c:	603b      	str	r3, [r7, #0]
 8002c0e:	464b      	mov	r3, r9
 8002c10:	eb45 0303 	adc.w	r3, r5, r3
 8002c14:	607b      	str	r3, [r7, #4]
 8002c16:	f04f 0200 	mov.w	r2, #0
 8002c1a:	f04f 0300 	mov.w	r3, #0
 8002c1e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c22:	4629      	mov	r1, r5
 8002c24:	028b      	lsls	r3, r1, #10
 8002c26:	4621      	mov	r1, r4
 8002c28:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c2c:	4621      	mov	r1, r4
 8002c2e:	028a      	lsls	r2, r1, #10
 8002c30:	4610      	mov	r0, r2
 8002c32:	4619      	mov	r1, r3
 8002c34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c36:	2200      	movs	r2, #0
 8002c38:	61bb      	str	r3, [r7, #24]
 8002c3a:	61fa      	str	r2, [r7, #28]
 8002c3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c40:	f7fd fafa 	bl	8000238 <__aeabi_uldivmod>
 8002c44:	4602      	mov	r2, r0
 8002c46:	460b      	mov	r3, r1
 8002c48:	4613      	mov	r3, r2
 8002c4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002c4c:	4b0b      	ldr	r3, [pc, #44]	@ (8002c7c <HAL_RCC_GetSysClockFreq+0x200>)
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	0c1b      	lsrs	r3, r3, #16
 8002c52:	f003 0303 	and.w	r3, r3, #3
 8002c56:	3301      	adds	r3, #1
 8002c58:	005b      	lsls	r3, r3, #1
 8002c5a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002c5c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002c5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c60:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c64:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002c66:	e002      	b.n	8002c6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c68:	4b05      	ldr	r3, [pc, #20]	@ (8002c80 <HAL_RCC_GetSysClockFreq+0x204>)
 8002c6a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002c6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3750      	adds	r7, #80	@ 0x50
 8002c74:	46bd      	mov	sp, r7
 8002c76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c7a:	bf00      	nop
 8002c7c:	40023800 	.word	0x40023800
 8002c80:	00f42400 	.word	0x00f42400
 8002c84:	007a1200 	.word	0x007a1200

08002c88 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c8c:	4b03      	ldr	r3, [pc, #12]	@ (8002c9c <HAL_RCC_GetHCLKFreq+0x14>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop
 8002c9c:	20000008 	.word	0x20000008

08002ca0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ca4:	f7ff fff0 	bl	8002c88 <HAL_RCC_GetHCLKFreq>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	4b05      	ldr	r3, [pc, #20]	@ (8002cc0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	0a9b      	lsrs	r3, r3, #10
 8002cb0:	f003 0307 	and.w	r3, r3, #7
 8002cb4:	4903      	ldr	r1, [pc, #12]	@ (8002cc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cb6:	5ccb      	ldrb	r3, [r1, r3]
 8002cb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	40023800 	.word	0x40023800
 8002cc4:	0800453c 	.word	0x0800453c

08002cc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ccc:	f7ff ffdc 	bl	8002c88 <HAL_RCC_GetHCLKFreq>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	4b05      	ldr	r3, [pc, #20]	@ (8002ce8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	0b5b      	lsrs	r3, r3, #13
 8002cd8:	f003 0307 	and.w	r3, r3, #7
 8002cdc:	4903      	ldr	r1, [pc, #12]	@ (8002cec <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cde:	5ccb      	ldrb	r3, [r1, r3]
 8002ce0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	40023800 	.word	0x40023800
 8002cec:	0800453c 	.word	0x0800453c

08002cf0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b088      	sub	sp, #32
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002d00:	2300      	movs	r3, #0
 8002d02:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002d04:	2300      	movs	r3, #0
 8002d06:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0301 	and.w	r3, r3, #1
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d012      	beq.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002d18:	4b69      	ldr	r3, [pc, #420]	@ (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	4a68      	ldr	r2, [pc, #416]	@ (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d1e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002d22:	6093      	str	r3, [r2, #8]
 8002d24:	4b66      	ldr	r3, [pc, #408]	@ (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d26:	689a      	ldr	r2, [r3, #8]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d2c:	4964      	ldr	r1, [pc, #400]	@ (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d101      	bne.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d017      	beq.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d4a:	4b5d      	ldr	r3, [pc, #372]	@ (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002d50:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d58:	4959      	ldr	r1, [pc, #356]	@ (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d64:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002d68:	d101      	bne.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d101      	bne.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002d76:	2301      	movs	r3, #1
 8002d78:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d017      	beq.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002d86:	4b4e      	ldr	r3, [pc, #312]	@ (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d88:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002d8c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d94:	494a      	ldr	r1, [pc, #296]	@ (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d96:	4313      	orrs	r3, r2
 8002d98:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002da0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002da4:	d101      	bne.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002da6:	2301      	movs	r3, #1
 8002da8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d101      	bne.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002db2:	2301      	movs	r3, #1
 8002db4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d001      	beq.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0320 	and.w	r3, r3, #32
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	f000 808b 	beq.w	8002eea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002dd4:	4b3a      	ldr	r3, [pc, #232]	@ (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dd8:	4a39      	ldr	r2, [pc, #228]	@ (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dda:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002dde:	6413      	str	r3, [r2, #64]	@ 0x40
 8002de0:	4b37      	ldr	r3, [pc, #220]	@ (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002de4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002de8:	60bb      	str	r3, [r7, #8]
 8002dea:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002dec:	4b35      	ldr	r3, [pc, #212]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a34      	ldr	r2, [pc, #208]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002df2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002df6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002df8:	f7fe f8b0 	bl	8000f5c <HAL_GetTick>
 8002dfc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002dfe:	e008      	b.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e00:	f7fe f8ac 	bl	8000f5c <HAL_GetTick>
 8002e04:	4602      	mov	r2, r0
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	2b64      	cmp	r3, #100	@ 0x64
 8002e0c:	d901      	bls.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e38f      	b.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002e12:	4b2c      	ldr	r3, [pc, #176]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d0f0      	beq.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e1e:	4b28      	ldr	r3, [pc, #160]	@ (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e26:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d035      	beq.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e36:	693a      	ldr	r2, [r7, #16]
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d02e      	beq.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e3c:	4b20      	ldr	r3, [pc, #128]	@ (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e40:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e44:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e46:	4b1e      	ldr	r3, [pc, #120]	@ (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e4a:	4a1d      	ldr	r2, [pc, #116]	@ (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e50:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e52:	4b1b      	ldr	r3, [pc, #108]	@ (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e56:	4a1a      	ldr	r2, [pc, #104]	@ (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e58:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e5c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002e5e:	4a18      	ldr	r2, [pc, #96]	@ (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002e64:	4b16      	ldr	r3, [pc, #88]	@ (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e68:	f003 0301 	and.w	r3, r3, #1
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d114      	bne.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e70:	f7fe f874 	bl	8000f5c <HAL_GetTick>
 8002e74:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e76:	e00a      	b.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e78:	f7fe f870 	bl	8000f5c <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d901      	bls.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	e351      	b.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e8e:	4b0c      	ldr	r3, [pc, #48]	@ (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e92:	f003 0302 	and.w	r3, r3, #2
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d0ee      	beq.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ea2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002ea6:	d111      	bne.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002ea8:	4b05      	ldr	r3, [pc, #20]	@ (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002eb4:	4b04      	ldr	r3, [pc, #16]	@ (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002eb6:	400b      	ands	r3, r1
 8002eb8:	4901      	ldr	r1, [pc, #4]	@ (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	608b      	str	r3, [r1, #8]
 8002ebe:	e00b      	b.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002ec0:	40023800 	.word	0x40023800
 8002ec4:	40007000 	.word	0x40007000
 8002ec8:	0ffffcff 	.word	0x0ffffcff
 8002ecc:	4bac      	ldr	r3, [pc, #688]	@ (8003180 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	4aab      	ldr	r2, [pc, #684]	@ (8003180 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ed2:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002ed6:	6093      	str	r3, [r2, #8]
 8002ed8:	4ba9      	ldr	r3, [pc, #676]	@ (8003180 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002eda:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ee0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ee4:	49a6      	ldr	r1, [pc, #664]	@ (8003180 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0310 	and.w	r3, r3, #16
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d010      	beq.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002ef6:	4ba2      	ldr	r3, [pc, #648]	@ (8003180 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ef8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002efc:	4aa0      	ldr	r2, [pc, #640]	@ (8003180 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002efe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f02:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002f06:	4b9e      	ldr	r3, [pc, #632]	@ (8003180 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f08:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f10:	499b      	ldr	r1, [pc, #620]	@ (8003180 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f12:	4313      	orrs	r3, r2
 8002f14:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d00a      	beq.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f24:	4b96      	ldr	r3, [pc, #600]	@ (8003180 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f2a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002f32:	4993      	ldr	r1, [pc, #588]	@ (8003180 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f34:	4313      	orrs	r3, r2
 8002f36:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d00a      	beq.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002f46:	4b8e      	ldr	r3, [pc, #568]	@ (8003180 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f4c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002f54:	498a      	ldr	r1, [pc, #552]	@ (8003180 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f56:	4313      	orrs	r3, r2
 8002f58:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d00a      	beq.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f68:	4b85      	ldr	r3, [pc, #532]	@ (8003180 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f6e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f76:	4982      	ldr	r1, [pc, #520]	@ (8003180 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d00a      	beq.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002f8a:	4b7d      	ldr	r3, [pc, #500]	@ (8003180 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f90:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f98:	4979      	ldr	r1, [pc, #484]	@ (8003180 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d00a      	beq.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002fac:	4b74      	ldr	r3, [pc, #464]	@ (8003180 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fb2:	f023 0203 	bic.w	r2, r3, #3
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fba:	4971      	ldr	r1, [pc, #452]	@ (8003180 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d00a      	beq.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002fce:	4b6c      	ldr	r3, [pc, #432]	@ (8003180 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fd4:	f023 020c 	bic.w	r2, r3, #12
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fdc:	4968      	ldr	r1, [pc, #416]	@ (8003180 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d00a      	beq.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002ff0:	4b63      	ldr	r3, [pc, #396]	@ (8003180 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ff6:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ffe:	4960      	ldr	r1, [pc, #384]	@ (8003180 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003000:	4313      	orrs	r3, r2
 8003002:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800300e:	2b00      	cmp	r3, #0
 8003010:	d00a      	beq.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003012:	4b5b      	ldr	r3, [pc, #364]	@ (8003180 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003014:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003018:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003020:	4957      	ldr	r1, [pc, #348]	@ (8003180 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003022:	4313      	orrs	r3, r2
 8003024:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003030:	2b00      	cmp	r3, #0
 8003032:	d00a      	beq.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003034:	4b52      	ldr	r3, [pc, #328]	@ (8003180 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003036:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800303a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003042:	494f      	ldr	r1, [pc, #316]	@ (8003180 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003044:	4313      	orrs	r3, r2
 8003046:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003052:	2b00      	cmp	r3, #0
 8003054:	d00a      	beq.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003056:	4b4a      	ldr	r3, [pc, #296]	@ (8003180 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003058:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800305c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003064:	4946      	ldr	r1, [pc, #280]	@ (8003180 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003066:	4313      	orrs	r3, r2
 8003068:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003074:	2b00      	cmp	r3, #0
 8003076:	d00a      	beq.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003078:	4b41      	ldr	r3, [pc, #260]	@ (8003180 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800307a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800307e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003086:	493e      	ldr	r1, [pc, #248]	@ (8003180 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003088:	4313      	orrs	r3, r2
 800308a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d00a      	beq.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800309a:	4b39      	ldr	r3, [pc, #228]	@ (8003180 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800309c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030a0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030a8:	4935      	ldr	r1, [pc, #212]	@ (8003180 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030aa:	4313      	orrs	r3, r2
 80030ac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d00a      	beq.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80030bc:	4b30      	ldr	r3, [pc, #192]	@ (8003180 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030c2:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80030ca:	492d      	ldr	r1, [pc, #180]	@ (8003180 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030cc:	4313      	orrs	r3, r2
 80030ce:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d011      	beq.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80030de:	4b28      	ldr	r3, [pc, #160]	@ (8003180 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030e4:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80030ec:	4924      	ldr	r1, [pc, #144]	@ (8003180 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030ee:	4313      	orrs	r3, r2
 80030f0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80030f8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80030fc:	d101      	bne.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80030fe:	2301      	movs	r3, #1
 8003100:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0308 	and.w	r3, r3, #8
 800310a:	2b00      	cmp	r3, #0
 800310c:	d001      	beq.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800310e:	2301      	movs	r3, #1
 8003110:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d00a      	beq.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800311e:	4b18      	ldr	r3, [pc, #96]	@ (8003180 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003120:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003124:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800312c:	4914      	ldr	r1, [pc, #80]	@ (8003180 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800312e:	4313      	orrs	r3, r2
 8003130:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800313c:	2b00      	cmp	r3, #0
 800313e:	d00b      	beq.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003140:	4b0f      	ldr	r3, [pc, #60]	@ (8003180 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003142:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003146:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003150:	490b      	ldr	r1, [pc, #44]	@ (8003180 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003152:	4313      	orrs	r3, r2
 8003154:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003160:	2b00      	cmp	r3, #0
 8003162:	d00f      	beq.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003164:	4b06      	ldr	r3, [pc, #24]	@ (8003180 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003166:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800316a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003174:	4902      	ldr	r1, [pc, #8]	@ (8003180 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003176:	4313      	orrs	r3, r2
 8003178:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800317c:	e002      	b.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800317e:	bf00      	nop
 8003180:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800318c:	2b00      	cmp	r3, #0
 800318e:	d00b      	beq.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003190:	4b8a      	ldr	r3, [pc, #552]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003192:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003196:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031a0:	4986      	ldr	r1, [pc, #536]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031a2:	4313      	orrs	r3, r2
 80031a4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d00b      	beq.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80031b4:	4b81      	ldr	r3, [pc, #516]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80031ba:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80031c4:	497d      	ldr	r1, [pc, #500]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d006      	beq.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	f000 80d6 	beq.w	800338c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80031e0:	4b76      	ldr	r3, [pc, #472]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a75      	ldr	r2, [pc, #468]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031e6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80031ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031ec:	f7fd feb6 	bl	8000f5c <HAL_GetTick>
 80031f0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80031f2:	e008      	b.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80031f4:	f7fd feb2 	bl	8000f5c <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	2b64      	cmp	r3, #100	@ 0x64
 8003200:	d901      	bls.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e195      	b.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003206:	4b6d      	ldr	r3, [pc, #436]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d1f0      	bne.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0301 	and.w	r3, r3, #1
 800321a:	2b00      	cmp	r3, #0
 800321c:	d021      	beq.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003222:	2b00      	cmp	r3, #0
 8003224:	d11d      	bne.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003226:	4b65      	ldr	r3, [pc, #404]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003228:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800322c:	0c1b      	lsrs	r3, r3, #16
 800322e:	f003 0303 	and.w	r3, r3, #3
 8003232:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003234:	4b61      	ldr	r3, [pc, #388]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003236:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800323a:	0e1b      	lsrs	r3, r3, #24
 800323c:	f003 030f 	and.w	r3, r3, #15
 8003240:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	019a      	lsls	r2, r3, #6
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	041b      	lsls	r3, r3, #16
 800324c:	431a      	orrs	r2, r3
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	061b      	lsls	r3, r3, #24
 8003252:	431a      	orrs	r2, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	071b      	lsls	r3, r3, #28
 800325a:	4958      	ldr	r1, [pc, #352]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800325c:	4313      	orrs	r3, r2
 800325e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d004      	beq.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003272:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003276:	d00a      	beq.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003280:	2b00      	cmp	r3, #0
 8003282:	d02e      	beq.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003288:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800328c:	d129      	bne.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800328e:	4b4b      	ldr	r3, [pc, #300]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003290:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003294:	0c1b      	lsrs	r3, r3, #16
 8003296:	f003 0303 	and.w	r3, r3, #3
 800329a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800329c:	4b47      	ldr	r3, [pc, #284]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800329e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80032a2:	0f1b      	lsrs	r3, r3, #28
 80032a4:	f003 0307 	and.w	r3, r3, #7
 80032a8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	019a      	lsls	r2, r3, #6
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	041b      	lsls	r3, r3, #16
 80032b4:	431a      	orrs	r2, r3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	68db      	ldr	r3, [r3, #12]
 80032ba:	061b      	lsls	r3, r3, #24
 80032bc:	431a      	orrs	r2, r3
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	071b      	lsls	r3, r3, #28
 80032c2:	493e      	ldr	r1, [pc, #248]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032c4:	4313      	orrs	r3, r2
 80032c6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80032ca:	4b3c      	ldr	r3, [pc, #240]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80032d0:	f023 021f 	bic.w	r2, r3, #31
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032d8:	3b01      	subs	r3, #1
 80032da:	4938      	ldr	r1, [pc, #224]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032dc:	4313      	orrs	r3, r2
 80032de:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d01d      	beq.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80032ee:	4b33      	ldr	r3, [pc, #204]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80032f4:	0e1b      	lsrs	r3, r3, #24
 80032f6:	f003 030f 	and.w	r3, r3, #15
 80032fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80032fc:	4b2f      	ldr	r3, [pc, #188]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003302:	0f1b      	lsrs	r3, r3, #28
 8003304:	f003 0307 	and.w	r3, r3, #7
 8003308:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	019a      	lsls	r2, r3, #6
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	691b      	ldr	r3, [r3, #16]
 8003314:	041b      	lsls	r3, r3, #16
 8003316:	431a      	orrs	r2, r3
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	061b      	lsls	r3, r3, #24
 800331c:	431a      	orrs	r2, r3
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	071b      	lsls	r3, r3, #28
 8003322:	4926      	ldr	r1, [pc, #152]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003324:	4313      	orrs	r3, r2
 8003326:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d011      	beq.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	019a      	lsls	r2, r3, #6
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	691b      	ldr	r3, [r3, #16]
 8003340:	041b      	lsls	r3, r3, #16
 8003342:	431a      	orrs	r2, r3
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	061b      	lsls	r3, r3, #24
 800334a:	431a      	orrs	r2, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	071b      	lsls	r3, r3, #28
 8003352:	491a      	ldr	r1, [pc, #104]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003354:	4313      	orrs	r3, r2
 8003356:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800335a:	4b18      	ldr	r3, [pc, #96]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a17      	ldr	r2, [pc, #92]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003360:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003364:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003366:	f7fd fdf9 	bl	8000f5c <HAL_GetTick>
 800336a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800336c:	e008      	b.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800336e:	f7fd fdf5 	bl	8000f5c <HAL_GetTick>
 8003372:	4602      	mov	r2, r0
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	2b64      	cmp	r3, #100	@ 0x64
 800337a:	d901      	bls.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800337c:	2303      	movs	r3, #3
 800337e:	e0d8      	b.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003380:	4b0e      	ldr	r3, [pc, #56]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003388:	2b00      	cmp	r3, #0
 800338a:	d0f0      	beq.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800338c:	69bb      	ldr	r3, [r7, #24]
 800338e:	2b01      	cmp	r3, #1
 8003390:	f040 80ce 	bne.w	8003530 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003394:	4b09      	ldr	r3, [pc, #36]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a08      	ldr	r2, [pc, #32]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800339a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800339e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033a0:	f7fd fddc 	bl	8000f5c <HAL_GetTick>
 80033a4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80033a6:	e00b      	b.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80033a8:	f7fd fdd8 	bl	8000f5c <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	2b64      	cmp	r3, #100	@ 0x64
 80033b4:	d904      	bls.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e0bb      	b.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80033ba:	bf00      	nop
 80033bc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80033c0:	4b5e      	ldr	r3, [pc, #376]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80033c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80033cc:	d0ec      	beq.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d003      	beq.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d009      	beq.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d02e      	beq.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d12a      	bne.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80033f6:	4b51      	ldr	r3, [pc, #324]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033fc:	0c1b      	lsrs	r3, r3, #16
 80033fe:	f003 0303 	and.w	r3, r3, #3
 8003402:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003404:	4b4d      	ldr	r3, [pc, #308]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003406:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800340a:	0f1b      	lsrs	r3, r3, #28
 800340c:	f003 0307 	and.w	r3, r3, #7
 8003410:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	695b      	ldr	r3, [r3, #20]
 8003416:	019a      	lsls	r2, r3, #6
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	041b      	lsls	r3, r3, #16
 800341c:	431a      	orrs	r2, r3
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	699b      	ldr	r3, [r3, #24]
 8003422:	061b      	lsls	r3, r3, #24
 8003424:	431a      	orrs	r2, r3
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	071b      	lsls	r3, r3, #28
 800342a:	4944      	ldr	r1, [pc, #272]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800342c:	4313      	orrs	r3, r2
 800342e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003432:	4b42      	ldr	r3, [pc, #264]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003434:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003438:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003440:	3b01      	subs	r3, #1
 8003442:	021b      	lsls	r3, r3, #8
 8003444:	493d      	ldr	r1, [pc, #244]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003446:	4313      	orrs	r3, r2
 8003448:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003454:	2b00      	cmp	r3, #0
 8003456:	d022      	beq.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800345c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003460:	d11d      	bne.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003462:	4b36      	ldr	r3, [pc, #216]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003464:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003468:	0e1b      	lsrs	r3, r3, #24
 800346a:	f003 030f 	and.w	r3, r3, #15
 800346e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003470:	4b32      	ldr	r3, [pc, #200]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003472:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003476:	0f1b      	lsrs	r3, r3, #28
 8003478:	f003 0307 	and.w	r3, r3, #7
 800347c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	695b      	ldr	r3, [r3, #20]
 8003482:	019a      	lsls	r2, r3, #6
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6a1b      	ldr	r3, [r3, #32]
 8003488:	041b      	lsls	r3, r3, #16
 800348a:	431a      	orrs	r2, r3
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	061b      	lsls	r3, r3, #24
 8003490:	431a      	orrs	r2, r3
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	071b      	lsls	r3, r3, #28
 8003496:	4929      	ldr	r1, [pc, #164]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003498:	4313      	orrs	r3, r2
 800349a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0308 	and.w	r3, r3, #8
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d028      	beq.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80034aa:	4b24      	ldr	r3, [pc, #144]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80034ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034b0:	0e1b      	lsrs	r3, r3, #24
 80034b2:	f003 030f 	and.w	r3, r3, #15
 80034b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80034b8:	4b20      	ldr	r3, [pc, #128]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80034ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034be:	0c1b      	lsrs	r3, r3, #16
 80034c0:	f003 0303 	and.w	r3, r3, #3
 80034c4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	695b      	ldr	r3, [r3, #20]
 80034ca:	019a      	lsls	r2, r3, #6
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	041b      	lsls	r3, r3, #16
 80034d0:	431a      	orrs	r2, r3
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	061b      	lsls	r3, r3, #24
 80034d6:	431a      	orrs	r2, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	69db      	ldr	r3, [r3, #28]
 80034dc:	071b      	lsls	r3, r3, #28
 80034de:	4917      	ldr	r1, [pc, #92]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80034e0:	4313      	orrs	r3, r2
 80034e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80034e6:	4b15      	ldr	r3, [pc, #84]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80034e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80034ec:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034f4:	4911      	ldr	r1, [pc, #68]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80034f6:	4313      	orrs	r3, r2
 80034f8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80034fc:	4b0f      	ldr	r3, [pc, #60]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a0e      	ldr	r2, [pc, #56]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003502:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003506:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003508:	f7fd fd28 	bl	8000f5c <HAL_GetTick>
 800350c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800350e:	e008      	b.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003510:	f7fd fd24 	bl	8000f5c <HAL_GetTick>
 8003514:	4602      	mov	r2, r0
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	1ad3      	subs	r3, r2, r3
 800351a:	2b64      	cmp	r3, #100	@ 0x64
 800351c:	d901      	bls.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800351e:	2303      	movs	r3, #3
 8003520:	e007      	b.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003522:	4b06      	ldr	r3, [pc, #24]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800352a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800352e:	d1ef      	bne.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003530:	2300      	movs	r3, #0
}
 8003532:	4618      	mov	r0, r3
 8003534:	3720      	adds	r7, #32
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	40023800 	.word	0x40023800

08003540 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b082      	sub	sp, #8
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d101      	bne.n	8003552 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e040      	b.n	80035d4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003556:	2b00      	cmp	r3, #0
 8003558:	d106      	bne.n	8003568 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2200      	movs	r2, #0
 800355e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f7fd fab0 	bl	8000ac8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2224      	movs	r2, #36	@ 0x24
 800356c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f022 0201 	bic.w	r2, r2, #1
 800357c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003582:	2b00      	cmp	r3, #0
 8003584:	d002      	beq.n	800358c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f000 fa8c 	bl	8003aa4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f000 f825 	bl	80035dc <UART_SetConfig>
 8003592:	4603      	mov	r3, r0
 8003594:	2b01      	cmp	r3, #1
 8003596:	d101      	bne.n	800359c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e01b      	b.n	80035d4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	685a      	ldr	r2, [r3, #4]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80035aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	689a      	ldr	r2, [r3, #8]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80035ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f042 0201 	orr.w	r2, r2, #1
 80035ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f000 fb0b 	bl	8003be8 <UART_CheckIdleState>
 80035d2:	4603      	mov	r3, r0
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3708      	adds	r7, #8
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}

080035dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b088      	sub	sp, #32
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80035e4:	2300      	movs	r3, #0
 80035e6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	689a      	ldr	r2, [r3, #8]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	691b      	ldr	r3, [r3, #16]
 80035f0:	431a      	orrs	r2, r3
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	695b      	ldr	r3, [r3, #20]
 80035f6:	431a      	orrs	r2, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	69db      	ldr	r3, [r3, #28]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	4ba6      	ldr	r3, [pc, #664]	@ (80038a0 <UART_SetConfig+0x2c4>)
 8003608:	4013      	ands	r3, r2
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	6812      	ldr	r2, [r2, #0]
 800360e:	6979      	ldr	r1, [r7, #20]
 8003610:	430b      	orrs	r3, r1
 8003612:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	68da      	ldr	r2, [r3, #12]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	430a      	orrs	r2, r1
 8003628:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	699b      	ldr	r3, [r3, #24]
 800362e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6a1b      	ldr	r3, [r3, #32]
 8003634:	697a      	ldr	r2, [r7, #20]
 8003636:	4313      	orrs	r3, r2
 8003638:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	697a      	ldr	r2, [r7, #20]
 800364a:	430a      	orrs	r2, r1
 800364c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a94      	ldr	r2, [pc, #592]	@ (80038a4 <UART_SetConfig+0x2c8>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d120      	bne.n	800369a <UART_SetConfig+0xbe>
 8003658:	4b93      	ldr	r3, [pc, #588]	@ (80038a8 <UART_SetConfig+0x2cc>)
 800365a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800365e:	f003 0303 	and.w	r3, r3, #3
 8003662:	2b03      	cmp	r3, #3
 8003664:	d816      	bhi.n	8003694 <UART_SetConfig+0xb8>
 8003666:	a201      	add	r2, pc, #4	@ (adr r2, 800366c <UART_SetConfig+0x90>)
 8003668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800366c:	0800367d 	.word	0x0800367d
 8003670:	08003689 	.word	0x08003689
 8003674:	08003683 	.word	0x08003683
 8003678:	0800368f 	.word	0x0800368f
 800367c:	2301      	movs	r3, #1
 800367e:	77fb      	strb	r3, [r7, #31]
 8003680:	e150      	b.n	8003924 <UART_SetConfig+0x348>
 8003682:	2302      	movs	r3, #2
 8003684:	77fb      	strb	r3, [r7, #31]
 8003686:	e14d      	b.n	8003924 <UART_SetConfig+0x348>
 8003688:	2304      	movs	r3, #4
 800368a:	77fb      	strb	r3, [r7, #31]
 800368c:	e14a      	b.n	8003924 <UART_SetConfig+0x348>
 800368e:	2308      	movs	r3, #8
 8003690:	77fb      	strb	r3, [r7, #31]
 8003692:	e147      	b.n	8003924 <UART_SetConfig+0x348>
 8003694:	2310      	movs	r3, #16
 8003696:	77fb      	strb	r3, [r7, #31]
 8003698:	e144      	b.n	8003924 <UART_SetConfig+0x348>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a83      	ldr	r2, [pc, #524]	@ (80038ac <UART_SetConfig+0x2d0>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d132      	bne.n	800370a <UART_SetConfig+0x12e>
 80036a4:	4b80      	ldr	r3, [pc, #512]	@ (80038a8 <UART_SetConfig+0x2cc>)
 80036a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036aa:	f003 030c 	and.w	r3, r3, #12
 80036ae:	2b0c      	cmp	r3, #12
 80036b0:	d828      	bhi.n	8003704 <UART_SetConfig+0x128>
 80036b2:	a201      	add	r2, pc, #4	@ (adr r2, 80036b8 <UART_SetConfig+0xdc>)
 80036b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036b8:	080036ed 	.word	0x080036ed
 80036bc:	08003705 	.word	0x08003705
 80036c0:	08003705 	.word	0x08003705
 80036c4:	08003705 	.word	0x08003705
 80036c8:	080036f9 	.word	0x080036f9
 80036cc:	08003705 	.word	0x08003705
 80036d0:	08003705 	.word	0x08003705
 80036d4:	08003705 	.word	0x08003705
 80036d8:	080036f3 	.word	0x080036f3
 80036dc:	08003705 	.word	0x08003705
 80036e0:	08003705 	.word	0x08003705
 80036e4:	08003705 	.word	0x08003705
 80036e8:	080036ff 	.word	0x080036ff
 80036ec:	2300      	movs	r3, #0
 80036ee:	77fb      	strb	r3, [r7, #31]
 80036f0:	e118      	b.n	8003924 <UART_SetConfig+0x348>
 80036f2:	2302      	movs	r3, #2
 80036f4:	77fb      	strb	r3, [r7, #31]
 80036f6:	e115      	b.n	8003924 <UART_SetConfig+0x348>
 80036f8:	2304      	movs	r3, #4
 80036fa:	77fb      	strb	r3, [r7, #31]
 80036fc:	e112      	b.n	8003924 <UART_SetConfig+0x348>
 80036fe:	2308      	movs	r3, #8
 8003700:	77fb      	strb	r3, [r7, #31]
 8003702:	e10f      	b.n	8003924 <UART_SetConfig+0x348>
 8003704:	2310      	movs	r3, #16
 8003706:	77fb      	strb	r3, [r7, #31]
 8003708:	e10c      	b.n	8003924 <UART_SetConfig+0x348>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a68      	ldr	r2, [pc, #416]	@ (80038b0 <UART_SetConfig+0x2d4>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d120      	bne.n	8003756 <UART_SetConfig+0x17a>
 8003714:	4b64      	ldr	r3, [pc, #400]	@ (80038a8 <UART_SetConfig+0x2cc>)
 8003716:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800371a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800371e:	2b30      	cmp	r3, #48	@ 0x30
 8003720:	d013      	beq.n	800374a <UART_SetConfig+0x16e>
 8003722:	2b30      	cmp	r3, #48	@ 0x30
 8003724:	d814      	bhi.n	8003750 <UART_SetConfig+0x174>
 8003726:	2b20      	cmp	r3, #32
 8003728:	d009      	beq.n	800373e <UART_SetConfig+0x162>
 800372a:	2b20      	cmp	r3, #32
 800372c:	d810      	bhi.n	8003750 <UART_SetConfig+0x174>
 800372e:	2b00      	cmp	r3, #0
 8003730:	d002      	beq.n	8003738 <UART_SetConfig+0x15c>
 8003732:	2b10      	cmp	r3, #16
 8003734:	d006      	beq.n	8003744 <UART_SetConfig+0x168>
 8003736:	e00b      	b.n	8003750 <UART_SetConfig+0x174>
 8003738:	2300      	movs	r3, #0
 800373a:	77fb      	strb	r3, [r7, #31]
 800373c:	e0f2      	b.n	8003924 <UART_SetConfig+0x348>
 800373e:	2302      	movs	r3, #2
 8003740:	77fb      	strb	r3, [r7, #31]
 8003742:	e0ef      	b.n	8003924 <UART_SetConfig+0x348>
 8003744:	2304      	movs	r3, #4
 8003746:	77fb      	strb	r3, [r7, #31]
 8003748:	e0ec      	b.n	8003924 <UART_SetConfig+0x348>
 800374a:	2308      	movs	r3, #8
 800374c:	77fb      	strb	r3, [r7, #31]
 800374e:	e0e9      	b.n	8003924 <UART_SetConfig+0x348>
 8003750:	2310      	movs	r3, #16
 8003752:	77fb      	strb	r3, [r7, #31]
 8003754:	e0e6      	b.n	8003924 <UART_SetConfig+0x348>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a56      	ldr	r2, [pc, #344]	@ (80038b4 <UART_SetConfig+0x2d8>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d120      	bne.n	80037a2 <UART_SetConfig+0x1c6>
 8003760:	4b51      	ldr	r3, [pc, #324]	@ (80038a8 <UART_SetConfig+0x2cc>)
 8003762:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003766:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800376a:	2bc0      	cmp	r3, #192	@ 0xc0
 800376c:	d013      	beq.n	8003796 <UART_SetConfig+0x1ba>
 800376e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003770:	d814      	bhi.n	800379c <UART_SetConfig+0x1c0>
 8003772:	2b80      	cmp	r3, #128	@ 0x80
 8003774:	d009      	beq.n	800378a <UART_SetConfig+0x1ae>
 8003776:	2b80      	cmp	r3, #128	@ 0x80
 8003778:	d810      	bhi.n	800379c <UART_SetConfig+0x1c0>
 800377a:	2b00      	cmp	r3, #0
 800377c:	d002      	beq.n	8003784 <UART_SetConfig+0x1a8>
 800377e:	2b40      	cmp	r3, #64	@ 0x40
 8003780:	d006      	beq.n	8003790 <UART_SetConfig+0x1b4>
 8003782:	e00b      	b.n	800379c <UART_SetConfig+0x1c0>
 8003784:	2300      	movs	r3, #0
 8003786:	77fb      	strb	r3, [r7, #31]
 8003788:	e0cc      	b.n	8003924 <UART_SetConfig+0x348>
 800378a:	2302      	movs	r3, #2
 800378c:	77fb      	strb	r3, [r7, #31]
 800378e:	e0c9      	b.n	8003924 <UART_SetConfig+0x348>
 8003790:	2304      	movs	r3, #4
 8003792:	77fb      	strb	r3, [r7, #31]
 8003794:	e0c6      	b.n	8003924 <UART_SetConfig+0x348>
 8003796:	2308      	movs	r3, #8
 8003798:	77fb      	strb	r3, [r7, #31]
 800379a:	e0c3      	b.n	8003924 <UART_SetConfig+0x348>
 800379c:	2310      	movs	r3, #16
 800379e:	77fb      	strb	r3, [r7, #31]
 80037a0:	e0c0      	b.n	8003924 <UART_SetConfig+0x348>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a44      	ldr	r2, [pc, #272]	@ (80038b8 <UART_SetConfig+0x2dc>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d125      	bne.n	80037f8 <UART_SetConfig+0x21c>
 80037ac:	4b3e      	ldr	r3, [pc, #248]	@ (80038a8 <UART_SetConfig+0x2cc>)
 80037ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80037ba:	d017      	beq.n	80037ec <UART_SetConfig+0x210>
 80037bc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80037c0:	d817      	bhi.n	80037f2 <UART_SetConfig+0x216>
 80037c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80037c6:	d00b      	beq.n	80037e0 <UART_SetConfig+0x204>
 80037c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80037cc:	d811      	bhi.n	80037f2 <UART_SetConfig+0x216>
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d003      	beq.n	80037da <UART_SetConfig+0x1fe>
 80037d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80037d6:	d006      	beq.n	80037e6 <UART_SetConfig+0x20a>
 80037d8:	e00b      	b.n	80037f2 <UART_SetConfig+0x216>
 80037da:	2300      	movs	r3, #0
 80037dc:	77fb      	strb	r3, [r7, #31]
 80037de:	e0a1      	b.n	8003924 <UART_SetConfig+0x348>
 80037e0:	2302      	movs	r3, #2
 80037e2:	77fb      	strb	r3, [r7, #31]
 80037e4:	e09e      	b.n	8003924 <UART_SetConfig+0x348>
 80037e6:	2304      	movs	r3, #4
 80037e8:	77fb      	strb	r3, [r7, #31]
 80037ea:	e09b      	b.n	8003924 <UART_SetConfig+0x348>
 80037ec:	2308      	movs	r3, #8
 80037ee:	77fb      	strb	r3, [r7, #31]
 80037f0:	e098      	b.n	8003924 <UART_SetConfig+0x348>
 80037f2:	2310      	movs	r3, #16
 80037f4:	77fb      	strb	r3, [r7, #31]
 80037f6:	e095      	b.n	8003924 <UART_SetConfig+0x348>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a2f      	ldr	r2, [pc, #188]	@ (80038bc <UART_SetConfig+0x2e0>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d125      	bne.n	800384e <UART_SetConfig+0x272>
 8003802:	4b29      	ldr	r3, [pc, #164]	@ (80038a8 <UART_SetConfig+0x2cc>)
 8003804:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003808:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800380c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003810:	d017      	beq.n	8003842 <UART_SetConfig+0x266>
 8003812:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003816:	d817      	bhi.n	8003848 <UART_SetConfig+0x26c>
 8003818:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800381c:	d00b      	beq.n	8003836 <UART_SetConfig+0x25a>
 800381e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003822:	d811      	bhi.n	8003848 <UART_SetConfig+0x26c>
 8003824:	2b00      	cmp	r3, #0
 8003826:	d003      	beq.n	8003830 <UART_SetConfig+0x254>
 8003828:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800382c:	d006      	beq.n	800383c <UART_SetConfig+0x260>
 800382e:	e00b      	b.n	8003848 <UART_SetConfig+0x26c>
 8003830:	2301      	movs	r3, #1
 8003832:	77fb      	strb	r3, [r7, #31]
 8003834:	e076      	b.n	8003924 <UART_SetConfig+0x348>
 8003836:	2302      	movs	r3, #2
 8003838:	77fb      	strb	r3, [r7, #31]
 800383a:	e073      	b.n	8003924 <UART_SetConfig+0x348>
 800383c:	2304      	movs	r3, #4
 800383e:	77fb      	strb	r3, [r7, #31]
 8003840:	e070      	b.n	8003924 <UART_SetConfig+0x348>
 8003842:	2308      	movs	r3, #8
 8003844:	77fb      	strb	r3, [r7, #31]
 8003846:	e06d      	b.n	8003924 <UART_SetConfig+0x348>
 8003848:	2310      	movs	r3, #16
 800384a:	77fb      	strb	r3, [r7, #31]
 800384c:	e06a      	b.n	8003924 <UART_SetConfig+0x348>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a1b      	ldr	r2, [pc, #108]	@ (80038c0 <UART_SetConfig+0x2e4>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d138      	bne.n	80038ca <UART_SetConfig+0x2ee>
 8003858:	4b13      	ldr	r3, [pc, #76]	@ (80038a8 <UART_SetConfig+0x2cc>)
 800385a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800385e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003862:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003866:	d017      	beq.n	8003898 <UART_SetConfig+0x2bc>
 8003868:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800386c:	d82a      	bhi.n	80038c4 <UART_SetConfig+0x2e8>
 800386e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003872:	d00b      	beq.n	800388c <UART_SetConfig+0x2b0>
 8003874:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003878:	d824      	bhi.n	80038c4 <UART_SetConfig+0x2e8>
 800387a:	2b00      	cmp	r3, #0
 800387c:	d003      	beq.n	8003886 <UART_SetConfig+0x2aa>
 800387e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003882:	d006      	beq.n	8003892 <UART_SetConfig+0x2b6>
 8003884:	e01e      	b.n	80038c4 <UART_SetConfig+0x2e8>
 8003886:	2300      	movs	r3, #0
 8003888:	77fb      	strb	r3, [r7, #31]
 800388a:	e04b      	b.n	8003924 <UART_SetConfig+0x348>
 800388c:	2302      	movs	r3, #2
 800388e:	77fb      	strb	r3, [r7, #31]
 8003890:	e048      	b.n	8003924 <UART_SetConfig+0x348>
 8003892:	2304      	movs	r3, #4
 8003894:	77fb      	strb	r3, [r7, #31]
 8003896:	e045      	b.n	8003924 <UART_SetConfig+0x348>
 8003898:	2308      	movs	r3, #8
 800389a:	77fb      	strb	r3, [r7, #31]
 800389c:	e042      	b.n	8003924 <UART_SetConfig+0x348>
 800389e:	bf00      	nop
 80038a0:	efff69f3 	.word	0xefff69f3
 80038a4:	40011000 	.word	0x40011000
 80038a8:	40023800 	.word	0x40023800
 80038ac:	40004400 	.word	0x40004400
 80038b0:	40004800 	.word	0x40004800
 80038b4:	40004c00 	.word	0x40004c00
 80038b8:	40005000 	.word	0x40005000
 80038bc:	40011400 	.word	0x40011400
 80038c0:	40007800 	.word	0x40007800
 80038c4:	2310      	movs	r3, #16
 80038c6:	77fb      	strb	r3, [r7, #31]
 80038c8:	e02c      	b.n	8003924 <UART_SetConfig+0x348>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a72      	ldr	r2, [pc, #456]	@ (8003a98 <UART_SetConfig+0x4bc>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d125      	bne.n	8003920 <UART_SetConfig+0x344>
 80038d4:	4b71      	ldr	r3, [pc, #452]	@ (8003a9c <UART_SetConfig+0x4c0>)
 80038d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038da:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80038de:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80038e2:	d017      	beq.n	8003914 <UART_SetConfig+0x338>
 80038e4:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80038e8:	d817      	bhi.n	800391a <UART_SetConfig+0x33e>
 80038ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80038ee:	d00b      	beq.n	8003908 <UART_SetConfig+0x32c>
 80038f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80038f4:	d811      	bhi.n	800391a <UART_SetConfig+0x33e>
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d003      	beq.n	8003902 <UART_SetConfig+0x326>
 80038fa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80038fe:	d006      	beq.n	800390e <UART_SetConfig+0x332>
 8003900:	e00b      	b.n	800391a <UART_SetConfig+0x33e>
 8003902:	2300      	movs	r3, #0
 8003904:	77fb      	strb	r3, [r7, #31]
 8003906:	e00d      	b.n	8003924 <UART_SetConfig+0x348>
 8003908:	2302      	movs	r3, #2
 800390a:	77fb      	strb	r3, [r7, #31]
 800390c:	e00a      	b.n	8003924 <UART_SetConfig+0x348>
 800390e:	2304      	movs	r3, #4
 8003910:	77fb      	strb	r3, [r7, #31]
 8003912:	e007      	b.n	8003924 <UART_SetConfig+0x348>
 8003914:	2308      	movs	r3, #8
 8003916:	77fb      	strb	r3, [r7, #31]
 8003918:	e004      	b.n	8003924 <UART_SetConfig+0x348>
 800391a:	2310      	movs	r3, #16
 800391c:	77fb      	strb	r3, [r7, #31]
 800391e:	e001      	b.n	8003924 <UART_SetConfig+0x348>
 8003920:	2310      	movs	r3, #16
 8003922:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	69db      	ldr	r3, [r3, #28]
 8003928:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800392c:	d15b      	bne.n	80039e6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800392e:	7ffb      	ldrb	r3, [r7, #31]
 8003930:	2b08      	cmp	r3, #8
 8003932:	d828      	bhi.n	8003986 <UART_SetConfig+0x3aa>
 8003934:	a201      	add	r2, pc, #4	@ (adr r2, 800393c <UART_SetConfig+0x360>)
 8003936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800393a:	bf00      	nop
 800393c:	08003961 	.word	0x08003961
 8003940:	08003969 	.word	0x08003969
 8003944:	08003971 	.word	0x08003971
 8003948:	08003987 	.word	0x08003987
 800394c:	08003977 	.word	0x08003977
 8003950:	08003987 	.word	0x08003987
 8003954:	08003987 	.word	0x08003987
 8003958:	08003987 	.word	0x08003987
 800395c:	0800397f 	.word	0x0800397f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003960:	f7ff f99e 	bl	8002ca0 <HAL_RCC_GetPCLK1Freq>
 8003964:	61b8      	str	r0, [r7, #24]
        break;
 8003966:	e013      	b.n	8003990 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003968:	f7ff f9ae 	bl	8002cc8 <HAL_RCC_GetPCLK2Freq>
 800396c:	61b8      	str	r0, [r7, #24]
        break;
 800396e:	e00f      	b.n	8003990 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003970:	4b4b      	ldr	r3, [pc, #300]	@ (8003aa0 <UART_SetConfig+0x4c4>)
 8003972:	61bb      	str	r3, [r7, #24]
        break;
 8003974:	e00c      	b.n	8003990 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003976:	f7ff f881 	bl	8002a7c <HAL_RCC_GetSysClockFreq>
 800397a:	61b8      	str	r0, [r7, #24]
        break;
 800397c:	e008      	b.n	8003990 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800397e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003982:	61bb      	str	r3, [r7, #24]
        break;
 8003984:	e004      	b.n	8003990 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003986:	2300      	movs	r3, #0
 8003988:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	77bb      	strb	r3, [r7, #30]
        break;
 800398e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003990:	69bb      	ldr	r3, [r7, #24]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d074      	beq.n	8003a80 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003996:	69bb      	ldr	r3, [r7, #24]
 8003998:	005a      	lsls	r2, r3, #1
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	085b      	lsrs	r3, r3, #1
 80039a0:	441a      	add	r2, r3
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80039aa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	2b0f      	cmp	r3, #15
 80039b0:	d916      	bls.n	80039e0 <UART_SetConfig+0x404>
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039b8:	d212      	bcs.n	80039e0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	b29b      	uxth	r3, r3
 80039be:	f023 030f 	bic.w	r3, r3, #15
 80039c2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	085b      	lsrs	r3, r3, #1
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	f003 0307 	and.w	r3, r3, #7
 80039ce:	b29a      	uxth	r2, r3
 80039d0:	89fb      	ldrh	r3, [r7, #14]
 80039d2:	4313      	orrs	r3, r2
 80039d4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	89fa      	ldrh	r2, [r7, #14]
 80039dc:	60da      	str	r2, [r3, #12]
 80039de:	e04f      	b.n	8003a80 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	77bb      	strb	r3, [r7, #30]
 80039e4:	e04c      	b.n	8003a80 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80039e6:	7ffb      	ldrb	r3, [r7, #31]
 80039e8:	2b08      	cmp	r3, #8
 80039ea:	d828      	bhi.n	8003a3e <UART_SetConfig+0x462>
 80039ec:	a201      	add	r2, pc, #4	@ (adr r2, 80039f4 <UART_SetConfig+0x418>)
 80039ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039f2:	bf00      	nop
 80039f4:	08003a19 	.word	0x08003a19
 80039f8:	08003a21 	.word	0x08003a21
 80039fc:	08003a29 	.word	0x08003a29
 8003a00:	08003a3f 	.word	0x08003a3f
 8003a04:	08003a2f 	.word	0x08003a2f
 8003a08:	08003a3f 	.word	0x08003a3f
 8003a0c:	08003a3f 	.word	0x08003a3f
 8003a10:	08003a3f 	.word	0x08003a3f
 8003a14:	08003a37 	.word	0x08003a37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a18:	f7ff f942 	bl	8002ca0 <HAL_RCC_GetPCLK1Freq>
 8003a1c:	61b8      	str	r0, [r7, #24]
        break;
 8003a1e:	e013      	b.n	8003a48 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a20:	f7ff f952 	bl	8002cc8 <HAL_RCC_GetPCLK2Freq>
 8003a24:	61b8      	str	r0, [r7, #24]
        break;
 8003a26:	e00f      	b.n	8003a48 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a28:	4b1d      	ldr	r3, [pc, #116]	@ (8003aa0 <UART_SetConfig+0x4c4>)
 8003a2a:	61bb      	str	r3, [r7, #24]
        break;
 8003a2c:	e00c      	b.n	8003a48 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a2e:	f7ff f825 	bl	8002a7c <HAL_RCC_GetSysClockFreq>
 8003a32:	61b8      	str	r0, [r7, #24]
        break;
 8003a34:	e008      	b.n	8003a48 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a3a:	61bb      	str	r3, [r7, #24]
        break;
 8003a3c:	e004      	b.n	8003a48 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	77bb      	strb	r3, [r7, #30]
        break;
 8003a46:	bf00      	nop
    }

    if (pclk != 0U)
 8003a48:	69bb      	ldr	r3, [r7, #24]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d018      	beq.n	8003a80 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	085a      	lsrs	r2, r3, #1
 8003a54:	69bb      	ldr	r3, [r7, #24]
 8003a56:	441a      	add	r2, r3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a60:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	2b0f      	cmp	r3, #15
 8003a66:	d909      	bls.n	8003a7c <UART_SetConfig+0x4a0>
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a6e:	d205      	bcs.n	8003a7c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	b29a      	uxth	r2, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	60da      	str	r2, [r3, #12]
 8003a7a:	e001      	b.n	8003a80 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003a8c:	7fbb      	ldrb	r3, [r7, #30]
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3720      	adds	r7, #32
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	40007c00 	.word	0x40007c00
 8003a9c:	40023800 	.word	0x40023800
 8003aa0:	00f42400 	.word	0x00f42400

08003aa4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ab0:	f003 0308 	and.w	r3, r3, #8
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d00a      	beq.n	8003ace <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	430a      	orrs	r2, r1
 8003acc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ad2:	f003 0301 	and.w	r3, r3, #1
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d00a      	beq.n	8003af0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	430a      	orrs	r2, r1
 8003aee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003af4:	f003 0302 	and.w	r3, r3, #2
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d00a      	beq.n	8003b12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	430a      	orrs	r2, r1
 8003b10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b16:	f003 0304 	and.w	r3, r3, #4
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d00a      	beq.n	8003b34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	430a      	orrs	r2, r1
 8003b32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b38:	f003 0310 	and.w	r3, r3, #16
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d00a      	beq.n	8003b56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	430a      	orrs	r2, r1
 8003b54:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b5a:	f003 0320 	and.w	r3, r3, #32
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d00a      	beq.n	8003b78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	430a      	orrs	r2, r1
 8003b76:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d01a      	beq.n	8003bba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	430a      	orrs	r2, r1
 8003b98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b9e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ba2:	d10a      	bne.n	8003bba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	430a      	orrs	r2, r1
 8003bb8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d00a      	beq.n	8003bdc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	430a      	orrs	r2, r1
 8003bda:	605a      	str	r2, [r3, #4]
  }
}
 8003bdc:	bf00      	nop
 8003bde:	370c      	adds	r7, #12
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr

08003be8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b098      	sub	sp, #96	@ 0x60
 8003bec:	af02      	add	r7, sp, #8
 8003bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003bf8:	f7fd f9b0 	bl	8000f5c <HAL_GetTick>
 8003bfc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 0308 	and.w	r3, r3, #8
 8003c08:	2b08      	cmp	r3, #8
 8003c0a:	d12e      	bne.n	8003c6a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c0c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003c10:	9300      	str	r3, [sp, #0]
 8003c12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c14:	2200      	movs	r2, #0
 8003c16:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f000 f88c 	bl	8003d38 <UART_WaitOnFlagUntilTimeout>
 8003c20:	4603      	mov	r3, r0
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d021      	beq.n	8003c6a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c2e:	e853 3f00 	ldrex	r3, [r3]
 8003c32:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003c34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c36:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c3a:	653b      	str	r3, [r7, #80]	@ 0x50
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	461a      	mov	r2, r3
 8003c42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c44:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c46:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c48:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003c4a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003c4c:	e841 2300 	strex	r3, r2, [r1]
 8003c50:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003c52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d1e6      	bne.n	8003c26 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2220      	movs	r2, #32
 8003c5c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2200      	movs	r2, #0
 8003c62:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c66:	2303      	movs	r3, #3
 8003c68:	e062      	b.n	8003d30 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 0304 	and.w	r3, r3, #4
 8003c74:	2b04      	cmp	r3, #4
 8003c76:	d149      	bne.n	8003d0c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c78:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003c7c:	9300      	str	r3, [sp, #0]
 8003c7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c80:	2200      	movs	r2, #0
 8003c82:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f000 f856 	bl	8003d38 <UART_WaitOnFlagUntilTimeout>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d03c      	beq.n	8003d0c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c9a:	e853 3f00 	ldrex	r3, [r3]
 8003c9e:	623b      	str	r3, [r7, #32]
   return(result);
 8003ca0:	6a3b      	ldr	r3, [r7, #32]
 8003ca2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ca6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	461a      	mov	r2, r3
 8003cae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003cb0:	633b      	str	r3, [r7, #48]	@ 0x30
 8003cb2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cb4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003cb6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003cb8:	e841 2300 	strex	r3, r2, [r1]
 8003cbc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003cbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d1e6      	bne.n	8003c92 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	3308      	adds	r3, #8
 8003cca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	e853 3f00 	ldrex	r3, [r3]
 8003cd2:	60fb      	str	r3, [r7, #12]
   return(result);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	f023 0301 	bic.w	r3, r3, #1
 8003cda:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	3308      	adds	r3, #8
 8003ce2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003ce4:	61fa      	str	r2, [r7, #28]
 8003ce6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ce8:	69b9      	ldr	r1, [r7, #24]
 8003cea:	69fa      	ldr	r2, [r7, #28]
 8003cec:	e841 2300 	strex	r3, r2, [r1]
 8003cf0:	617b      	str	r3, [r7, #20]
   return(result);
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d1e5      	bne.n	8003cc4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2220      	movs	r2, #32
 8003cfc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2200      	movs	r2, #0
 8003d04:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d08:	2303      	movs	r3, #3
 8003d0a:	e011      	b.n	8003d30 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2220      	movs	r2, #32
 8003d10:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2220      	movs	r2, #32
 8003d16:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003d2e:	2300      	movs	r3, #0
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3758      	adds	r7, #88	@ 0x58
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	60f8      	str	r0, [r7, #12]
 8003d40:	60b9      	str	r1, [r7, #8]
 8003d42:	603b      	str	r3, [r7, #0]
 8003d44:	4613      	mov	r3, r2
 8003d46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d48:	e04f      	b.n	8003dea <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d4a:	69bb      	ldr	r3, [r7, #24]
 8003d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d50:	d04b      	beq.n	8003dea <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d52:	f7fd f903 	bl	8000f5c <HAL_GetTick>
 8003d56:	4602      	mov	r2, r0
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	1ad3      	subs	r3, r2, r3
 8003d5c:	69ba      	ldr	r2, [r7, #24]
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d302      	bcc.n	8003d68 <UART_WaitOnFlagUntilTimeout+0x30>
 8003d62:	69bb      	ldr	r3, [r7, #24]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d101      	bne.n	8003d6c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003d68:	2303      	movs	r3, #3
 8003d6a:	e04e      	b.n	8003e0a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 0304 	and.w	r3, r3, #4
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d037      	beq.n	8003dea <UART_WaitOnFlagUntilTimeout+0xb2>
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	2b80      	cmp	r3, #128	@ 0x80
 8003d7e:	d034      	beq.n	8003dea <UART_WaitOnFlagUntilTimeout+0xb2>
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	2b40      	cmp	r3, #64	@ 0x40
 8003d84:	d031      	beq.n	8003dea <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	69db      	ldr	r3, [r3, #28]
 8003d8c:	f003 0308 	and.w	r3, r3, #8
 8003d90:	2b08      	cmp	r3, #8
 8003d92:	d110      	bne.n	8003db6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	2208      	movs	r2, #8
 8003d9a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003d9c:	68f8      	ldr	r0, [r7, #12]
 8003d9e:	f000 f838 	bl	8003e12 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2208      	movs	r2, #8
 8003da6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2200      	movs	r2, #0
 8003dae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e029      	b.n	8003e0a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	69db      	ldr	r3, [r3, #28]
 8003dbc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003dc0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003dc4:	d111      	bne.n	8003dea <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003dce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003dd0:	68f8      	ldr	r0, [r7, #12]
 8003dd2:	f000 f81e 	bl	8003e12 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2220      	movs	r2, #32
 8003dda:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2200      	movs	r2, #0
 8003de2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003de6:	2303      	movs	r3, #3
 8003de8:	e00f      	b.n	8003e0a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	69da      	ldr	r2, [r3, #28]
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	4013      	ands	r3, r2
 8003df4:	68ba      	ldr	r2, [r7, #8]
 8003df6:	429a      	cmp	r2, r3
 8003df8:	bf0c      	ite	eq
 8003dfa:	2301      	moveq	r3, #1
 8003dfc:	2300      	movne	r3, #0
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	461a      	mov	r2, r3
 8003e02:	79fb      	ldrb	r3, [r7, #7]
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d0a0      	beq.n	8003d4a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e08:	2300      	movs	r3, #0
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3710      	adds	r7, #16
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}

08003e12 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e12:	b480      	push	{r7}
 8003e14:	b095      	sub	sp, #84	@ 0x54
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e22:	e853 3f00 	ldrex	r3, [r3]
 8003e26:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003e28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e2a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003e2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	461a      	mov	r2, r3
 8003e36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e38:	643b      	str	r3, [r7, #64]	@ 0x40
 8003e3a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e3c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003e3e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003e40:	e841 2300 	strex	r3, r2, [r1]
 8003e44:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003e46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d1e6      	bne.n	8003e1a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	3308      	adds	r3, #8
 8003e52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e54:	6a3b      	ldr	r3, [r7, #32]
 8003e56:	e853 3f00 	ldrex	r3, [r3]
 8003e5a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	f023 0301 	bic.w	r3, r3, #1
 8003e62:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	3308      	adds	r3, #8
 8003e6a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003e6c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003e6e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e70:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e72:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e74:	e841 2300 	strex	r3, r2, [r1]
 8003e78:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d1e5      	bne.n	8003e4c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d118      	bne.n	8003eba <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	e853 3f00 	ldrex	r3, [r3]
 8003e94:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	f023 0310 	bic.w	r3, r3, #16
 8003e9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ea6:	61bb      	str	r3, [r7, #24]
 8003ea8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eaa:	6979      	ldr	r1, [r7, #20]
 8003eac:	69ba      	ldr	r2, [r7, #24]
 8003eae:	e841 2300 	strex	r3, r2, [r1]
 8003eb2:	613b      	str	r3, [r7, #16]
   return(result);
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d1e6      	bne.n	8003e88 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2220      	movs	r2, #32
 8003ebe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003ece:	bf00      	nop
 8003ed0:	3754      	adds	r7, #84	@ 0x54
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr
	...

08003edc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003edc:	b084      	sub	sp, #16
 8003ede:	b580      	push	{r7, lr}
 8003ee0:	b084      	sub	sp, #16
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	6078      	str	r0, [r7, #4]
 8003ee6:	f107 001c 	add.w	r0, r7, #28
 8003eea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003eee:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d121      	bne.n	8003f3a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003efa:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	68da      	ldr	r2, [r3, #12]
 8003f06:	4b21      	ldr	r3, [pc, #132]	@ (8003f8c <USB_CoreInit+0xb0>)
 8003f08:	4013      	ands	r3, r2
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	68db      	ldr	r3, [r3, #12]
 8003f12:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003f1a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d105      	bne.n	8003f2e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	68db      	ldr	r3, [r3, #12]
 8003f26:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f000 fa92 	bl	8004458 <USB_CoreReset>
 8003f34:	4603      	mov	r3, r0
 8003f36:	73fb      	strb	r3, [r7, #15]
 8003f38:	e010      	b.n	8003f5c <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	68db      	ldr	r3, [r3, #12]
 8003f3e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f000 fa86 	bl	8004458 <USB_CoreReset>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f54:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8003f5c:	7fbb      	ldrb	r3, [r7, #30]
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d10b      	bne.n	8003f7a <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	f043 0206 	orr.w	r2, r3, #6
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	f043 0220 	orr.w	r2, r3, #32
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003f7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3710      	adds	r7, #16
 8003f80:	46bd      	mov	sp, r7
 8003f82:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003f86:	b004      	add	sp, #16
 8003f88:	4770      	bx	lr
 8003f8a:	bf00      	nop
 8003f8c:	ffbdffbf 	.word	0xffbdffbf

08003f90 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b083      	sub	sp, #12
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	f023 0201 	bic.w	r2, r3, #1
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003fa4:	2300      	movs	r3, #0
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	370c      	adds	r7, #12
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr

08003fb2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003fb2:	b580      	push	{r7, lr}
 8003fb4:	b084      	sub	sp, #16
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	6078      	str	r0, [r7, #4]
 8003fba:	460b      	mov	r3, r1
 8003fbc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	68db      	ldr	r3, [r3, #12]
 8003fc6:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003fce:	78fb      	ldrb	r3, [r7, #3]
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d115      	bne.n	8004000 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003fe0:	200a      	movs	r0, #10
 8003fe2:	f7fc ffc7 	bl	8000f74 <HAL_Delay>
      ms += 10U;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	330a      	adds	r3, #10
 8003fea:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003fec:	6878      	ldr	r0, [r7, #4]
 8003fee:	f000 fa25 	bl	800443c <USB_GetMode>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d01e      	beq.n	8004036 <USB_SetCurrentMode+0x84>
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2bc7      	cmp	r3, #199	@ 0xc7
 8003ffc:	d9f0      	bls.n	8003fe0 <USB_SetCurrentMode+0x2e>
 8003ffe:	e01a      	b.n	8004036 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004000:	78fb      	ldrb	r3, [r7, #3]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d115      	bne.n	8004032 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	68db      	ldr	r3, [r3, #12]
 800400a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004012:	200a      	movs	r0, #10
 8004014:	f7fc ffae 	bl	8000f74 <HAL_Delay>
      ms += 10U;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	330a      	adds	r3, #10
 800401c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f000 fa0c 	bl	800443c <USB_GetMode>
 8004024:	4603      	mov	r3, r0
 8004026:	2b00      	cmp	r3, #0
 8004028:	d005      	beq.n	8004036 <USB_SetCurrentMode+0x84>
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2bc7      	cmp	r3, #199	@ 0xc7
 800402e:	d9f0      	bls.n	8004012 <USB_SetCurrentMode+0x60>
 8004030:	e001      	b.n	8004036 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e005      	b.n	8004042 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2bc8      	cmp	r3, #200	@ 0xc8
 800403a:	d101      	bne.n	8004040 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	e000      	b.n	8004042 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004040:	2300      	movs	r3, #0
}
 8004042:	4618      	mov	r0, r3
 8004044:	3710      	adds	r7, #16
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
	...

0800404c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800404c:	b084      	sub	sp, #16
 800404e:	b580      	push	{r7, lr}
 8004050:	b086      	sub	sp, #24
 8004052:	af00      	add	r7, sp, #0
 8004054:	6078      	str	r0, [r7, #4]
 8004056:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800405a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800405e:	2300      	movs	r3, #0
 8004060:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004066:	2300      	movs	r3, #0
 8004068:	613b      	str	r3, [r7, #16]
 800406a:	e009      	b.n	8004080 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	3340      	adds	r3, #64	@ 0x40
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	4413      	add	r3, r2
 8004076:	2200      	movs	r2, #0
 8004078:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	3301      	adds	r3, #1
 800407e:	613b      	str	r3, [r7, #16]
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	2b0e      	cmp	r3, #14
 8004084:	d9f2      	bls.n	800406c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004086:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800408a:	2b00      	cmp	r3, #0
 800408c:	d11c      	bne.n	80040c8 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	68fa      	ldr	r2, [r7, #12]
 8004098:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800409c:	f043 0302 	orr.w	r3, r3, #2
 80040a0:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040a6:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	601a      	str	r2, [r3, #0]
 80040c6:	e005      	b.n	80040d4 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040cc:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80040da:	461a      	mov	r2, r3
 80040dc:	2300      	movs	r3, #0
 80040de:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80040e0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d10d      	bne.n	8004104 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80040e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d104      	bne.n	80040fa <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80040f0:	2100      	movs	r1, #0
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f000 f968 	bl	80043c8 <USB_SetDevSpeed>
 80040f8:	e008      	b.n	800410c <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80040fa:	2101      	movs	r1, #1
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	f000 f963 	bl	80043c8 <USB_SetDevSpeed>
 8004102:	e003      	b.n	800410c <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004104:	2103      	movs	r1, #3
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f000 f95e 	bl	80043c8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800410c:	2110      	movs	r1, #16
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f000 f8fa 	bl	8004308 <USB_FlushTxFifo>
 8004114:	4603      	mov	r3, r0
 8004116:	2b00      	cmp	r3, #0
 8004118:	d001      	beq.n	800411e <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f000 f924 	bl	800436c <USB_FlushRxFifo>
 8004124:	4603      	mov	r3, r0
 8004126:	2b00      	cmp	r3, #0
 8004128:	d001      	beq.n	800412e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004134:	461a      	mov	r2, r3
 8004136:	2300      	movs	r3, #0
 8004138:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004140:	461a      	mov	r2, r3
 8004142:	2300      	movs	r3, #0
 8004144:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800414c:	461a      	mov	r2, r3
 800414e:	2300      	movs	r3, #0
 8004150:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004152:	2300      	movs	r3, #0
 8004154:	613b      	str	r3, [r7, #16]
 8004156:	e043      	b.n	80041e0 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	015a      	lsls	r2, r3, #5
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	4413      	add	r3, r2
 8004160:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800416a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800416e:	d118      	bne.n	80041a2 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d10a      	bne.n	800418c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	015a      	lsls	r2, r3, #5
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	4413      	add	r3, r2
 800417e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004182:	461a      	mov	r2, r3
 8004184:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004188:	6013      	str	r3, [r2, #0]
 800418a:	e013      	b.n	80041b4 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	015a      	lsls	r2, r3, #5
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	4413      	add	r3, r2
 8004194:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004198:	461a      	mov	r2, r3
 800419a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800419e:	6013      	str	r3, [r2, #0]
 80041a0:	e008      	b.n	80041b4 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	015a      	lsls	r2, r3, #5
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	4413      	add	r3, r2
 80041aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041ae:	461a      	mov	r2, r3
 80041b0:	2300      	movs	r3, #0
 80041b2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	015a      	lsls	r2, r3, #5
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	4413      	add	r3, r2
 80041bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041c0:	461a      	mov	r2, r3
 80041c2:	2300      	movs	r3, #0
 80041c4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	015a      	lsls	r2, r3, #5
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	4413      	add	r3, r2
 80041ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041d2:	461a      	mov	r2, r3
 80041d4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80041d8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	3301      	adds	r3, #1
 80041de:	613b      	str	r3, [r7, #16]
 80041e0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80041e4:	461a      	mov	r2, r3
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d3b5      	bcc.n	8004158 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80041ec:	2300      	movs	r3, #0
 80041ee:	613b      	str	r3, [r7, #16]
 80041f0:	e043      	b.n	800427a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	015a      	lsls	r2, r3, #5
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	4413      	add	r3, r2
 80041fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004204:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004208:	d118      	bne.n	800423c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d10a      	bne.n	8004226 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	015a      	lsls	r2, r3, #5
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	4413      	add	r3, r2
 8004218:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800421c:	461a      	mov	r2, r3
 800421e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004222:	6013      	str	r3, [r2, #0]
 8004224:	e013      	b.n	800424e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	015a      	lsls	r2, r3, #5
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	4413      	add	r3, r2
 800422e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004232:	461a      	mov	r2, r3
 8004234:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004238:	6013      	str	r3, [r2, #0]
 800423a:	e008      	b.n	800424e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	015a      	lsls	r2, r3, #5
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	4413      	add	r3, r2
 8004244:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004248:	461a      	mov	r2, r3
 800424a:	2300      	movs	r3, #0
 800424c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	015a      	lsls	r2, r3, #5
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	4413      	add	r3, r2
 8004256:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800425a:	461a      	mov	r2, r3
 800425c:	2300      	movs	r3, #0
 800425e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	015a      	lsls	r2, r3, #5
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	4413      	add	r3, r2
 8004268:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800426c:	461a      	mov	r2, r3
 800426e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004272:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	3301      	adds	r3, #1
 8004278:	613b      	str	r3, [r7, #16]
 800427a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800427e:	461a      	mov	r2, r3
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	4293      	cmp	r3, r2
 8004284:	d3b5      	bcc.n	80041f2 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800428c:	691b      	ldr	r3, [r3, #16]
 800428e:	68fa      	ldr	r2, [r7, #12]
 8004290:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004294:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004298:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2200      	movs	r2, #0
 800429e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80042a6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80042a8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d105      	bne.n	80042bc <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	699b      	ldr	r3, [r3, #24]
 80042b4:	f043 0210 	orr.w	r2, r3, #16
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	699a      	ldr	r2, [r3, #24]
 80042c0:	4b0f      	ldr	r3, [pc, #60]	@ (8004300 <USB_DevInit+0x2b4>)
 80042c2:	4313      	orrs	r3, r2
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80042c8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d005      	beq.n	80042dc <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	699b      	ldr	r3, [r3, #24]
 80042d4:	f043 0208 	orr.w	r2, r3, #8
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80042dc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d105      	bne.n	80042f0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	699a      	ldr	r2, [r3, #24]
 80042e8:	4b06      	ldr	r3, [pc, #24]	@ (8004304 <USB_DevInit+0x2b8>)
 80042ea:	4313      	orrs	r3, r2
 80042ec:	687a      	ldr	r2, [r7, #4]
 80042ee:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80042f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3718      	adds	r7, #24
 80042f6:	46bd      	mov	sp, r7
 80042f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80042fc:	b004      	add	sp, #16
 80042fe:	4770      	bx	lr
 8004300:	803c3800 	.word	0x803c3800
 8004304:	40000004 	.word	0x40000004

08004308 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004308:	b480      	push	{r7}
 800430a:	b085      	sub	sp, #20
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004312:	2300      	movs	r3, #0
 8004314:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	3301      	adds	r3, #1
 800431a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004322:	d901      	bls.n	8004328 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004324:	2303      	movs	r3, #3
 8004326:	e01b      	b.n	8004360 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	691b      	ldr	r3, [r3, #16]
 800432c:	2b00      	cmp	r3, #0
 800432e:	daf2      	bge.n	8004316 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004330:	2300      	movs	r3, #0
 8004332:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	019b      	lsls	r3, r3, #6
 8004338:	f043 0220 	orr.w	r2, r3, #32
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	3301      	adds	r3, #1
 8004344:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800434c:	d901      	bls.n	8004352 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800434e:	2303      	movs	r3, #3
 8004350:	e006      	b.n	8004360 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	691b      	ldr	r3, [r3, #16]
 8004356:	f003 0320 	and.w	r3, r3, #32
 800435a:	2b20      	cmp	r3, #32
 800435c:	d0f0      	beq.n	8004340 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800435e:	2300      	movs	r3, #0
}
 8004360:	4618      	mov	r0, r3
 8004362:	3714      	adds	r7, #20
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr

0800436c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800436c:	b480      	push	{r7}
 800436e:	b085      	sub	sp, #20
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004374:	2300      	movs	r3, #0
 8004376:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	3301      	adds	r3, #1
 800437c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004384:	d901      	bls.n	800438a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	e018      	b.n	80043bc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	691b      	ldr	r3, [r3, #16]
 800438e:	2b00      	cmp	r3, #0
 8004390:	daf2      	bge.n	8004378 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004392:	2300      	movs	r3, #0
 8004394:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2210      	movs	r2, #16
 800439a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	3301      	adds	r3, #1
 80043a0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80043a8:	d901      	bls.n	80043ae <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80043aa:	2303      	movs	r3, #3
 80043ac:	e006      	b.n	80043bc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	691b      	ldr	r3, [r3, #16]
 80043b2:	f003 0310 	and.w	r3, r3, #16
 80043b6:	2b10      	cmp	r3, #16
 80043b8:	d0f0      	beq.n	800439c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80043ba:	2300      	movs	r3, #0
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3714      	adds	r7, #20
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr

080043c8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b085      	sub	sp, #20
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
 80043d0:	460b      	mov	r3, r1
 80043d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	78fb      	ldrb	r3, [r7, #3]
 80043e2:	68f9      	ldr	r1, [r7, #12]
 80043e4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80043e8:	4313      	orrs	r3, r2
 80043ea:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80043ec:	2300      	movs	r3, #0
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3714      	adds	r7, #20
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr

080043fa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80043fa:	b480      	push	{r7}
 80043fc:	b085      	sub	sp, #20
 80043fe:	af00      	add	r7, sp, #0
 8004400:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	68fa      	ldr	r2, [r7, #12]
 8004410:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004414:	f023 0303 	bic.w	r3, r3, #3
 8004418:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	68fa      	ldr	r2, [r7, #12]
 8004424:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004428:	f043 0302 	orr.w	r3, r3, #2
 800442c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800442e:	2300      	movs	r3, #0
}
 8004430:	4618      	mov	r0, r3
 8004432:	3714      	adds	r7, #20
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr

0800443c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800443c:	b480      	push	{r7}
 800443e:	b083      	sub	sp, #12
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	695b      	ldr	r3, [r3, #20]
 8004448:	f003 0301 	and.w	r3, r3, #1
}
 800444c:	4618      	mov	r0, r3
 800444e:	370c      	adds	r7, #12
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr

08004458 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004458:	b480      	push	{r7}
 800445a:	b085      	sub	sp, #20
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004460:	2300      	movs	r3, #0
 8004462:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	3301      	adds	r3, #1
 8004468:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004470:	d901      	bls.n	8004476 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004472:	2303      	movs	r3, #3
 8004474:	e01b      	b.n	80044ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	691b      	ldr	r3, [r3, #16]
 800447a:	2b00      	cmp	r3, #0
 800447c:	daf2      	bge.n	8004464 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800447e:	2300      	movs	r3, #0
 8004480:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	691b      	ldr	r3, [r3, #16]
 8004486:	f043 0201 	orr.w	r2, r3, #1
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	3301      	adds	r3, #1
 8004492:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800449a:	d901      	bls.n	80044a0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800449c:	2303      	movs	r3, #3
 800449e:	e006      	b.n	80044ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	691b      	ldr	r3, [r3, #16]
 80044a4:	f003 0301 	and.w	r3, r3, #1
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d0f0      	beq.n	800448e <USB_CoreReset+0x36>

  return HAL_OK;
 80044ac:	2300      	movs	r3, #0
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3714      	adds	r7, #20
 80044b2:	46bd      	mov	sp, r7
 80044b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b8:	4770      	bx	lr

080044ba <memset>:
 80044ba:	4402      	add	r2, r0
 80044bc:	4603      	mov	r3, r0
 80044be:	4293      	cmp	r3, r2
 80044c0:	d100      	bne.n	80044c4 <memset+0xa>
 80044c2:	4770      	bx	lr
 80044c4:	f803 1b01 	strb.w	r1, [r3], #1
 80044c8:	e7f9      	b.n	80044be <memset+0x4>
	...

080044cc <__libc_init_array>:
 80044cc:	b570      	push	{r4, r5, r6, lr}
 80044ce:	4d0d      	ldr	r5, [pc, #52]	@ (8004504 <__libc_init_array+0x38>)
 80044d0:	4c0d      	ldr	r4, [pc, #52]	@ (8004508 <__libc_init_array+0x3c>)
 80044d2:	1b64      	subs	r4, r4, r5
 80044d4:	10a4      	asrs	r4, r4, #2
 80044d6:	2600      	movs	r6, #0
 80044d8:	42a6      	cmp	r6, r4
 80044da:	d109      	bne.n	80044f0 <__libc_init_array+0x24>
 80044dc:	4d0b      	ldr	r5, [pc, #44]	@ (800450c <__libc_init_array+0x40>)
 80044de:	4c0c      	ldr	r4, [pc, #48]	@ (8004510 <__libc_init_array+0x44>)
 80044e0:	f000 f818 	bl	8004514 <_init>
 80044e4:	1b64      	subs	r4, r4, r5
 80044e6:	10a4      	asrs	r4, r4, #2
 80044e8:	2600      	movs	r6, #0
 80044ea:	42a6      	cmp	r6, r4
 80044ec:	d105      	bne.n	80044fa <__libc_init_array+0x2e>
 80044ee:	bd70      	pop	{r4, r5, r6, pc}
 80044f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80044f4:	4798      	blx	r3
 80044f6:	3601      	adds	r6, #1
 80044f8:	e7ee      	b.n	80044d8 <__libc_init_array+0xc>
 80044fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80044fe:	4798      	blx	r3
 8004500:	3601      	adds	r6, #1
 8004502:	e7f2      	b.n	80044ea <__libc_init_array+0x1e>
 8004504:	0800454c 	.word	0x0800454c
 8004508:	0800454c 	.word	0x0800454c
 800450c:	0800454c 	.word	0x0800454c
 8004510:	08004550 	.word	0x08004550

08004514 <_init>:
 8004514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004516:	bf00      	nop
 8004518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800451a:	bc08      	pop	{r3}
 800451c:	469e      	mov	lr, r3
 800451e:	4770      	bx	lr

08004520 <_fini>:
 8004520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004522:	bf00      	nop
 8004524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004526:	bc08      	pop	{r3}
 8004528:	469e      	mov	lr, r3
 800452a:	4770      	bx	lr
