
CAN_Test2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004260  080001f8  080001f8  000011f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004458  08004458  00005458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004470  08004470  00006014  2**0
                  CONTENTS
  4 .ARM          00000008  08004470  08004470  00005470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004478  08004478  00006014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004478  08004478  00005478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800447c  0800447c  0000547c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08004480  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005d8  20000014  08004494  00006014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005ec  08004494  000065ec  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00006014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fd3c  00000000  00000000  00006042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024a3  00000000  00000000  00015d7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c30  00000000  00000000  00018228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000094d  00000000  00000000  00018e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027541  00000000  00000000  000197a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f93b  00000000  00000000  00040ce6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2a4f  00000000  00000000  00050621  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00143070  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003280  00000000  00000000  001430b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  00146334  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000014 	.word	0x20000014
 8000214:	00000000 	.word	0x00000000
 8000218:	08004440 	.word	0x08004440

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000018 	.word	0x20000018
 8000234:	08004440 	.word	0x08004440

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96a 	b.w	8000524 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	460c      	mov	r4, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d14e      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000274:	4694      	mov	ip, r2
 8000276:	458c      	cmp	ip, r1
 8000278:	4686      	mov	lr, r0
 800027a:	fab2 f282 	clz	r2, r2
 800027e:	d962      	bls.n	8000346 <__udivmoddi4+0xde>
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0320 	rsb	r3, r2, #32
 8000286:	4091      	lsls	r1, r2
 8000288:	fa20 f303 	lsr.w	r3, r0, r3
 800028c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000290:	4319      	orrs	r1, r3
 8000292:	fa00 fe02 	lsl.w	lr, r0, r2
 8000296:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800029a:	fa1f f68c 	uxth.w	r6, ip
 800029e:	fbb1 f4f7 	udiv	r4, r1, r7
 80002a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002a6:	fb07 1114 	mls	r1, r7, r4, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb04 f106 	mul.w	r1, r4, r6
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f104 30ff 	add.w	r0, r4, #4294967295
 80002be:	f080 8112 	bcs.w	80004e6 <__udivmoddi4+0x27e>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 810f 	bls.w	80004e6 <__udivmoddi4+0x27e>
 80002c8:	3c02      	subs	r4, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a59      	subs	r1, r3, r1
 80002ce:	fa1f f38e 	uxth.w	r3, lr
 80002d2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002d6:	fb07 1110 	mls	r1, r7, r0, r1
 80002da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002de:	fb00 f606 	mul.w	r6, r0, r6
 80002e2:	429e      	cmp	r6, r3
 80002e4:	d90a      	bls.n	80002fc <__udivmoddi4+0x94>
 80002e6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ea:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ee:	f080 80fc 	bcs.w	80004ea <__udivmoddi4+0x282>
 80002f2:	429e      	cmp	r6, r3
 80002f4:	f240 80f9 	bls.w	80004ea <__udivmoddi4+0x282>
 80002f8:	4463      	add	r3, ip
 80002fa:	3802      	subs	r0, #2
 80002fc:	1b9b      	subs	r3, r3, r6
 80002fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000302:	2100      	movs	r1, #0
 8000304:	b11d      	cbz	r5, 800030e <__udivmoddi4+0xa6>
 8000306:	40d3      	lsrs	r3, r2
 8000308:	2200      	movs	r2, #0
 800030a:	e9c5 3200 	strd	r3, r2, [r5]
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d905      	bls.n	8000322 <__udivmoddi4+0xba>
 8000316:	b10d      	cbz	r5, 800031c <__udivmoddi4+0xb4>
 8000318:	e9c5 0100 	strd	r0, r1, [r5]
 800031c:	2100      	movs	r1, #0
 800031e:	4608      	mov	r0, r1
 8000320:	e7f5      	b.n	800030e <__udivmoddi4+0xa6>
 8000322:	fab3 f183 	clz	r1, r3
 8000326:	2900      	cmp	r1, #0
 8000328:	d146      	bne.n	80003b8 <__udivmoddi4+0x150>
 800032a:	42a3      	cmp	r3, r4
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xcc>
 800032e:	4290      	cmp	r0, r2
 8000330:	f0c0 80f0 	bcc.w	8000514 <__udivmoddi4+0x2ac>
 8000334:	1a86      	subs	r6, r0, r2
 8000336:	eb64 0303 	sbc.w	r3, r4, r3
 800033a:	2001      	movs	r0, #1
 800033c:	2d00      	cmp	r5, #0
 800033e:	d0e6      	beq.n	800030e <__udivmoddi4+0xa6>
 8000340:	e9c5 6300 	strd	r6, r3, [r5]
 8000344:	e7e3      	b.n	800030e <__udivmoddi4+0xa6>
 8000346:	2a00      	cmp	r2, #0
 8000348:	f040 8090 	bne.w	800046c <__udivmoddi4+0x204>
 800034c:	eba1 040c 	sub.w	r4, r1, ip
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	fa1f f78c 	uxth.w	r7, ip
 8000358:	2101      	movs	r1, #1
 800035a:	fbb4 f6f8 	udiv	r6, r4, r8
 800035e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000362:	fb08 4416 	mls	r4, r8, r6, r4
 8000366:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036a:	fb07 f006 	mul.w	r0, r7, r6
 800036e:	4298      	cmp	r0, r3
 8000370:	d908      	bls.n	8000384 <__udivmoddi4+0x11c>
 8000372:	eb1c 0303 	adds.w	r3, ip, r3
 8000376:	f106 34ff 	add.w	r4, r6, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x11a>
 800037c:	4298      	cmp	r0, r3
 800037e:	f200 80cd 	bhi.w	800051c <__udivmoddi4+0x2b4>
 8000382:	4626      	mov	r6, r4
 8000384:	1a1c      	subs	r4, r3, r0
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb4 f0f8 	udiv	r0, r4, r8
 800038e:	fb08 4410 	mls	r4, r8, r0, r4
 8000392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000396:	fb00 f707 	mul.w	r7, r0, r7
 800039a:	429f      	cmp	r7, r3
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x148>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 34ff 	add.w	r4, r0, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x146>
 80003a8:	429f      	cmp	r7, r3
 80003aa:	f200 80b0 	bhi.w	800050e <__udivmoddi4+0x2a6>
 80003ae:	4620      	mov	r0, r4
 80003b0:	1bdb      	subs	r3, r3, r7
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	e7a5      	b.n	8000304 <__udivmoddi4+0x9c>
 80003b8:	f1c1 0620 	rsb	r6, r1, #32
 80003bc:	408b      	lsls	r3, r1
 80003be:	fa22 f706 	lsr.w	r7, r2, r6
 80003c2:	431f      	orrs	r7, r3
 80003c4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003c8:	fa04 f301 	lsl.w	r3, r4, r1
 80003cc:	ea43 030c 	orr.w	r3, r3, ip
 80003d0:	40f4      	lsrs	r4, r6
 80003d2:	fa00 f801 	lsl.w	r8, r0, r1
 80003d6:	0c38      	lsrs	r0, r7, #16
 80003d8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003dc:	fbb4 fef0 	udiv	lr, r4, r0
 80003e0:	fa1f fc87 	uxth.w	ip, r7
 80003e4:	fb00 441e 	mls	r4, r0, lr, r4
 80003e8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ec:	fb0e f90c 	mul.w	r9, lr, ip
 80003f0:	45a1      	cmp	r9, r4
 80003f2:	fa02 f201 	lsl.w	r2, r2, r1
 80003f6:	d90a      	bls.n	800040e <__udivmoddi4+0x1a6>
 80003f8:	193c      	adds	r4, r7, r4
 80003fa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003fe:	f080 8084 	bcs.w	800050a <__udivmoddi4+0x2a2>
 8000402:	45a1      	cmp	r9, r4
 8000404:	f240 8081 	bls.w	800050a <__udivmoddi4+0x2a2>
 8000408:	f1ae 0e02 	sub.w	lr, lr, #2
 800040c:	443c      	add	r4, r7
 800040e:	eba4 0409 	sub.w	r4, r4, r9
 8000412:	fa1f f983 	uxth.w	r9, r3
 8000416:	fbb4 f3f0 	udiv	r3, r4, r0
 800041a:	fb00 4413 	mls	r4, r0, r3, r4
 800041e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000422:	fb03 fc0c 	mul.w	ip, r3, ip
 8000426:	45a4      	cmp	ip, r4
 8000428:	d907      	bls.n	800043a <__udivmoddi4+0x1d2>
 800042a:	193c      	adds	r4, r7, r4
 800042c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000430:	d267      	bcs.n	8000502 <__udivmoddi4+0x29a>
 8000432:	45a4      	cmp	ip, r4
 8000434:	d965      	bls.n	8000502 <__udivmoddi4+0x29a>
 8000436:	3b02      	subs	r3, #2
 8000438:	443c      	add	r4, r7
 800043a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800043e:	fba0 9302 	umull	r9, r3, r0, r2
 8000442:	eba4 040c 	sub.w	r4, r4, ip
 8000446:	429c      	cmp	r4, r3
 8000448:	46ce      	mov	lr, r9
 800044a:	469c      	mov	ip, r3
 800044c:	d351      	bcc.n	80004f2 <__udivmoddi4+0x28a>
 800044e:	d04e      	beq.n	80004ee <__udivmoddi4+0x286>
 8000450:	b155      	cbz	r5, 8000468 <__udivmoddi4+0x200>
 8000452:	ebb8 030e 	subs.w	r3, r8, lr
 8000456:	eb64 040c 	sbc.w	r4, r4, ip
 800045a:	fa04 f606 	lsl.w	r6, r4, r6
 800045e:	40cb      	lsrs	r3, r1
 8000460:	431e      	orrs	r6, r3
 8000462:	40cc      	lsrs	r4, r1
 8000464:	e9c5 6400 	strd	r6, r4, [r5]
 8000468:	2100      	movs	r1, #0
 800046a:	e750      	b.n	800030e <__udivmoddi4+0xa6>
 800046c:	f1c2 0320 	rsb	r3, r2, #32
 8000470:	fa20 f103 	lsr.w	r1, r0, r3
 8000474:	fa0c fc02 	lsl.w	ip, ip, r2
 8000478:	fa24 f303 	lsr.w	r3, r4, r3
 800047c:	4094      	lsls	r4, r2
 800047e:	430c      	orrs	r4, r1
 8000480:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000484:	fa00 fe02 	lsl.w	lr, r0, r2
 8000488:	fa1f f78c 	uxth.w	r7, ip
 800048c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000490:	fb08 3110 	mls	r1, r8, r0, r3
 8000494:	0c23      	lsrs	r3, r4, #16
 8000496:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049a:	fb00 f107 	mul.w	r1, r0, r7
 800049e:	4299      	cmp	r1, r3
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x24c>
 80004a2:	eb1c 0303 	adds.w	r3, ip, r3
 80004a6:	f100 36ff 	add.w	r6, r0, #4294967295
 80004aa:	d22c      	bcs.n	8000506 <__udivmoddi4+0x29e>
 80004ac:	4299      	cmp	r1, r3
 80004ae:	d92a      	bls.n	8000506 <__udivmoddi4+0x29e>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4463      	add	r3, ip
 80004b4:	1a5b      	subs	r3, r3, r1
 80004b6:	b2a4      	uxth	r4, r4
 80004b8:	fbb3 f1f8 	udiv	r1, r3, r8
 80004bc:	fb08 3311 	mls	r3, r8, r1, r3
 80004c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004c4:	fb01 f307 	mul.w	r3, r1, r7
 80004c8:	42a3      	cmp	r3, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x276>
 80004cc:	eb1c 0404 	adds.w	r4, ip, r4
 80004d0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004d4:	d213      	bcs.n	80004fe <__udivmoddi4+0x296>
 80004d6:	42a3      	cmp	r3, r4
 80004d8:	d911      	bls.n	80004fe <__udivmoddi4+0x296>
 80004da:	3902      	subs	r1, #2
 80004dc:	4464      	add	r4, ip
 80004de:	1ae4      	subs	r4, r4, r3
 80004e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004e4:	e739      	b.n	800035a <__udivmoddi4+0xf2>
 80004e6:	4604      	mov	r4, r0
 80004e8:	e6f0      	b.n	80002cc <__udivmoddi4+0x64>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e706      	b.n	80002fc <__udivmoddi4+0x94>
 80004ee:	45c8      	cmp	r8, r9
 80004f0:	d2ae      	bcs.n	8000450 <__udivmoddi4+0x1e8>
 80004f2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004f6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004fa:	3801      	subs	r0, #1
 80004fc:	e7a8      	b.n	8000450 <__udivmoddi4+0x1e8>
 80004fe:	4631      	mov	r1, r6
 8000500:	e7ed      	b.n	80004de <__udivmoddi4+0x276>
 8000502:	4603      	mov	r3, r0
 8000504:	e799      	b.n	800043a <__udivmoddi4+0x1d2>
 8000506:	4630      	mov	r0, r6
 8000508:	e7d4      	b.n	80004b4 <__udivmoddi4+0x24c>
 800050a:	46d6      	mov	lr, sl
 800050c:	e77f      	b.n	800040e <__udivmoddi4+0x1a6>
 800050e:	4463      	add	r3, ip
 8000510:	3802      	subs	r0, #2
 8000512:	e74d      	b.n	80003b0 <__udivmoddi4+0x148>
 8000514:	4606      	mov	r6, r0
 8000516:	4623      	mov	r3, r4
 8000518:	4608      	mov	r0, r1
 800051a:	e70f      	b.n	800033c <__udivmoddi4+0xd4>
 800051c:	3e02      	subs	r6, #2
 800051e:	4463      	add	r3, ip
 8000520:	e730      	b.n	8000384 <__udivmoddi4+0x11c>
 8000522:	bf00      	nop

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <HAL_CAN_RxFifo0MsgPendingCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000528:	b590      	push	{r4, r7, lr}
 800052a:	b083      	sub	sp, #12
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]

	static can_data_t msg;
	static CAN_RxHeaderTypeDef RxHeader;
	if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, msg.data) != HAL_OK ) return;
 8000530:	4b0b      	ldr	r3, [pc, #44]	@ (8000560 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8000532:	4a0c      	ldr	r2, [pc, #48]	@ (8000564 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8000534:	2100      	movs	r1, #0
 8000536:	480c      	ldr	r0, [pc, #48]	@ (8000568 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 8000538:	f000 ff02 	bl	8001340 <HAL_CAN_GetRxMessage>
 800053c:	4603      	mov	r3, r0
 800053e:	2b00      	cmp	r3, #0
 8000540:	d10a      	bne.n	8000558 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>
	can_functions[msg.ID - 1](msg);
 8000542:	4b07      	ldr	r3, [pc, #28]	@ (8000560 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8000544:	881b      	ldrh	r3, [r3, #0]
 8000546:	3b01      	subs	r3, #1
 8000548:	4a08      	ldr	r2, [pc, #32]	@ (800056c <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 800054a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800054e:	4b04      	ldr	r3, [pc, #16]	@ (8000560 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8000550:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000554:	47a0      	blx	r4
 8000556:	e000      	b.n	800055a <HAL_CAN_RxFifo0MsgPendingCallback+0x32>
	if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, msg.data) != HAL_OK ) return;
 8000558:	bf00      	nop

}
 800055a:	370c      	adds	r7, #12
 800055c:	46bd      	mov	sp, r7
 800055e:	bd90      	pop	{r4, r7, pc}
 8000560:	200005dc 	.word	0x200005dc
 8000564:	200005c0 	.word	0x200005c0
 8000568:	20000030 	.word	0x20000030
 800056c:	20000000 	.word	0x20000000

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000574:	f000 fc37 	bl	8000de6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000578:	f000 f814 	bl	80005a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057c:	f000 f92e 	bl	80007dc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000580:	f000 f8ce 	bl	8000720 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000584:	f000 f8fc 	bl	8000780 <MX_USB_OTG_FS_PCD_Init>
  MX_CAN1_Init();
 8000588:	f000 f876 	bl	8000678 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */

  HAL_CAN_Start(&hcan1);
 800058c:	4804      	ldr	r0, [pc, #16]	@ (80005a0 <main+0x30>)
 800058e:	f000 fe93 	bl	80012b8 <HAL_CAN_Start>


  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000592:	2102      	movs	r1, #2
 8000594:	4802      	ldr	r0, [pc, #8]	@ (80005a0 <main+0x30>)
 8000596:	f000 fff5 	bl	8001584 <HAL_CAN_ActivateNotification>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800059a:	bf00      	nop
 800059c:	e7fd      	b.n	800059a <main+0x2a>
 800059e:	bf00      	nop
 80005a0:	20000030 	.word	0x20000030

080005a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b094      	sub	sp, #80	@ 0x50
 80005a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005aa:	f107 031c 	add.w	r3, r7, #28
 80005ae:	2234      	movs	r2, #52	@ 0x34
 80005b0:	2100      	movs	r1, #0
 80005b2:	4618      	mov	r0, r3
 80005b4:	f003 ff17 	bl	80043e6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b8:	f107 0308 	add.w	r3, r7, #8
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	605a      	str	r2, [r3, #4]
 80005c2:	609a      	str	r2, [r3, #8]
 80005c4:	60da      	str	r2, [r3, #12]
 80005c6:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005c8:	f001 fe44 	bl	8002254 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005cc:	4b28      	ldr	r3, [pc, #160]	@ (8000670 <SystemClock_Config+0xcc>)
 80005ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005d0:	4a27      	ldr	r2, [pc, #156]	@ (8000670 <SystemClock_Config+0xcc>)
 80005d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80005d8:	4b25      	ldr	r3, [pc, #148]	@ (8000670 <SystemClock_Config+0xcc>)
 80005da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005e0:	607b      	str	r3, [r7, #4]
 80005e2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005e4:	4b23      	ldr	r3, [pc, #140]	@ (8000674 <SystemClock_Config+0xd0>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80005ec:	4a21      	ldr	r2, [pc, #132]	@ (8000674 <SystemClock_Config+0xd0>)
 80005ee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005f2:	6013      	str	r3, [r2, #0]
 80005f4:	4b1f      	ldr	r3, [pc, #124]	@ (8000674 <SystemClock_Config+0xd0>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005fc:	603b      	str	r3, [r7, #0]
 80005fe:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000600:	2301      	movs	r3, #1
 8000602:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000604:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000608:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800060a:	2302      	movs	r3, #2
 800060c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800060e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000612:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000614:	2304      	movs	r3, #4
 8000616:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000618:	2360      	movs	r3, #96	@ 0x60
 800061a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800061c:	2302      	movs	r3, #2
 800061e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000620:	2304      	movs	r3, #4
 8000622:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000624:	2302      	movs	r3, #2
 8000626:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000628:	f107 031c 	add.w	r3, r7, #28
 800062c:	4618      	mov	r0, r3
 800062e:	f001 fe21 	bl	8002274 <HAL_RCC_OscConfig>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000638:	f000 f9d8 	bl	80009ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800063c:	230f      	movs	r3, #15
 800063e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000640:	2302      	movs	r3, #2
 8000642:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 8000644:	2390      	movs	r3, #144	@ 0x90
 8000646:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000648:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800064c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800064e:	2300      	movs	r3, #0
 8000650:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000652:	f107 0308 	add.w	r3, r7, #8
 8000656:	2100      	movs	r1, #0
 8000658:	4618      	mov	r0, r3
 800065a:	f002 f8b9 	bl	80027d0 <HAL_RCC_ClockConfig>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000664:	f000 f9c2 	bl	80009ec <Error_Handler>
  }
}
 8000668:	bf00      	nop
 800066a:	3750      	adds	r7, #80	@ 0x50
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	40023800 	.word	0x40023800
 8000674:	40007000 	.word	0x40007000

08000678 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b08a      	sub	sp, #40	@ 0x28
 800067c:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800067e:	4b26      	ldr	r3, [pc, #152]	@ (8000718 <MX_CAN1_Init+0xa0>)
 8000680:	4a26      	ldr	r2, [pc, #152]	@ (800071c <MX_CAN1_Init+0xa4>)
 8000682:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 8000684:	4b24      	ldr	r3, [pc, #144]	@ (8000718 <MX_CAN1_Init+0xa0>)
 8000686:	2204      	movs	r2, #4
 8000688:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800068a:	4b23      	ldr	r3, [pc, #140]	@ (8000718 <MX_CAN1_Init+0xa0>)
 800068c:	2200      	movs	r2, #0
 800068e:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_2TQ;
 8000690:	4b21      	ldr	r3, [pc, #132]	@ (8000718 <MX_CAN1_Init+0xa0>)
 8000692:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000696:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000698:	4b1f      	ldr	r3, [pc, #124]	@ (8000718 <MX_CAN1_Init+0xa0>)
 800069a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800069e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 80006a0:	4b1d      	ldr	r3, [pc, #116]	@ (8000718 <MX_CAN1_Init+0xa0>)
 80006a2:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80006a6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80006a8:	4b1b      	ldr	r3, [pc, #108]	@ (8000718 <MX_CAN1_Init+0xa0>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80006ae:	4b1a      	ldr	r3, [pc, #104]	@ (8000718 <MX_CAN1_Init+0xa0>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80006b4:	4b18      	ldr	r3, [pc, #96]	@ (8000718 <MX_CAN1_Init+0xa0>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80006ba:	4b17      	ldr	r3, [pc, #92]	@ (8000718 <MX_CAN1_Init+0xa0>)
 80006bc:	2200      	movs	r2, #0
 80006be:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80006c0:	4b15      	ldr	r3, [pc, #84]	@ (8000718 <MX_CAN1_Init+0xa0>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80006c6:	4b14      	ldr	r3, [pc, #80]	@ (8000718 <MX_CAN1_Init+0xa0>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80006cc:	4812      	ldr	r0, [pc, #72]	@ (8000718 <MX_CAN1_Init+0xa0>)
 80006ce:	f000 fc0b 	bl	8000ee8 <HAL_CAN_Init>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <MX_CAN1_Init+0x64>
  {
    Error_Handler();
 80006d8:	f000 f988 	bl	80009ec <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef canfilterconfig;

      canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80006dc:	2301      	movs	r3, #1
 80006de:	623b      	str	r3, [r7, #32]
      canfilterconfig.FilterBank = 18;  // which filter bank to use from the assigned ones
 80006e0:	2312      	movs	r3, #18
 80006e2:	617b      	str	r3, [r7, #20]
      canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80006e4:	2300      	movs	r3, #0
 80006e6:	613b      	str	r3, [r7, #16]
      canfilterconfig.FilterIdHigh = 0x001<<5;
 80006e8:	2320      	movs	r3, #32
 80006ea:	603b      	str	r3, [r7, #0]
      canfilterconfig.FilterIdLow = 0;
 80006ec:	2300      	movs	r3, #0
 80006ee:	607b      	str	r3, [r7, #4]
      canfilterconfig.FilterMaskIdHigh = 0x001<<5;
 80006f0:	2320      	movs	r3, #32
 80006f2:	60bb      	str	r3, [r7, #8]
      canfilterconfig.FilterMaskIdLow = 0x0000;
 80006f4:	2300      	movs	r3, #0
 80006f6:	60fb      	str	r3, [r7, #12]
      canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80006f8:	2300      	movs	r3, #0
 80006fa:	61bb      	str	r3, [r7, #24]
      canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80006fc:	2301      	movs	r3, #1
 80006fe:	61fb      	str	r3, [r7, #28]
      canfilterconfig.SlaveStartFilterBank = 20;  // how many filters to assign to the CAN1 (master can)
 8000700:	2314      	movs	r3, #20
 8000702:	627b      	str	r3, [r7, #36]	@ 0x24

      HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 8000704:	463b      	mov	r3, r7
 8000706:	4619      	mov	r1, r3
 8000708:	4803      	ldr	r0, [pc, #12]	@ (8000718 <MX_CAN1_Init+0xa0>)
 800070a:	f000 fce9 	bl	80010e0 <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN1_Init 2 */

}
 800070e:	bf00      	nop
 8000710:	3728      	adds	r7, #40	@ 0x28
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	20000030 	.word	0x20000030
 800071c:	40006400 	.word	0x40006400

08000720 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000724:	4b14      	ldr	r3, [pc, #80]	@ (8000778 <MX_USART3_UART_Init+0x58>)
 8000726:	4a15      	ldr	r2, [pc, #84]	@ (800077c <MX_USART3_UART_Init+0x5c>)
 8000728:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800072a:	4b13      	ldr	r3, [pc, #76]	@ (8000778 <MX_USART3_UART_Init+0x58>)
 800072c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000730:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000732:	4b11      	ldr	r3, [pc, #68]	@ (8000778 <MX_USART3_UART_Init+0x58>)
 8000734:	2200      	movs	r2, #0
 8000736:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000738:	4b0f      	ldr	r3, [pc, #60]	@ (8000778 <MX_USART3_UART_Init+0x58>)
 800073a:	2200      	movs	r2, #0
 800073c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800073e:	4b0e      	ldr	r3, [pc, #56]	@ (8000778 <MX_USART3_UART_Init+0x58>)
 8000740:	2200      	movs	r2, #0
 8000742:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000744:	4b0c      	ldr	r3, [pc, #48]	@ (8000778 <MX_USART3_UART_Init+0x58>)
 8000746:	220c      	movs	r2, #12
 8000748:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800074a:	4b0b      	ldr	r3, [pc, #44]	@ (8000778 <MX_USART3_UART_Init+0x58>)
 800074c:	2200      	movs	r2, #0
 800074e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000750:	4b09      	ldr	r3, [pc, #36]	@ (8000778 <MX_USART3_UART_Init+0x58>)
 8000752:	2200      	movs	r2, #0
 8000754:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000756:	4b08      	ldr	r3, [pc, #32]	@ (8000778 <MX_USART3_UART_Init+0x58>)
 8000758:	2200      	movs	r2, #0
 800075a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800075c:	4b06      	ldr	r3, [pc, #24]	@ (8000778 <MX_USART3_UART_Init+0x58>)
 800075e:	2200      	movs	r2, #0
 8000760:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000762:	4805      	ldr	r0, [pc, #20]	@ (8000778 <MX_USART3_UART_Init+0x58>)
 8000764:	f002 fe82 	bl	800346c <HAL_UART_Init>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800076e:	f000 f93d 	bl	80009ec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000772:	bf00      	nop
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	20000058 	.word	0x20000058
 800077c:	40004800 	.word	0x40004800

08000780 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000784:	4b14      	ldr	r3, [pc, #80]	@ (80007d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000786:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800078a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800078c:	4b12      	ldr	r3, [pc, #72]	@ (80007d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800078e:	2206      	movs	r2, #6
 8000790:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000792:	4b11      	ldr	r3, [pc, #68]	@ (80007d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000794:	2202      	movs	r2, #2
 8000796:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000798:	4b0f      	ldr	r3, [pc, #60]	@ (80007d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800079a:	2200      	movs	r2, #0
 800079c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800079e:	4b0e      	ldr	r3, [pc, #56]	@ (80007d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007a0:	2202      	movs	r2, #2
 80007a2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80007a4:	4b0c      	ldr	r3, [pc, #48]	@ (80007d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007a6:	2201      	movs	r2, #1
 80007a8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80007aa:	4b0b      	ldr	r3, [pc, #44]	@ (80007d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80007b0:	4b09      	ldr	r3, [pc, #36]	@ (80007d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80007b6:	4b08      	ldr	r3, [pc, #32]	@ (80007d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007b8:	2201      	movs	r2, #1
 80007ba:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80007bc:	4b06      	ldr	r3, [pc, #24]	@ (80007d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007be:	2200      	movs	r2, #0
 80007c0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80007c2:	4805      	ldr	r0, [pc, #20]	@ (80007d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007c4:	f001 fc0b 	bl	8001fde <HAL_PCD_Init>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80007ce:	f000 f90d 	bl	80009ec <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	200000e0 	.word	0x200000e0

080007dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b08c      	sub	sp, #48	@ 0x30
 80007e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e2:	f107 031c 	add.w	r3, r7, #28
 80007e6:	2200      	movs	r2, #0
 80007e8:	601a      	str	r2, [r3, #0]
 80007ea:	605a      	str	r2, [r3, #4]
 80007ec:	609a      	str	r2, [r3, #8]
 80007ee:	60da      	str	r2, [r3, #12]
 80007f0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007f2:	4b78      	ldr	r3, [pc, #480]	@ (80009d4 <MX_GPIO_Init+0x1f8>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f6:	4a77      	ldr	r2, [pc, #476]	@ (80009d4 <MX_GPIO_Init+0x1f8>)
 80007f8:	f043 0304 	orr.w	r3, r3, #4
 80007fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007fe:	4b75      	ldr	r3, [pc, #468]	@ (80009d4 <MX_GPIO_Init+0x1f8>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000802:	f003 0304 	and.w	r3, r3, #4
 8000806:	61bb      	str	r3, [r7, #24]
 8000808:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800080a:	4b72      	ldr	r3, [pc, #456]	@ (80009d4 <MX_GPIO_Init+0x1f8>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080e:	4a71      	ldr	r2, [pc, #452]	@ (80009d4 <MX_GPIO_Init+0x1f8>)
 8000810:	f043 0320 	orr.w	r3, r3, #32
 8000814:	6313      	str	r3, [r2, #48]	@ 0x30
 8000816:	4b6f      	ldr	r3, [pc, #444]	@ (80009d4 <MX_GPIO_Init+0x1f8>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081a:	f003 0320 	and.w	r3, r3, #32
 800081e:	617b      	str	r3, [r7, #20]
 8000820:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000822:	4b6c      	ldr	r3, [pc, #432]	@ (80009d4 <MX_GPIO_Init+0x1f8>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000826:	4a6b      	ldr	r2, [pc, #428]	@ (80009d4 <MX_GPIO_Init+0x1f8>)
 8000828:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800082c:	6313      	str	r3, [r2, #48]	@ 0x30
 800082e:	4b69      	ldr	r3, [pc, #420]	@ (80009d4 <MX_GPIO_Init+0x1f8>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000832:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000836:	613b      	str	r3, [r7, #16]
 8000838:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800083a:	4b66      	ldr	r3, [pc, #408]	@ (80009d4 <MX_GPIO_Init+0x1f8>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083e:	4a65      	ldr	r2, [pc, #404]	@ (80009d4 <MX_GPIO_Init+0x1f8>)
 8000840:	f043 0301 	orr.w	r3, r3, #1
 8000844:	6313      	str	r3, [r2, #48]	@ 0x30
 8000846:	4b63      	ldr	r3, [pc, #396]	@ (80009d4 <MX_GPIO_Init+0x1f8>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084a:	f003 0301 	and.w	r3, r3, #1
 800084e:	60fb      	str	r3, [r7, #12]
 8000850:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000852:	4b60      	ldr	r3, [pc, #384]	@ (80009d4 <MX_GPIO_Init+0x1f8>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000856:	4a5f      	ldr	r2, [pc, #380]	@ (80009d4 <MX_GPIO_Init+0x1f8>)
 8000858:	f043 0302 	orr.w	r3, r3, #2
 800085c:	6313      	str	r3, [r2, #48]	@ 0x30
 800085e:	4b5d      	ldr	r3, [pc, #372]	@ (80009d4 <MX_GPIO_Init+0x1f8>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000862:	f003 0302 	and.w	r3, r3, #2
 8000866:	60bb      	str	r3, [r7, #8]
 8000868:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800086a:	4b5a      	ldr	r3, [pc, #360]	@ (80009d4 <MX_GPIO_Init+0x1f8>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086e:	4a59      	ldr	r2, [pc, #356]	@ (80009d4 <MX_GPIO_Init+0x1f8>)
 8000870:	f043 0308 	orr.w	r3, r3, #8
 8000874:	6313      	str	r3, [r2, #48]	@ 0x30
 8000876:	4b57      	ldr	r3, [pc, #348]	@ (80009d4 <MX_GPIO_Init+0x1f8>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087a:	f003 0308 	and.w	r3, r3, #8
 800087e:	607b      	str	r3, [r7, #4]
 8000880:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000882:	4b54      	ldr	r3, [pc, #336]	@ (80009d4 <MX_GPIO_Init+0x1f8>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000886:	4a53      	ldr	r2, [pc, #332]	@ (80009d4 <MX_GPIO_Init+0x1f8>)
 8000888:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800088c:	6313      	str	r3, [r2, #48]	@ 0x30
 800088e:	4b51      	ldr	r3, [pc, #324]	@ (80009d4 <MX_GPIO_Init+0x1f8>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000892:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000896:	603b      	str	r3, [r7, #0]
 8000898:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LD1_Pin|LD2_Pin, GPIO_PIN_RESET);
 800089a:	2200      	movs	r2, #0
 800089c:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80008a0:	484d      	ldr	r0, [pc, #308]	@ (80009d8 <MX_GPIO_Init+0x1fc>)
 80008a2:	f001 fb83 	bl	8001fac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ULD1_Pin|LD3_Pin|ULD2_Pin, GPIO_PIN_RESET);
 80008a6:	2200      	movs	r2, #0
 80008a8:	f244 0181 	movw	r1, #16513	@ 0x4081
 80008ac:	484b      	ldr	r0, [pc, #300]	@ (80009dc <MX_GPIO_Init+0x200>)
 80008ae:	f001 fb7d 	bl	8001fac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008b2:	2200      	movs	r2, #0
 80008b4:	2140      	movs	r1, #64	@ 0x40
 80008b6:	484a      	ldr	r0, [pc, #296]	@ (80009e0 <MX_GPIO_Init+0x204>)
 80008b8:	f001 fb78 	bl	8001fac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80008bc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008c2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80008c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	2300      	movs	r3, #0
 80008ca:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80008cc:	f107 031c 	add.w	r3, r7, #28
 80008d0:	4619      	mov	r1, r3
 80008d2:	4844      	ldr	r0, [pc, #272]	@ (80009e4 <MX_GPIO_Init+0x208>)
 80008d4:	f001 f9be 	bl	8001c54 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD2_Pin;
 80008d8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80008dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008de:	2301      	movs	r3, #1
 80008e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e6:	2300      	movs	r3, #0
 80008e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80008ea:	f107 031c 	add.w	r3, r7, #28
 80008ee:	4619      	mov	r1, r3
 80008f0:	4839      	ldr	r0, [pc, #228]	@ (80009d8 <MX_GPIO_Init+0x1fc>)
 80008f2:	f001 f9af 	bl	8001c54 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80008f6:	2332      	movs	r3, #50	@ 0x32
 80008f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fa:	2302      	movs	r3, #2
 80008fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fe:	2300      	movs	r3, #0
 8000900:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000902:	2303      	movs	r3, #3
 8000904:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000906:	230b      	movs	r3, #11
 8000908:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800090a:	f107 031c 	add.w	r3, r7, #28
 800090e:	4619      	mov	r1, r3
 8000910:	4834      	ldr	r0, [pc, #208]	@ (80009e4 <MX_GPIO_Init+0x208>)
 8000912:	f001 f99f 	bl	8001c54 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000916:	2386      	movs	r3, #134	@ 0x86
 8000918:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091a:	2302      	movs	r3, #2
 800091c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	2300      	movs	r3, #0
 8000920:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000922:	2303      	movs	r3, #3
 8000924:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000926:	230b      	movs	r3, #11
 8000928:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800092a:	f107 031c 	add.w	r3, r7, #28
 800092e:	4619      	mov	r1, r3
 8000930:	482d      	ldr	r0, [pc, #180]	@ (80009e8 <MX_GPIO_Init+0x20c>)
 8000932:	f001 f98f 	bl	8001c54 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULD1_Pin LD3_Pin ULD2_Pin */
  GPIO_InitStruct.Pin = ULD1_Pin|LD3_Pin|ULD2_Pin;
 8000936:	f244 0381 	movw	r3, #16513	@ 0x4081
 800093a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093c:	2301      	movs	r3, #1
 800093e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000944:	2300      	movs	r3, #0
 8000946:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000948:	f107 031c 	add.w	r3, r7, #28
 800094c:	4619      	mov	r1, r3
 800094e:	4823      	ldr	r0, [pc, #140]	@ (80009dc <MX_GPIO_Init+0x200>)
 8000950:	f001 f980 	bl	8001c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000954:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000958:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095a:	2302      	movs	r3, #2
 800095c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000962:	2303      	movs	r3, #3
 8000964:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000966:	230b      	movs	r3, #11
 8000968:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800096a:	f107 031c 	add.w	r3, r7, #28
 800096e:	4619      	mov	r1, r3
 8000970:	481a      	ldr	r0, [pc, #104]	@ (80009dc <MX_GPIO_Init+0x200>)
 8000972:	f001 f96f 	bl	8001c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000976:	2340      	movs	r3, #64	@ 0x40
 8000978:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097a:	2301      	movs	r3, #1
 800097c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000982:	2300      	movs	r3, #0
 8000984:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000986:	f107 031c 	add.w	r3, r7, #28
 800098a:	4619      	mov	r1, r3
 800098c:	4814      	ldr	r0, [pc, #80]	@ (80009e0 <MX_GPIO_Init+0x204>)
 800098e:	f001 f961 	bl	8001c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000992:	2380      	movs	r3, #128	@ 0x80
 8000994:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000996:	2300      	movs	r3, #0
 8000998:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800099e:	f107 031c 	add.w	r3, r7, #28
 80009a2:	4619      	mov	r1, r3
 80009a4:	480e      	ldr	r0, [pc, #56]	@ (80009e0 <MX_GPIO_Init+0x204>)
 80009a6:	f001 f955 	bl	8001c54 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80009aa:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80009ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b0:	2302      	movs	r3, #2
 80009b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b8:	2303      	movs	r3, #3
 80009ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009bc:	230b      	movs	r3, #11
 80009be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009c0:	f107 031c 	add.w	r3, r7, #28
 80009c4:	4619      	mov	r1, r3
 80009c6:	4806      	ldr	r0, [pc, #24]	@ (80009e0 <MX_GPIO_Init+0x204>)
 80009c8:	f001 f944 	bl	8001c54 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009cc:	bf00      	nop
 80009ce:	3730      	adds	r7, #48	@ 0x30
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	40023800 	.word	0x40023800
 80009d8:	40021400 	.word	0x40021400
 80009dc:	40020400 	.word	0x40020400
 80009e0:	40021800 	.word	0x40021800
 80009e4:	40020800 	.word	0x40020800
 80009e8:	40020000 	.word	0x40020000

080009ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009f0:	b672      	cpsid	i
}
 80009f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009f4:	bf00      	nop
 80009f6:	e7fd      	b.n	80009f4 <Error_Handler+0x8>

080009f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b083      	sub	sp, #12
 80009fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80009fe:	4b0f      	ldr	r3, [pc, #60]	@ (8000a3c <HAL_MspInit+0x44>)
 8000a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a02:	4a0e      	ldr	r2, [pc, #56]	@ (8000a3c <HAL_MspInit+0x44>)
 8000a04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a08:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000a3c <HAL_MspInit+0x44>)
 8000a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a12:	607b      	str	r3, [r7, #4]
 8000a14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a16:	4b09      	ldr	r3, [pc, #36]	@ (8000a3c <HAL_MspInit+0x44>)
 8000a18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a1a:	4a08      	ldr	r2, [pc, #32]	@ (8000a3c <HAL_MspInit+0x44>)
 8000a1c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a20:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a22:	4b06      	ldr	r3, [pc, #24]	@ (8000a3c <HAL_MspInit+0x44>)
 8000a24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a2a:	603b      	str	r3, [r7, #0]
 8000a2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a2e:	bf00      	nop
 8000a30:	370c      	adds	r7, #12
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	40023800 	.word	0x40023800

08000a40 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b08a      	sub	sp, #40	@ 0x28
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a48:	f107 0314 	add.w	r3, r7, #20
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	605a      	str	r2, [r3, #4]
 8000a52:	609a      	str	r2, [r3, #8]
 8000a54:	60da      	str	r2, [r3, #12]
 8000a56:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a23      	ldr	r2, [pc, #140]	@ (8000aec <HAL_CAN_MspInit+0xac>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d13f      	bne.n	8000ae2 <HAL_CAN_MspInit+0xa2>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000a62:	4b23      	ldr	r3, [pc, #140]	@ (8000af0 <HAL_CAN_MspInit+0xb0>)
 8000a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a66:	4a22      	ldr	r2, [pc, #136]	@ (8000af0 <HAL_CAN_MspInit+0xb0>)
 8000a68:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000a6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a6e:	4b20      	ldr	r3, [pc, #128]	@ (8000af0 <HAL_CAN_MspInit+0xb0>)
 8000a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000a76:	613b      	str	r3, [r7, #16]
 8000a78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a7a:	4b1d      	ldr	r3, [pc, #116]	@ (8000af0 <HAL_CAN_MspInit+0xb0>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7e:	4a1c      	ldr	r2, [pc, #112]	@ (8000af0 <HAL_CAN_MspInit+0xb0>)
 8000a80:	f043 0308 	orr.w	r3, r3, #8
 8000a84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a86:	4b1a      	ldr	r3, [pc, #104]	@ (8000af0 <HAL_CAN_MspInit+0xb0>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8a:	f003 0308 	and.w	r3, r3, #8
 8000a8e:	60fb      	str	r3, [r7, #12]
 8000a90:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a92:	2301      	movs	r3, #1
 8000a94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a96:	2302      	movs	r3, #2
 8000a98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a9e:	2303      	movs	r3, #3
 8000aa0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000aa2:	2309      	movs	r3, #9
 8000aa4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000aa6:	f107 0314 	add.w	r3, r7, #20
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4811      	ldr	r0, [pc, #68]	@ (8000af4 <HAL_CAN_MspInit+0xb4>)
 8000aae:	f001 f8d1 	bl	8001c54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aba:	2300      	movs	r3, #0
 8000abc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000abe:	2303      	movs	r3, #3
 8000ac0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000ac2:	2309      	movs	r3, #9
 8000ac4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ac6:	f107 0314 	add.w	r3, r7, #20
 8000aca:	4619      	mov	r1, r3
 8000acc:	4809      	ldr	r0, [pc, #36]	@ (8000af4 <HAL_CAN_MspInit+0xb4>)
 8000ace:	f001 f8c1 	bl	8001c54 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	2014      	movs	r0, #20
 8000ad8:	f001 f885 	bl	8001be6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000adc:	2014      	movs	r0, #20
 8000ade:	f001 f89e 	bl	8001c1e <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8000ae2:	bf00      	nop
 8000ae4:	3728      	adds	r7, #40	@ 0x28
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	40006400 	.word	0x40006400
 8000af0:	40023800 	.word	0x40023800
 8000af4:	40020c00 	.word	0x40020c00

08000af8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b0ae      	sub	sp, #184	@ 0xb8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b00:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	605a      	str	r2, [r3, #4]
 8000b0a:	609a      	str	r2, [r3, #8]
 8000b0c:	60da      	str	r2, [r3, #12]
 8000b0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b10:	f107 0314 	add.w	r3, r7, #20
 8000b14:	2290      	movs	r2, #144	@ 0x90
 8000b16:	2100      	movs	r1, #0
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f003 fc64 	bl	80043e6 <memset>
  if(huart->Instance==USART3)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	4a22      	ldr	r2, [pc, #136]	@ (8000bac <HAL_UART_MspInit+0xb4>)
 8000b24:	4293      	cmp	r3, r2
 8000b26:	d13c      	bne.n	8000ba2 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000b28:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b2c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b32:	f107 0314 	add.w	r3, r7, #20
 8000b36:	4618      	mov	r0, r3
 8000b38:	f002 f870 	bl	8002c1c <HAL_RCCEx_PeriphCLKConfig>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000b42:	f7ff ff53 	bl	80009ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b46:	4b1a      	ldr	r3, [pc, #104]	@ (8000bb0 <HAL_UART_MspInit+0xb8>)
 8000b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b4a:	4a19      	ldr	r2, [pc, #100]	@ (8000bb0 <HAL_UART_MspInit+0xb8>)
 8000b4c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000b50:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b52:	4b17      	ldr	r3, [pc, #92]	@ (8000bb0 <HAL_UART_MspInit+0xb8>)
 8000b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b56:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000b5a:	613b      	str	r3, [r7, #16]
 8000b5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b5e:	4b14      	ldr	r3, [pc, #80]	@ (8000bb0 <HAL_UART_MspInit+0xb8>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b62:	4a13      	ldr	r2, [pc, #76]	@ (8000bb0 <HAL_UART_MspInit+0xb8>)
 8000b64:	f043 0308 	orr.w	r3, r3, #8
 8000b68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b6a:	4b11      	ldr	r3, [pc, #68]	@ (8000bb0 <HAL_UART_MspInit+0xb8>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6e:	f003 0308 	and.w	r3, r3, #8
 8000b72:	60fb      	str	r3, [r7, #12]
 8000b74:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000b76:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000b7a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7e:	2302      	movs	r3, #2
 8000b80:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b84:	2300      	movs	r3, #0
 8000b86:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b8a:	2303      	movs	r3, #3
 8000b8c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b90:	2307      	movs	r3, #7
 8000b92:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b96:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4805      	ldr	r0, [pc, #20]	@ (8000bb4 <HAL_UART_MspInit+0xbc>)
 8000b9e:	f001 f859 	bl	8001c54 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000ba2:	bf00      	nop
 8000ba4:	37b8      	adds	r7, #184	@ 0xb8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	40004800 	.word	0x40004800
 8000bb0:	40023800 	.word	0x40023800
 8000bb4:	40020c00 	.word	0x40020c00

08000bb8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b0ae      	sub	sp, #184	@ 0xb8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	601a      	str	r2, [r3, #0]
 8000bc8:	605a      	str	r2, [r3, #4]
 8000bca:	609a      	str	r2, [r3, #8]
 8000bcc:	60da      	str	r2, [r3, #12]
 8000bce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bd0:	f107 0314 	add.w	r3, r7, #20
 8000bd4:	2290      	movs	r2, #144	@ 0x90
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f003 fc04 	bl	80043e6 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000be6:	d159      	bne.n	8000c9c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000be8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8000bec:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bf4:	f107 0314 	add.w	r3, r7, #20
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f002 f80f 	bl	8002c1c <HAL_RCCEx_PeriphCLKConfig>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000c04:	f7ff fef2 	bl	80009ec <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c08:	4b26      	ldr	r3, [pc, #152]	@ (8000ca4 <HAL_PCD_MspInit+0xec>)
 8000c0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c0c:	4a25      	ldr	r2, [pc, #148]	@ (8000ca4 <HAL_PCD_MspInit+0xec>)
 8000c0e:	f043 0301 	orr.w	r3, r3, #1
 8000c12:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c14:	4b23      	ldr	r3, [pc, #140]	@ (8000ca4 <HAL_PCD_MspInit+0xec>)
 8000c16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c18:	f003 0301 	and.w	r3, r3, #1
 8000c1c:	613b      	str	r3, [r7, #16]
 8000c1e:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000c20:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000c24:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c28:	2302      	movs	r3, #2
 8000c2a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c34:	2303      	movs	r3, #3
 8000c36:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000c3a:	230a      	movs	r3, #10
 8000c3c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c40:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000c44:	4619      	mov	r1, r3
 8000c46:	4818      	ldr	r0, [pc, #96]	@ (8000ca8 <HAL_PCD_MspInit+0xf0>)
 8000c48:	f001 f804 	bl	8001c54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000c4c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c50:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c54:	2300      	movs	r3, #0
 8000c56:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000c60:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000c64:	4619      	mov	r1, r3
 8000c66:	4810      	ldr	r0, [pc, #64]	@ (8000ca8 <HAL_PCD_MspInit+0xf0>)
 8000c68:	f000 fff4 	bl	8001c54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000c6c:	4b0d      	ldr	r3, [pc, #52]	@ (8000ca4 <HAL_PCD_MspInit+0xec>)
 8000c6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c70:	4a0c      	ldr	r2, [pc, #48]	@ (8000ca4 <HAL_PCD_MspInit+0xec>)
 8000c72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c76:	6353      	str	r3, [r2, #52]	@ 0x34
 8000c78:	4b0a      	ldr	r3, [pc, #40]	@ (8000ca4 <HAL_PCD_MspInit+0xec>)
 8000c7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c80:	60fb      	str	r3, [r7, #12]
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	4b07      	ldr	r3, [pc, #28]	@ (8000ca4 <HAL_PCD_MspInit+0xec>)
 8000c86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c88:	4a06      	ldr	r2, [pc, #24]	@ (8000ca4 <HAL_PCD_MspInit+0xec>)
 8000c8a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c8e:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c90:	4b04      	ldr	r3, [pc, #16]	@ (8000ca4 <HAL_PCD_MspInit+0xec>)
 8000c92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c94:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c98:	60bb      	str	r3, [r7, #8]
 8000c9a:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8000c9c:	bf00      	nop
 8000c9e:	37b8      	adds	r7, #184	@ 0xb8
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	40023800 	.word	0x40023800
 8000ca8:	40020000 	.word	0x40020000

08000cac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cb0:	bf00      	nop
 8000cb2:	e7fd      	b.n	8000cb0 <NMI_Handler+0x4>

08000cb4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cb8:	bf00      	nop
 8000cba:	e7fd      	b.n	8000cb8 <HardFault_Handler+0x4>

08000cbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cc0:	bf00      	nop
 8000cc2:	e7fd      	b.n	8000cc0 <MemManage_Handler+0x4>

08000cc4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cc8:	bf00      	nop
 8000cca:	e7fd      	b.n	8000cc8 <BusFault_Handler+0x4>

08000ccc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cd0:	bf00      	nop
 8000cd2:	e7fd      	b.n	8000cd0 <UsageFault_Handler+0x4>

08000cd4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cd8:	bf00      	nop
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr

08000ce2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ce6:	bf00      	nop
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr

08000cf0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cf4:	bf00      	nop
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr

08000cfe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d02:	f000 f8ad 	bl	8000e60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d06:	bf00      	nop
 8000d08:	bd80      	pop	{r7, pc}
	...

08000d0c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000d10:	4802      	ldr	r0, [pc, #8]	@ (8000d1c <CAN1_RX0_IRQHandler+0x10>)
 8000d12:	f000 fc5d 	bl	80015d0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000d16:	bf00      	nop
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	20000030 	.word	0x20000030

08000d20 <msg1_handler>:

const int can_num_functions = 2;

static void nop(can_data_t msg) { return; }

static void msg1_handler(can_data_t msg) {
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b084      	sub	sp, #16
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	1d3b      	adds	r3, r7, #4
 8000d28:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, msg.bval);
 8000d2c:	7a3b      	ldrb	r3, [r7, #8]
 8000d2e:	461a      	mov	r2, r3
 8000d30:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d34:	4803      	ldr	r0, [pc, #12]	@ (8000d44 <msg1_handler+0x24>)
 8000d36:	f001 f939 	bl	8001fac <HAL_GPIO_WritePin>
}
 8000d3a:	bf00      	nop
 8000d3c:	3710      	adds	r7, #16
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	40021400 	.word	0x40021400

08000d48 <msg2_handler>:

static void msg2_handler(can_data_t msg) {
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b084      	sub	sp, #16
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	1d3b      	adds	r3, r7, #4
 8000d50:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, msg.bval);
 8000d54:	7a3b      	ldrb	r3, [r7, #8]
 8000d56:	461a      	mov	r2, r3
 8000d58:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d5c:	4803      	ldr	r0, [pc, #12]	@ (8000d6c <msg2_handler+0x24>)
 8000d5e:	f001 f925 	bl	8001fac <HAL_GPIO_WritePin>
}
 8000d62:	bf00      	nop
 8000d64:	3710      	adds	r7, #16
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	40021400 	.word	0x40021400

08000d70 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d74:	4b06      	ldr	r3, [pc, #24]	@ (8000d90 <SystemInit+0x20>)
 8000d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d7a:	4a05      	ldr	r2, [pc, #20]	@ (8000d90 <SystemInit+0x20>)
 8000d7c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d80:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d84:	bf00      	nop
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	e000ed00 	.word	0xe000ed00

08000d94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d94:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000dcc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d98:	f7ff ffea 	bl	8000d70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d9c:	480c      	ldr	r0, [pc, #48]	@ (8000dd0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d9e:	490d      	ldr	r1, [pc, #52]	@ (8000dd4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000da0:	4a0d      	ldr	r2, [pc, #52]	@ (8000dd8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000da2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000da4:	e002      	b.n	8000dac <LoopCopyDataInit>

08000da6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000da6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000da8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000daa:	3304      	adds	r3, #4

08000dac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000db0:	d3f9      	bcc.n	8000da6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000db2:	4a0a      	ldr	r2, [pc, #40]	@ (8000ddc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000db4:	4c0a      	ldr	r4, [pc, #40]	@ (8000de0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000db6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000db8:	e001      	b.n	8000dbe <LoopFillZerobss>

08000dba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dbc:	3204      	adds	r2, #4

08000dbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dc0:	d3fb      	bcc.n	8000dba <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000dc2:	f003 fb19 	bl	80043f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dc6:	f7ff fbd3 	bl	8000570 <main>
  bx  lr    
 8000dca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000dcc:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000dd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dd4:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000dd8:	08004480 	.word	0x08004480
  ldr r2, =_sbss
 8000ddc:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000de0:	200005ec 	.word	0x200005ec

08000de4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000de4:	e7fe      	b.n	8000de4 <ADC_IRQHandler>

08000de6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000de6:	b580      	push	{r7, lr}
 8000de8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dea:	2003      	movs	r0, #3
 8000dec:	f000 fef0 	bl	8001bd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000df0:	2000      	movs	r0, #0
 8000df2:	f000 f805 	bl	8000e00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000df6:	f7ff fdff 	bl	80009f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dfa:	2300      	movs	r3, #0
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	bd80      	pop	{r7, pc}

08000e00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e08:	4b12      	ldr	r3, [pc, #72]	@ (8000e54 <HAL_InitTick+0x54>)
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	4b12      	ldr	r3, [pc, #72]	@ (8000e58 <HAL_InitTick+0x58>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	4619      	mov	r1, r3
 8000e12:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e16:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f000 ff0b 	bl	8001c3a <HAL_SYSTICK_Config>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	e00e      	b.n	8000e4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	2b0f      	cmp	r3, #15
 8000e32:	d80a      	bhi.n	8000e4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e34:	2200      	movs	r2, #0
 8000e36:	6879      	ldr	r1, [r7, #4]
 8000e38:	f04f 30ff 	mov.w	r0, #4294967295
 8000e3c:	f000 fed3 	bl	8001be6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e40:	4a06      	ldr	r2, [pc, #24]	@ (8000e5c <HAL_InitTick+0x5c>)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e46:	2300      	movs	r3, #0
 8000e48:	e000      	b.n	8000e4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3708      	adds	r7, #8
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	20000008 	.word	0x20000008
 8000e58:	20000010 	.word	0x20000010
 8000e5c:	2000000c 	.word	0x2000000c

08000e60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e64:	4b06      	ldr	r3, [pc, #24]	@ (8000e80 <HAL_IncTick+0x20>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	461a      	mov	r2, r3
 8000e6a:	4b06      	ldr	r3, [pc, #24]	@ (8000e84 <HAL_IncTick+0x24>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4413      	add	r3, r2
 8000e70:	4a04      	ldr	r2, [pc, #16]	@ (8000e84 <HAL_IncTick+0x24>)
 8000e72:	6013      	str	r3, [r2, #0]
}
 8000e74:	bf00      	nop
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	20000010 	.word	0x20000010
 8000e84:	200005e8 	.word	0x200005e8

08000e88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e8c:	4b03      	ldr	r3, [pc, #12]	@ (8000e9c <HAL_GetTick+0x14>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	200005e8 	.word	0x200005e8

08000ea0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ea8:	f7ff ffee 	bl	8000e88 <HAL_GetTick>
 8000eac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000eb8:	d005      	beq.n	8000ec6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eba:	4b0a      	ldr	r3, [pc, #40]	@ (8000ee4 <HAL_Delay+0x44>)
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	461a      	mov	r2, r3
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	4413      	add	r3, r2
 8000ec4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ec6:	bf00      	nop
 8000ec8:	f7ff ffde 	bl	8000e88 <HAL_GetTick>
 8000ecc:	4602      	mov	r2, r0
 8000ece:	68bb      	ldr	r3, [r7, #8]
 8000ed0:	1ad3      	subs	r3, r2, r3
 8000ed2:	68fa      	ldr	r2, [r7, #12]
 8000ed4:	429a      	cmp	r2, r3
 8000ed6:	d8f7      	bhi.n	8000ec8 <HAL_Delay+0x28>
  {
  }
}
 8000ed8:	bf00      	nop
 8000eda:	bf00      	nop
 8000edc:	3710      	adds	r7, #16
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	20000010 	.word	0x20000010

08000ee8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d101      	bne.n	8000efa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	e0ed      	b.n	80010d6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d102      	bne.n	8000f0c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000f06:	6878      	ldr	r0, [r7, #4]
 8000f08:	f7ff fd9a 	bl	8000a40 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f042 0201 	orr.w	r2, r2, #1
 8000f1a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f1c:	f7ff ffb4 	bl	8000e88 <HAL_GetTick>
 8000f20:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000f22:	e012      	b.n	8000f4a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f24:	f7ff ffb0 	bl	8000e88 <HAL_GetTick>
 8000f28:	4602      	mov	r2, r0
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	1ad3      	subs	r3, r2, r3
 8000f2e:	2b0a      	cmp	r3, #10
 8000f30:	d90b      	bls.n	8000f4a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f36:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2205      	movs	r2, #5
 8000f42:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000f46:	2301      	movs	r3, #1
 8000f48:	e0c5      	b.n	80010d6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	f003 0301 	and.w	r3, r3, #1
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d0e5      	beq.n	8000f24 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f022 0202 	bic.w	r2, r2, #2
 8000f66:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f68:	f7ff ff8e 	bl	8000e88 <HAL_GetTick>
 8000f6c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000f6e:	e012      	b.n	8000f96 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f70:	f7ff ff8a 	bl	8000e88 <HAL_GetTick>
 8000f74:	4602      	mov	r2, r0
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	1ad3      	subs	r3, r2, r3
 8000f7a:	2b0a      	cmp	r3, #10
 8000f7c:	d90b      	bls.n	8000f96 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f82:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2205      	movs	r2, #5
 8000f8e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000f92:	2301      	movs	r3, #1
 8000f94:	e09f      	b.n	80010d6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f003 0302 	and.w	r3, r3, #2
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d1e5      	bne.n	8000f70 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	7e1b      	ldrb	r3, [r3, #24]
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	d108      	bne.n	8000fbe <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	e007      	b.n	8000fce <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000fcc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	7e5b      	ldrb	r3, [r3, #25]
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d108      	bne.n	8000fe8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000fe4:	601a      	str	r2, [r3, #0]
 8000fe6:	e007      	b.n	8000ff8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000ff6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	7e9b      	ldrb	r3, [r3, #26]
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d108      	bne.n	8001012 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f042 0220 	orr.w	r2, r2, #32
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	e007      	b.n	8001022 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f022 0220 	bic.w	r2, r2, #32
 8001020:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	7edb      	ldrb	r3, [r3, #27]
 8001026:	2b01      	cmp	r3, #1
 8001028:	d108      	bne.n	800103c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f022 0210 	bic.w	r2, r2, #16
 8001038:	601a      	str	r2, [r3, #0]
 800103a:	e007      	b.n	800104c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f042 0210 	orr.w	r2, r2, #16
 800104a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	7f1b      	ldrb	r3, [r3, #28]
 8001050:	2b01      	cmp	r3, #1
 8001052:	d108      	bne.n	8001066 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f042 0208 	orr.w	r2, r2, #8
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	e007      	b.n	8001076 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f022 0208 	bic.w	r2, r2, #8
 8001074:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	7f5b      	ldrb	r3, [r3, #29]
 800107a:	2b01      	cmp	r3, #1
 800107c:	d108      	bne.n	8001090 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f042 0204 	orr.w	r2, r2, #4
 800108c:	601a      	str	r2, [r3, #0]
 800108e:	e007      	b.n	80010a0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f022 0204 	bic.w	r2, r2, #4
 800109e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	689a      	ldr	r2, [r3, #8]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	431a      	orrs	r2, r3
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	691b      	ldr	r3, [r3, #16]
 80010ae:	431a      	orrs	r2, r3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	695b      	ldr	r3, [r3, #20]
 80010b4:	ea42 0103 	orr.w	r1, r2, r3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	1e5a      	subs	r2, r3, #1
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	430a      	orrs	r2, r1
 80010c4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2200      	movs	r2, #0
 80010ca:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2201      	movs	r2, #1
 80010d0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80010d4:	2300      	movs	r3, #0
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3710      	adds	r7, #16
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
	...

080010e0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b087      	sub	sp, #28
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010f6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80010f8:	7cfb      	ldrb	r3, [r7, #19]
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d003      	beq.n	8001106 <HAL_CAN_ConfigFilter+0x26>
 80010fe:	7cfb      	ldrb	r3, [r7, #19]
 8001100:	2b02      	cmp	r3, #2
 8001102:	f040 80c7 	bne.w	8001294 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a69      	ldr	r2, [pc, #420]	@ (80012b0 <HAL_CAN_ConfigFilter+0x1d0>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d001      	beq.n	8001114 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8001110:	4b68      	ldr	r3, [pc, #416]	@ (80012b4 <HAL_CAN_ConfigFilter+0x1d4>)
 8001112:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800111a:	f043 0201 	orr.w	r2, r3, #1
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	4a63      	ldr	r2, [pc, #396]	@ (80012b4 <HAL_CAN_ConfigFilter+0x1d4>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d111      	bne.n	8001150 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001132:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001146:	021b      	lsls	r3, r3, #8
 8001148:	431a      	orrs	r2, r3
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	695b      	ldr	r3, [r3, #20]
 8001154:	f003 031f 	and.w	r3, r3, #31
 8001158:	2201      	movs	r2, #1
 800115a:	fa02 f303 	lsl.w	r3, r2, r3
 800115e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	43db      	mvns	r3, r3
 800116a:	401a      	ands	r2, r3
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	69db      	ldr	r3, [r3, #28]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d123      	bne.n	80011c2 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	43db      	mvns	r3, r3
 8001184:	401a      	ands	r2, r3
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001198:	683a      	ldr	r2, [r7, #0]
 800119a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800119c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	3248      	adds	r2, #72	@ 0x48
 80011a2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	689b      	ldr	r3, [r3, #8]
 80011aa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80011b6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80011b8:	6979      	ldr	r1, [r7, #20]
 80011ba:	3348      	adds	r3, #72	@ 0x48
 80011bc:	00db      	lsls	r3, r3, #3
 80011be:	440b      	add	r3, r1
 80011c0:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	69db      	ldr	r3, [r3, #28]
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d122      	bne.n	8001210 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	431a      	orrs	r2, r3
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80011e6:	683a      	ldr	r2, [r7, #0]
 80011e8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80011ea:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	3248      	adds	r2, #72	@ 0x48
 80011f0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	689b      	ldr	r3, [r3, #8]
 80011f8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	68db      	ldr	r3, [r3, #12]
 80011fe:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001204:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001206:	6979      	ldr	r1, [r7, #20]
 8001208:	3348      	adds	r3, #72	@ 0x48
 800120a:	00db      	lsls	r3, r3, #3
 800120c:	440b      	add	r3, r1
 800120e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	699b      	ldr	r3, [r3, #24]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d109      	bne.n	800122c <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	43db      	mvns	r3, r3
 8001222:	401a      	ands	r2, r3
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800122a:	e007      	b.n	800123c <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	431a      	orrs	r2, r3
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	691b      	ldr	r3, [r3, #16]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d109      	bne.n	8001258 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	43db      	mvns	r3, r3
 800124e:	401a      	ands	r2, r3
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001256:	e007      	b.n	8001268 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	431a      	orrs	r2, r3
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	6a1b      	ldr	r3, [r3, #32]
 800126c:	2b01      	cmp	r3, #1
 800126e:	d107      	bne.n	8001280 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	431a      	orrs	r2, r3
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001286:	f023 0201 	bic.w	r2, r3, #1
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001290:	2300      	movs	r3, #0
 8001292:	e006      	b.n	80012a2 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001298:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80012a0:	2301      	movs	r3, #1
  }
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	371c      	adds	r7, #28
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	40003400 	.word	0x40003400
 80012b4:	40006400 	.word	0x40006400

080012b8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d12e      	bne.n	800132a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2202      	movs	r2, #2
 80012d0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f022 0201 	bic.w	r2, r2, #1
 80012e2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80012e4:	f7ff fdd0 	bl	8000e88 <HAL_GetTick>
 80012e8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80012ea:	e012      	b.n	8001312 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80012ec:	f7ff fdcc 	bl	8000e88 <HAL_GetTick>
 80012f0:	4602      	mov	r2, r0
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	2b0a      	cmp	r3, #10
 80012f8:	d90b      	bls.n	8001312 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012fe:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2205      	movs	r2, #5
 800130a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	e012      	b.n	8001338 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f003 0301 	and.w	r3, r3, #1
 800131c:	2b00      	cmp	r3, #0
 800131e:	d1e5      	bne.n	80012ec <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2200      	movs	r2, #0
 8001324:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001326:	2300      	movs	r3, #0
 8001328:	e006      	b.n	8001338 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800132e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
  }
}
 8001338:	4618      	mov	r0, r3
 800133a:	3710      	adds	r7, #16
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}

08001340 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001340:	b480      	push	{r7}
 8001342:	b087      	sub	sp, #28
 8001344:	af00      	add	r7, sp, #0
 8001346:	60f8      	str	r0, [r7, #12]
 8001348:	60b9      	str	r1, [r7, #8]
 800134a:	607a      	str	r2, [r7, #4]
 800134c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001354:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001356:	7dfb      	ldrb	r3, [r7, #23]
 8001358:	2b01      	cmp	r3, #1
 800135a:	d003      	beq.n	8001364 <HAL_CAN_GetRxMessage+0x24>
 800135c:	7dfb      	ldrb	r3, [r7, #23]
 800135e:	2b02      	cmp	r3, #2
 8001360:	f040 8103 	bne.w	800156a <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d10e      	bne.n	8001388 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	f003 0303 	and.w	r3, r3, #3
 8001374:	2b00      	cmp	r3, #0
 8001376:	d116      	bne.n	80013a6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800137c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001384:	2301      	movs	r3, #1
 8001386:	e0f7      	b.n	8001578 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	691b      	ldr	r3, [r3, #16]
 800138e:	f003 0303 	and.w	r3, r3, #3
 8001392:	2b00      	cmp	r3, #0
 8001394:	d107      	bne.n	80013a6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800139a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	e0e8      	b.n	8001578 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	331b      	adds	r3, #27
 80013ae:	011b      	lsls	r3, r3, #4
 80013b0:	4413      	add	r3, r2
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f003 0204 	and.w	r2, r3, #4
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	689b      	ldr	r3, [r3, #8]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d10c      	bne.n	80013de <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	331b      	adds	r3, #27
 80013cc:	011b      	lsls	r3, r3, #4
 80013ce:	4413      	add	r3, r2
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	0d5b      	lsrs	r3, r3, #21
 80013d4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	e00b      	b.n	80013f6 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	68bb      	ldr	r3, [r7, #8]
 80013e4:	331b      	adds	r3, #27
 80013e6:	011b      	lsls	r3, r3, #4
 80013e8:	4413      	add	r3, r2
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	08db      	lsrs	r3, r3, #3
 80013ee:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	68bb      	ldr	r3, [r7, #8]
 80013fc:	331b      	adds	r3, #27
 80013fe:	011b      	lsls	r3, r3, #4
 8001400:	4413      	add	r3, r2
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f003 0202 	and.w	r2, r3, #2
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	331b      	adds	r3, #27
 8001414:	011b      	lsls	r3, r3, #4
 8001416:	4413      	add	r3, r2
 8001418:	3304      	adds	r3, #4
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f003 0308 	and.w	r3, r3, #8
 8001420:	2b00      	cmp	r3, #0
 8001422:	d003      	beq.n	800142c <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2208      	movs	r2, #8
 8001428:	611a      	str	r2, [r3, #16]
 800142a:	e00b      	b.n	8001444 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	331b      	adds	r3, #27
 8001434:	011b      	lsls	r3, r3, #4
 8001436:	4413      	add	r3, r2
 8001438:	3304      	adds	r3, #4
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f003 020f 	and.w	r2, r3, #15
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	331b      	adds	r3, #27
 800144c:	011b      	lsls	r3, r3, #4
 800144e:	4413      	add	r3, r2
 8001450:	3304      	adds	r3, #4
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	0a1b      	lsrs	r3, r3, #8
 8001456:	b2da      	uxtb	r2, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	331b      	adds	r3, #27
 8001464:	011b      	lsls	r3, r3, #4
 8001466:	4413      	add	r3, r2
 8001468:	3304      	adds	r3, #4
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	0c1b      	lsrs	r3, r3, #16
 800146e:	b29a      	uxth	r2, r3
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	011b      	lsls	r3, r3, #4
 800147c:	4413      	add	r3, r2
 800147e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	b2da      	uxtb	r2, r3
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	68bb      	ldr	r3, [r7, #8]
 8001490:	011b      	lsls	r3, r3, #4
 8001492:	4413      	add	r3, r2
 8001494:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	0a1a      	lsrs	r2, r3, #8
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	3301      	adds	r3, #1
 80014a0:	b2d2      	uxtb	r2, r2
 80014a2:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	011b      	lsls	r3, r3, #4
 80014ac:	4413      	add	r3, r2
 80014ae:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	0c1a      	lsrs	r2, r3, #16
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	3302      	adds	r3, #2
 80014ba:	b2d2      	uxtb	r2, r2
 80014bc:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	011b      	lsls	r3, r3, #4
 80014c6:	4413      	add	r3, r2
 80014c8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	0e1a      	lsrs	r2, r3, #24
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	3303      	adds	r3, #3
 80014d4:	b2d2      	uxtb	r2, r2
 80014d6:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	011b      	lsls	r3, r3, #4
 80014e0:	4413      	add	r3, r2
 80014e2:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	3304      	adds	r3, #4
 80014ec:	b2d2      	uxtb	r2, r2
 80014ee:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	011b      	lsls	r3, r3, #4
 80014f8:	4413      	add	r3, r2
 80014fa:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	0a1a      	lsrs	r2, r3, #8
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	3305      	adds	r3, #5
 8001506:	b2d2      	uxtb	r2, r2
 8001508:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	011b      	lsls	r3, r3, #4
 8001512:	4413      	add	r3, r2
 8001514:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	0c1a      	lsrs	r2, r3, #16
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	3306      	adds	r3, #6
 8001520:	b2d2      	uxtb	r2, r2
 8001522:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	011b      	lsls	r3, r3, #4
 800152c:	4413      	add	r3, r2
 800152e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	0e1a      	lsrs	r2, r3, #24
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	3307      	adds	r3, #7
 800153a:	b2d2      	uxtb	r2, r2
 800153c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800153e:	68bb      	ldr	r3, [r7, #8]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d108      	bne.n	8001556 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	68da      	ldr	r2, [r3, #12]
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f042 0220 	orr.w	r2, r2, #32
 8001552:	60da      	str	r2, [r3, #12]
 8001554:	e007      	b.n	8001566 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	691a      	ldr	r2, [r3, #16]
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f042 0220 	orr.w	r2, r2, #32
 8001564:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001566:	2300      	movs	r3, #0
 8001568:	e006      	b.n	8001578 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800156e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
  }
}
 8001578:	4618      	mov	r0, r3
 800157a:	371c      	adds	r7, #28
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr

08001584 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001584:	b480      	push	{r7}
 8001586:	b085      	sub	sp, #20
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001594:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001596:	7bfb      	ldrb	r3, [r7, #15]
 8001598:	2b01      	cmp	r3, #1
 800159a:	d002      	beq.n	80015a2 <HAL_CAN_ActivateNotification+0x1e>
 800159c:	7bfb      	ldrb	r3, [r7, #15]
 800159e:	2b02      	cmp	r3, #2
 80015a0:	d109      	bne.n	80015b6 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	6959      	ldr	r1, [r3, #20]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	683a      	ldr	r2, [r7, #0]
 80015ae:	430a      	orrs	r2, r1
 80015b0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80015b2:	2300      	movs	r3, #0
 80015b4:	e006      	b.n	80015c4 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015ba:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
  }
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3714      	adds	r7, #20
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr

080015d0 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b08a      	sub	sp, #40	@ 0x28
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80015d8:	2300      	movs	r3, #0
 80015da:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	695b      	ldr	r3, [r3, #20]
 80015e2:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	68db      	ldr	r3, [r3, #12]
 80015fa:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	691b      	ldr	r3, [r3, #16]
 8001602:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	699b      	ldr	r3, [r3, #24]
 800160a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800160c:	6a3b      	ldr	r3, [r7, #32]
 800160e:	f003 0301 	and.w	r3, r3, #1
 8001612:	2b00      	cmp	r3, #0
 8001614:	d07c      	beq.n	8001710 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001616:	69bb      	ldr	r3, [r7, #24]
 8001618:	f003 0301 	and.w	r3, r3, #1
 800161c:	2b00      	cmp	r3, #0
 800161e:	d023      	beq.n	8001668 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	2201      	movs	r2, #1
 8001626:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001628:	69bb      	ldr	r3, [r7, #24]
 800162a:	f003 0302 	and.w	r3, r3, #2
 800162e:	2b00      	cmp	r3, #0
 8001630:	d003      	beq.n	800163a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f000 f983 	bl	800193e <HAL_CAN_TxMailbox0CompleteCallback>
 8001638:	e016      	b.n	8001668 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800163a:	69bb      	ldr	r3, [r7, #24]
 800163c:	f003 0304 	and.w	r3, r3, #4
 8001640:	2b00      	cmp	r3, #0
 8001642:	d004      	beq.n	800164e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001646:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800164a:	627b      	str	r3, [r7, #36]	@ 0x24
 800164c:	e00c      	b.n	8001668 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	f003 0308 	and.w	r3, r3, #8
 8001654:	2b00      	cmp	r3, #0
 8001656:	d004      	beq.n	8001662 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800165a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800165e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001660:	e002      	b.n	8001668 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f000 f989 	bl	800197a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001668:	69bb      	ldr	r3, [r7, #24]
 800166a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800166e:	2b00      	cmp	r3, #0
 8001670:	d024      	beq.n	80016bc <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800167a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800167c:	69bb      	ldr	r3, [r7, #24]
 800167e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001682:	2b00      	cmp	r3, #0
 8001684:	d003      	beq.n	800168e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f000 f963 	bl	8001952 <HAL_CAN_TxMailbox1CompleteCallback>
 800168c:	e016      	b.n	80016bc <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800168e:	69bb      	ldr	r3, [r7, #24]
 8001690:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001694:	2b00      	cmp	r3, #0
 8001696:	d004      	beq.n	80016a2 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800169a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800169e:	627b      	str	r3, [r7, #36]	@ 0x24
 80016a0:	e00c      	b.n	80016bc <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80016a2:	69bb      	ldr	r3, [r7, #24]
 80016a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d004      	beq.n	80016b6 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80016ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80016b4:	e002      	b.n	80016bc <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f000 f969 	bl	800198e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80016bc:	69bb      	ldr	r3, [r7, #24]
 80016be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d024      	beq.n	8001710 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80016ce:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80016d0:	69bb      	ldr	r3, [r7, #24]
 80016d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d003      	beq.n	80016e2 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f000 f943 	bl	8001966 <HAL_CAN_TxMailbox2CompleteCallback>
 80016e0:	e016      	b.n	8001710 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80016e2:	69bb      	ldr	r3, [r7, #24]
 80016e4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d004      	beq.n	80016f6 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80016ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80016f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80016f4:	e00c      	b.n	8001710 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80016f6:	69bb      	ldr	r3, [r7, #24]
 80016f8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d004      	beq.n	800170a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001702:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001706:	627b      	str	r3, [r7, #36]	@ 0x24
 8001708:	e002      	b.n	8001710 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f000 f949 	bl	80019a2 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001710:	6a3b      	ldr	r3, [r7, #32]
 8001712:	f003 0308 	and.w	r3, r3, #8
 8001716:	2b00      	cmp	r3, #0
 8001718:	d00c      	beq.n	8001734 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	f003 0310 	and.w	r3, r3, #16
 8001720:	2b00      	cmp	r3, #0
 8001722:	d007      	beq.n	8001734 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001726:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800172a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2210      	movs	r2, #16
 8001732:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001734:	6a3b      	ldr	r3, [r7, #32]
 8001736:	f003 0304 	and.w	r3, r3, #4
 800173a:	2b00      	cmp	r3, #0
 800173c:	d00b      	beq.n	8001756 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	f003 0308 	and.w	r3, r3, #8
 8001744:	2b00      	cmp	r3, #0
 8001746:	d006      	beq.n	8001756 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2208      	movs	r2, #8
 800174e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f000 f930 	bl	80019b6 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001756:	6a3b      	ldr	r3, [r7, #32]
 8001758:	f003 0302 	and.w	r3, r3, #2
 800175c:	2b00      	cmp	r3, #0
 800175e:	d009      	beq.n	8001774 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	68db      	ldr	r3, [r3, #12]
 8001766:	f003 0303 	and.w	r3, r3, #3
 800176a:	2b00      	cmp	r3, #0
 800176c:	d002      	beq.n	8001774 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f7fe feda 	bl	8000528 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001774:	6a3b      	ldr	r3, [r7, #32]
 8001776:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800177a:	2b00      	cmp	r3, #0
 800177c:	d00c      	beq.n	8001798 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	f003 0310 	and.w	r3, r3, #16
 8001784:	2b00      	cmp	r3, #0
 8001786:	d007      	beq.n	8001798 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800178a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800178e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	2210      	movs	r2, #16
 8001796:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001798:	6a3b      	ldr	r3, [r7, #32]
 800179a:	f003 0320 	and.w	r3, r3, #32
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d00b      	beq.n	80017ba <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	f003 0308 	and.w	r3, r3, #8
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d006      	beq.n	80017ba <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2208      	movs	r2, #8
 80017b2:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	f000 f912 	bl	80019de <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80017ba:	6a3b      	ldr	r3, [r7, #32]
 80017bc:	f003 0310 	and.w	r3, r3, #16
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d009      	beq.n	80017d8 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	691b      	ldr	r3, [r3, #16]
 80017ca:	f003 0303 	and.w	r3, r3, #3
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d002      	beq.n	80017d8 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f000 f8f9 	bl	80019ca <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80017d8:	6a3b      	ldr	r3, [r7, #32]
 80017da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d00b      	beq.n	80017fa <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	f003 0310 	and.w	r3, r3, #16
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d006      	beq.n	80017fa <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	2210      	movs	r2, #16
 80017f2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f000 f8fc 	bl	80019f2 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80017fa:	6a3b      	ldr	r3, [r7, #32]
 80017fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001800:	2b00      	cmp	r3, #0
 8001802:	d00b      	beq.n	800181c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	f003 0308 	and.w	r3, r3, #8
 800180a:	2b00      	cmp	r3, #0
 800180c:	d006      	beq.n	800181c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	2208      	movs	r2, #8
 8001814:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f000 f8f5 	bl	8001a06 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800181c:	6a3b      	ldr	r3, [r7, #32]
 800181e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d07b      	beq.n	800191e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	f003 0304 	and.w	r3, r3, #4
 800182c:	2b00      	cmp	r3, #0
 800182e:	d072      	beq.n	8001916 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001830:	6a3b      	ldr	r3, [r7, #32]
 8001832:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001836:	2b00      	cmp	r3, #0
 8001838:	d008      	beq.n	800184c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001840:	2b00      	cmp	r3, #0
 8001842:	d003      	beq.n	800184c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001846:	f043 0301 	orr.w	r3, r3, #1
 800184a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800184c:	6a3b      	ldr	r3, [r7, #32]
 800184e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001852:	2b00      	cmp	r3, #0
 8001854:	d008      	beq.n	8001868 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800185c:	2b00      	cmp	r3, #0
 800185e:	d003      	beq.n	8001868 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001862:	f043 0302 	orr.w	r3, r3, #2
 8001866:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001868:	6a3b      	ldr	r3, [r7, #32]
 800186a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800186e:	2b00      	cmp	r3, #0
 8001870:	d008      	beq.n	8001884 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001878:	2b00      	cmp	r3, #0
 800187a:	d003      	beq.n	8001884 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800187c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800187e:	f043 0304 	orr.w	r3, r3, #4
 8001882:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001884:	6a3b      	ldr	r3, [r7, #32]
 8001886:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800188a:	2b00      	cmp	r3, #0
 800188c:	d043      	beq.n	8001916 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001894:	2b00      	cmp	r3, #0
 8001896:	d03e      	beq.n	8001916 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800189e:	2b60      	cmp	r3, #96	@ 0x60
 80018a0:	d02b      	beq.n	80018fa <HAL_CAN_IRQHandler+0x32a>
 80018a2:	2b60      	cmp	r3, #96	@ 0x60
 80018a4:	d82e      	bhi.n	8001904 <HAL_CAN_IRQHandler+0x334>
 80018a6:	2b50      	cmp	r3, #80	@ 0x50
 80018a8:	d022      	beq.n	80018f0 <HAL_CAN_IRQHandler+0x320>
 80018aa:	2b50      	cmp	r3, #80	@ 0x50
 80018ac:	d82a      	bhi.n	8001904 <HAL_CAN_IRQHandler+0x334>
 80018ae:	2b40      	cmp	r3, #64	@ 0x40
 80018b0:	d019      	beq.n	80018e6 <HAL_CAN_IRQHandler+0x316>
 80018b2:	2b40      	cmp	r3, #64	@ 0x40
 80018b4:	d826      	bhi.n	8001904 <HAL_CAN_IRQHandler+0x334>
 80018b6:	2b30      	cmp	r3, #48	@ 0x30
 80018b8:	d010      	beq.n	80018dc <HAL_CAN_IRQHandler+0x30c>
 80018ba:	2b30      	cmp	r3, #48	@ 0x30
 80018bc:	d822      	bhi.n	8001904 <HAL_CAN_IRQHandler+0x334>
 80018be:	2b10      	cmp	r3, #16
 80018c0:	d002      	beq.n	80018c8 <HAL_CAN_IRQHandler+0x2f8>
 80018c2:	2b20      	cmp	r3, #32
 80018c4:	d005      	beq.n	80018d2 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80018c6:	e01d      	b.n	8001904 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80018c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ca:	f043 0308 	orr.w	r3, r3, #8
 80018ce:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80018d0:	e019      	b.n	8001906 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80018d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018d4:	f043 0310 	orr.w	r3, r3, #16
 80018d8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80018da:	e014      	b.n	8001906 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80018dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018de:	f043 0320 	orr.w	r3, r3, #32
 80018e2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80018e4:	e00f      	b.n	8001906 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80018e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80018ec:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80018ee:	e00a      	b.n	8001906 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80018f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80018f6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80018f8:	e005      	b.n	8001906 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80018fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001900:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001902:	e000      	b.n	8001906 <HAL_CAN_IRQHandler+0x336>
            break;
 8001904:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	699a      	ldr	r2, [r3, #24]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001914:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	2204      	movs	r2, #4
 800191c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800191e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001920:	2b00      	cmp	r3, #0
 8001922:	d008      	beq.n	8001936 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800192a:	431a      	orrs	r2, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f000 f872 	bl	8001a1a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001936:	bf00      	nop
 8001938:	3728      	adds	r7, #40	@ 0x28
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}

0800193e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800193e:	b480      	push	{r7}
 8001940:	b083      	sub	sp, #12
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001946:	bf00      	nop
 8001948:	370c      	adds	r7, #12
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr

08001952 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001952:	b480      	push	{r7}
 8001954:	b083      	sub	sp, #12
 8001956:	af00      	add	r7, sp, #0
 8001958:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800195a:	bf00      	nop
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr

08001966 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001966:	b480      	push	{r7}
 8001968:	b083      	sub	sp, #12
 800196a:	af00      	add	r7, sp, #0
 800196c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800196e:	bf00      	nop
 8001970:	370c      	adds	r7, #12
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr

0800197a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800197a:	b480      	push	{r7}
 800197c:	b083      	sub	sp, #12
 800197e:	af00      	add	r7, sp, #0
 8001980:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001982:	bf00      	nop
 8001984:	370c      	adds	r7, #12
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr

0800198e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800198e:	b480      	push	{r7}
 8001990:	b083      	sub	sp, #12
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001996:	bf00      	nop
 8001998:	370c      	adds	r7, #12
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr

080019a2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80019a2:	b480      	push	{r7}
 80019a4:	b083      	sub	sp, #12
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80019aa:	bf00      	nop
 80019ac:	370c      	adds	r7, #12
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr

080019b6 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80019b6:	b480      	push	{r7}
 80019b8:	b083      	sub	sp, #12
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80019be:	bf00      	nop
 80019c0:	370c      	adds	r7, #12
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr

080019ca <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80019ca:	b480      	push	{r7}
 80019cc:	b083      	sub	sp, #12
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80019d2:	bf00      	nop
 80019d4:	370c      	adds	r7, #12
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr

080019de <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80019de:	b480      	push	{r7}
 80019e0:	b083      	sub	sp, #12
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80019e6:	bf00      	nop
 80019e8:	370c      	adds	r7, #12
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr

080019f2 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80019f2:	b480      	push	{r7}
 80019f4:	b083      	sub	sp, #12
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80019fa:	bf00      	nop
 80019fc:	370c      	adds	r7, #12
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr

08001a06 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001a06:	b480      	push	{r7}
 8001a08:	b083      	sub	sp, #12
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001a0e:	bf00      	nop
 8001a10:	370c      	adds	r7, #12
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr

08001a1a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001a1a:	b480      	push	{r7}
 8001a1c:	b083      	sub	sp, #12
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001a22:	bf00      	nop
 8001a24:	370c      	adds	r7, #12
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
	...

08001a30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b085      	sub	sp, #20
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	f003 0307 	and.w	r3, r3, #7
 8001a3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a40:	4b0b      	ldr	r3, [pc, #44]	@ (8001a70 <__NVIC_SetPriorityGrouping+0x40>)
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a46:	68ba      	ldr	r2, [r7, #8]
 8001a48:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001a58:	4b06      	ldr	r3, [pc, #24]	@ (8001a74 <__NVIC_SetPriorityGrouping+0x44>)
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a5e:	4a04      	ldr	r2, [pc, #16]	@ (8001a70 <__NVIC_SetPriorityGrouping+0x40>)
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	60d3      	str	r3, [r2, #12]
}
 8001a64:	bf00      	nop
 8001a66:	3714      	adds	r7, #20
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr
 8001a70:	e000ed00 	.word	0xe000ed00
 8001a74:	05fa0000 	.word	0x05fa0000

08001a78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a7c:	4b04      	ldr	r3, [pc, #16]	@ (8001a90 <__NVIC_GetPriorityGrouping+0x18>)
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	0a1b      	lsrs	r3, r3, #8
 8001a82:	f003 0307 	and.w	r3, r3, #7
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr
 8001a90:	e000ed00 	.word	0xe000ed00

08001a94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	db0b      	blt.n	8001abe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001aa6:	79fb      	ldrb	r3, [r7, #7]
 8001aa8:	f003 021f 	and.w	r2, r3, #31
 8001aac:	4907      	ldr	r1, [pc, #28]	@ (8001acc <__NVIC_EnableIRQ+0x38>)
 8001aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab2:	095b      	lsrs	r3, r3, #5
 8001ab4:	2001      	movs	r0, #1
 8001ab6:	fa00 f202 	lsl.w	r2, r0, r2
 8001aba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001abe:	bf00      	nop
 8001ac0:	370c      	adds	r7, #12
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	e000e100 	.word	0xe000e100

08001ad0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	6039      	str	r1, [r7, #0]
 8001ada:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001adc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	db0a      	blt.n	8001afa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	b2da      	uxtb	r2, r3
 8001ae8:	490c      	ldr	r1, [pc, #48]	@ (8001b1c <__NVIC_SetPriority+0x4c>)
 8001aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aee:	0112      	lsls	r2, r2, #4
 8001af0:	b2d2      	uxtb	r2, r2
 8001af2:	440b      	add	r3, r1
 8001af4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001af8:	e00a      	b.n	8001b10 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	b2da      	uxtb	r2, r3
 8001afe:	4908      	ldr	r1, [pc, #32]	@ (8001b20 <__NVIC_SetPriority+0x50>)
 8001b00:	79fb      	ldrb	r3, [r7, #7]
 8001b02:	f003 030f 	and.w	r3, r3, #15
 8001b06:	3b04      	subs	r3, #4
 8001b08:	0112      	lsls	r2, r2, #4
 8001b0a:	b2d2      	uxtb	r2, r2
 8001b0c:	440b      	add	r3, r1
 8001b0e:	761a      	strb	r2, [r3, #24]
}
 8001b10:	bf00      	nop
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr
 8001b1c:	e000e100 	.word	0xe000e100
 8001b20:	e000ed00 	.word	0xe000ed00

08001b24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b089      	sub	sp, #36	@ 0x24
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	60b9      	str	r1, [r7, #8]
 8001b2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	f003 0307 	and.w	r3, r3, #7
 8001b36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	f1c3 0307 	rsb	r3, r3, #7
 8001b3e:	2b04      	cmp	r3, #4
 8001b40:	bf28      	it	cs
 8001b42:	2304      	movcs	r3, #4
 8001b44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	3304      	adds	r3, #4
 8001b4a:	2b06      	cmp	r3, #6
 8001b4c:	d902      	bls.n	8001b54 <NVIC_EncodePriority+0x30>
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	3b03      	subs	r3, #3
 8001b52:	e000      	b.n	8001b56 <NVIC_EncodePriority+0x32>
 8001b54:	2300      	movs	r3, #0
 8001b56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b58:	f04f 32ff 	mov.w	r2, #4294967295
 8001b5c:	69bb      	ldr	r3, [r7, #24]
 8001b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b62:	43da      	mvns	r2, r3
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	401a      	ands	r2, r3
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b6c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	fa01 f303 	lsl.w	r3, r1, r3
 8001b76:	43d9      	mvns	r1, r3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b7c:	4313      	orrs	r3, r2
         );
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3724      	adds	r7, #36	@ 0x24
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
	...

08001b8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	3b01      	subs	r3, #1
 8001b98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b9c:	d301      	bcc.n	8001ba2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e00f      	b.n	8001bc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ba2:	4a0a      	ldr	r2, [pc, #40]	@ (8001bcc <SysTick_Config+0x40>)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	3b01      	subs	r3, #1
 8001ba8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001baa:	210f      	movs	r1, #15
 8001bac:	f04f 30ff 	mov.w	r0, #4294967295
 8001bb0:	f7ff ff8e 	bl	8001ad0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bb4:	4b05      	ldr	r3, [pc, #20]	@ (8001bcc <SysTick_Config+0x40>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bba:	4b04      	ldr	r3, [pc, #16]	@ (8001bcc <SysTick_Config+0x40>)
 8001bbc:	2207      	movs	r2, #7
 8001bbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bc0:	2300      	movs	r3, #0
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	e000e010 	.word	0xe000e010

08001bd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f7ff ff29 	bl	8001a30 <__NVIC_SetPriorityGrouping>
}
 8001bde:	bf00      	nop
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}

08001be6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001be6:	b580      	push	{r7, lr}
 8001be8:	b086      	sub	sp, #24
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	4603      	mov	r3, r0
 8001bee:	60b9      	str	r1, [r7, #8]
 8001bf0:	607a      	str	r2, [r7, #4]
 8001bf2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bf8:	f7ff ff3e 	bl	8001a78 <__NVIC_GetPriorityGrouping>
 8001bfc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	68b9      	ldr	r1, [r7, #8]
 8001c02:	6978      	ldr	r0, [r7, #20]
 8001c04:	f7ff ff8e 	bl	8001b24 <NVIC_EncodePriority>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c0e:	4611      	mov	r1, r2
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7ff ff5d 	bl	8001ad0 <__NVIC_SetPriority>
}
 8001c16:	bf00      	nop
 8001c18:	3718      	adds	r7, #24
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}

08001c1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	b082      	sub	sp, #8
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	4603      	mov	r3, r0
 8001c26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7ff ff31 	bl	8001a94 <__NVIC_EnableIRQ>
}
 8001c32:	bf00      	nop
 8001c34:	3708      	adds	r7, #8
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}

08001c3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c3a:	b580      	push	{r7, lr}
 8001c3c:	b082      	sub	sp, #8
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f7ff ffa2 	bl	8001b8c <SysTick_Config>
 8001c48:	4603      	mov	r3, r0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3708      	adds	r7, #8
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
	...

08001c54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b089      	sub	sp, #36	@ 0x24
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001c62:	2300      	movs	r3, #0
 8001c64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001c66:	2300      	movs	r3, #0
 8001c68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001c6e:	2300      	movs	r3, #0
 8001c70:	61fb      	str	r3, [r7, #28]
 8001c72:	e175      	b.n	8001f60 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001c74:	2201      	movs	r2, #1
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	697a      	ldr	r2, [r7, #20]
 8001c84:	4013      	ands	r3, r2
 8001c86:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001c88:	693a      	ldr	r2, [r7, #16]
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	f040 8164 	bne.w	8001f5a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f003 0303 	and.w	r3, r3, #3
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d005      	beq.n	8001caa <HAL_GPIO_Init+0x56>
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f003 0303 	and.w	r3, r3, #3
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d130      	bne.n	8001d0c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	005b      	lsls	r3, r3, #1
 8001cb4:	2203      	movs	r2, #3
 8001cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cba:	43db      	mvns	r3, r3
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	68da      	ldr	r2, [r3, #12]
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	005b      	lsls	r3, r3, #1
 8001cca:	fa02 f303 	lsl.w	r3, r2, r3
 8001cce:	69ba      	ldr	r2, [r7, #24]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	69ba      	ldr	r2, [r7, #24]
 8001cd8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce8:	43db      	mvns	r3, r3
 8001cea:	69ba      	ldr	r2, [r7, #24]
 8001cec:	4013      	ands	r3, r2
 8001cee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	091b      	lsrs	r3, r3, #4
 8001cf6:	f003 0201 	and.w	r2, r3, #1
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f003 0303 	and.w	r3, r3, #3
 8001d14:	2b03      	cmp	r3, #3
 8001d16:	d017      	beq.n	8001d48 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	005b      	lsls	r3, r3, #1
 8001d22:	2203      	movs	r2, #3
 8001d24:	fa02 f303 	lsl.w	r3, r2, r3
 8001d28:	43db      	mvns	r3, r3
 8001d2a:	69ba      	ldr	r2, [r7, #24]
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	689a      	ldr	r2, [r3, #8]
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	005b      	lsls	r3, r3, #1
 8001d38:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	69ba      	ldr	r2, [r7, #24]
 8001d46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f003 0303 	and.w	r3, r3, #3
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	d123      	bne.n	8001d9c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	08da      	lsrs	r2, r3, #3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	3208      	adds	r2, #8
 8001d5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	f003 0307 	and.w	r3, r3, #7
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	220f      	movs	r2, #15
 8001d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d70:	43db      	mvns	r3, r3
 8001d72:	69ba      	ldr	r2, [r7, #24]
 8001d74:	4013      	ands	r3, r2
 8001d76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	691a      	ldr	r2, [r3, #16]
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	f003 0307 	and.w	r3, r3, #7
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	fa02 f303 	lsl.w	r3, r2, r3
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	08da      	lsrs	r2, r3, #3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	3208      	adds	r2, #8
 8001d96:	69b9      	ldr	r1, [r7, #24]
 8001d98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	005b      	lsls	r3, r3, #1
 8001da6:	2203      	movs	r2, #3
 8001da8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dac:	43db      	mvns	r3, r3
 8001dae:	69ba      	ldr	r2, [r7, #24]
 8001db0:	4013      	ands	r3, r2
 8001db2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f003 0203 	and.w	r2, r3, #3
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	005b      	lsls	r3, r3, #1
 8001dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc4:	69ba      	ldr	r2, [r7, #24]
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	f000 80be 	beq.w	8001f5a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dde:	4b66      	ldr	r3, [pc, #408]	@ (8001f78 <HAL_GPIO_Init+0x324>)
 8001de0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001de2:	4a65      	ldr	r2, [pc, #404]	@ (8001f78 <HAL_GPIO_Init+0x324>)
 8001de4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001de8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001dea:	4b63      	ldr	r3, [pc, #396]	@ (8001f78 <HAL_GPIO_Init+0x324>)
 8001dec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001df2:	60fb      	str	r3, [r7, #12]
 8001df4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001df6:	4a61      	ldr	r2, [pc, #388]	@ (8001f7c <HAL_GPIO_Init+0x328>)
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	089b      	lsrs	r3, r3, #2
 8001dfc:	3302      	adds	r3, #2
 8001dfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e02:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	f003 0303 	and.w	r3, r3, #3
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	220f      	movs	r2, #15
 8001e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e12:	43db      	mvns	r3, r3
 8001e14:	69ba      	ldr	r2, [r7, #24]
 8001e16:	4013      	ands	r3, r2
 8001e18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a58      	ldr	r2, [pc, #352]	@ (8001f80 <HAL_GPIO_Init+0x32c>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d037      	beq.n	8001e92 <HAL_GPIO_Init+0x23e>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4a57      	ldr	r2, [pc, #348]	@ (8001f84 <HAL_GPIO_Init+0x330>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d031      	beq.n	8001e8e <HAL_GPIO_Init+0x23a>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4a56      	ldr	r2, [pc, #344]	@ (8001f88 <HAL_GPIO_Init+0x334>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d02b      	beq.n	8001e8a <HAL_GPIO_Init+0x236>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4a55      	ldr	r2, [pc, #340]	@ (8001f8c <HAL_GPIO_Init+0x338>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d025      	beq.n	8001e86 <HAL_GPIO_Init+0x232>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a54      	ldr	r2, [pc, #336]	@ (8001f90 <HAL_GPIO_Init+0x33c>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d01f      	beq.n	8001e82 <HAL_GPIO_Init+0x22e>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a53      	ldr	r2, [pc, #332]	@ (8001f94 <HAL_GPIO_Init+0x340>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d019      	beq.n	8001e7e <HAL_GPIO_Init+0x22a>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a52      	ldr	r2, [pc, #328]	@ (8001f98 <HAL_GPIO_Init+0x344>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d013      	beq.n	8001e7a <HAL_GPIO_Init+0x226>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a51      	ldr	r2, [pc, #324]	@ (8001f9c <HAL_GPIO_Init+0x348>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d00d      	beq.n	8001e76 <HAL_GPIO_Init+0x222>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a50      	ldr	r2, [pc, #320]	@ (8001fa0 <HAL_GPIO_Init+0x34c>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d007      	beq.n	8001e72 <HAL_GPIO_Init+0x21e>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a4f      	ldr	r2, [pc, #316]	@ (8001fa4 <HAL_GPIO_Init+0x350>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d101      	bne.n	8001e6e <HAL_GPIO_Init+0x21a>
 8001e6a:	2309      	movs	r3, #9
 8001e6c:	e012      	b.n	8001e94 <HAL_GPIO_Init+0x240>
 8001e6e:	230a      	movs	r3, #10
 8001e70:	e010      	b.n	8001e94 <HAL_GPIO_Init+0x240>
 8001e72:	2308      	movs	r3, #8
 8001e74:	e00e      	b.n	8001e94 <HAL_GPIO_Init+0x240>
 8001e76:	2307      	movs	r3, #7
 8001e78:	e00c      	b.n	8001e94 <HAL_GPIO_Init+0x240>
 8001e7a:	2306      	movs	r3, #6
 8001e7c:	e00a      	b.n	8001e94 <HAL_GPIO_Init+0x240>
 8001e7e:	2305      	movs	r3, #5
 8001e80:	e008      	b.n	8001e94 <HAL_GPIO_Init+0x240>
 8001e82:	2304      	movs	r3, #4
 8001e84:	e006      	b.n	8001e94 <HAL_GPIO_Init+0x240>
 8001e86:	2303      	movs	r3, #3
 8001e88:	e004      	b.n	8001e94 <HAL_GPIO_Init+0x240>
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	e002      	b.n	8001e94 <HAL_GPIO_Init+0x240>
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e000      	b.n	8001e94 <HAL_GPIO_Init+0x240>
 8001e92:	2300      	movs	r3, #0
 8001e94:	69fa      	ldr	r2, [r7, #28]
 8001e96:	f002 0203 	and.w	r2, r2, #3
 8001e9a:	0092      	lsls	r2, r2, #2
 8001e9c:	4093      	lsls	r3, r2
 8001e9e:	69ba      	ldr	r2, [r7, #24]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001ea4:	4935      	ldr	r1, [pc, #212]	@ (8001f7c <HAL_GPIO_Init+0x328>)
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	089b      	lsrs	r3, r3, #2
 8001eaa:	3302      	adds	r3, #2
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001eb2:	4b3d      	ldr	r3, [pc, #244]	@ (8001fa8 <HAL_GPIO_Init+0x354>)
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	43db      	mvns	r3, r3
 8001ebc:	69ba      	ldr	r2, [r7, #24]
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d003      	beq.n	8001ed6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001ece:	69ba      	ldr	r2, [r7, #24]
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ed6:	4a34      	ldr	r2, [pc, #208]	@ (8001fa8 <HAL_GPIO_Init+0x354>)
 8001ed8:	69bb      	ldr	r3, [r7, #24]
 8001eda:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001edc:	4b32      	ldr	r3, [pc, #200]	@ (8001fa8 <HAL_GPIO_Init+0x354>)
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	43db      	mvns	r3, r3
 8001ee6:	69ba      	ldr	r2, [r7, #24]
 8001ee8:	4013      	ands	r3, r2
 8001eea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d003      	beq.n	8001f00 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001ef8:	69ba      	ldr	r2, [r7, #24]
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f00:	4a29      	ldr	r2, [pc, #164]	@ (8001fa8 <HAL_GPIO_Init+0x354>)
 8001f02:	69bb      	ldr	r3, [r7, #24]
 8001f04:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f06:	4b28      	ldr	r3, [pc, #160]	@ (8001fa8 <HAL_GPIO_Init+0x354>)
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	43db      	mvns	r3, r3
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	4013      	ands	r3, r2
 8001f14:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d003      	beq.n	8001f2a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001f22:	69ba      	ldr	r2, [r7, #24]
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f2a:	4a1f      	ldr	r2, [pc, #124]	@ (8001fa8 <HAL_GPIO_Init+0x354>)
 8001f2c:	69bb      	ldr	r3, [r7, #24]
 8001f2e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f30:	4b1d      	ldr	r3, [pc, #116]	@ (8001fa8 <HAL_GPIO_Init+0x354>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	43db      	mvns	r3, r3
 8001f3a:	69ba      	ldr	r2, [r7, #24]
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d003      	beq.n	8001f54 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f54:	4a14      	ldr	r2, [pc, #80]	@ (8001fa8 <HAL_GPIO_Init+0x354>)
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	61fb      	str	r3, [r7, #28]
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	2b0f      	cmp	r3, #15
 8001f64:	f67f ae86 	bls.w	8001c74 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001f68:	bf00      	nop
 8001f6a:	bf00      	nop
 8001f6c:	3724      	adds	r7, #36	@ 0x24
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	40023800 	.word	0x40023800
 8001f7c:	40013800 	.word	0x40013800
 8001f80:	40020000 	.word	0x40020000
 8001f84:	40020400 	.word	0x40020400
 8001f88:	40020800 	.word	0x40020800
 8001f8c:	40020c00 	.word	0x40020c00
 8001f90:	40021000 	.word	0x40021000
 8001f94:	40021400 	.word	0x40021400
 8001f98:	40021800 	.word	0x40021800
 8001f9c:	40021c00 	.word	0x40021c00
 8001fa0:	40022000 	.word	0x40022000
 8001fa4:	40022400 	.word	0x40022400
 8001fa8:	40013c00 	.word	0x40013c00

08001fac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	807b      	strh	r3, [r7, #2]
 8001fb8:	4613      	mov	r3, r2
 8001fba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001fbc:	787b      	ldrb	r3, [r7, #1]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d003      	beq.n	8001fca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fc2:	887a      	ldrh	r2, [r7, #2]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001fc8:	e003      	b.n	8001fd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001fca:	887b      	ldrh	r3, [r7, #2]
 8001fcc:	041a      	lsls	r2, r3, #16
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	619a      	str	r2, [r3, #24]
}
 8001fd2:	bf00      	nop
 8001fd4:	370c      	adds	r7, #12
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr

08001fde <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	b086      	sub	sp, #24
 8001fe2:	af02      	add	r7, sp, #8
 8001fe4:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d101      	bne.n	8001ff0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e108      	b.n	8002202 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d106      	bne.n	8002010 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2200      	movs	r2, #0
 8002006:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f7fe fdd4 	bl	8000bb8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2203      	movs	r2, #3
 8002014:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800201e:	d102      	bne.n	8002026 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2200      	movs	r2, #0
 8002024:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4618      	mov	r0, r3
 800202c:	f001 ff46 	bl	8003ebc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6818      	ldr	r0, [r3, #0]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	7c1a      	ldrb	r2, [r3, #16]
 8002038:	f88d 2000 	strb.w	r2, [sp]
 800203c:	3304      	adds	r3, #4
 800203e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002040:	f001 fee2 	bl	8003e08 <USB_CoreInit>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d005      	beq.n	8002056 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2202      	movs	r2, #2
 800204e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e0d5      	b.n	8002202 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	2100      	movs	r1, #0
 800205c:	4618      	mov	r0, r3
 800205e:	f001 ff3e 	bl	8003ede <USB_SetCurrentMode>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d005      	beq.n	8002074 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2202      	movs	r2, #2
 800206c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e0c6      	b.n	8002202 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002074:	2300      	movs	r3, #0
 8002076:	73fb      	strb	r3, [r7, #15]
 8002078:	e04a      	b.n	8002110 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800207a:	7bfa      	ldrb	r2, [r7, #15]
 800207c:	6879      	ldr	r1, [r7, #4]
 800207e:	4613      	mov	r3, r2
 8002080:	00db      	lsls	r3, r3, #3
 8002082:	4413      	add	r3, r2
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	440b      	add	r3, r1
 8002088:	3315      	adds	r3, #21
 800208a:	2201      	movs	r2, #1
 800208c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800208e:	7bfa      	ldrb	r2, [r7, #15]
 8002090:	6879      	ldr	r1, [r7, #4]
 8002092:	4613      	mov	r3, r2
 8002094:	00db      	lsls	r3, r3, #3
 8002096:	4413      	add	r3, r2
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	440b      	add	r3, r1
 800209c:	3314      	adds	r3, #20
 800209e:	7bfa      	ldrb	r2, [r7, #15]
 80020a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80020a2:	7bfa      	ldrb	r2, [r7, #15]
 80020a4:	7bfb      	ldrb	r3, [r7, #15]
 80020a6:	b298      	uxth	r0, r3
 80020a8:	6879      	ldr	r1, [r7, #4]
 80020aa:	4613      	mov	r3, r2
 80020ac:	00db      	lsls	r3, r3, #3
 80020ae:	4413      	add	r3, r2
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	440b      	add	r3, r1
 80020b4:	332e      	adds	r3, #46	@ 0x2e
 80020b6:	4602      	mov	r2, r0
 80020b8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80020ba:	7bfa      	ldrb	r2, [r7, #15]
 80020bc:	6879      	ldr	r1, [r7, #4]
 80020be:	4613      	mov	r3, r2
 80020c0:	00db      	lsls	r3, r3, #3
 80020c2:	4413      	add	r3, r2
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	440b      	add	r3, r1
 80020c8:	3318      	adds	r3, #24
 80020ca:	2200      	movs	r2, #0
 80020cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80020ce:	7bfa      	ldrb	r2, [r7, #15]
 80020d0:	6879      	ldr	r1, [r7, #4]
 80020d2:	4613      	mov	r3, r2
 80020d4:	00db      	lsls	r3, r3, #3
 80020d6:	4413      	add	r3, r2
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	440b      	add	r3, r1
 80020dc:	331c      	adds	r3, #28
 80020de:	2200      	movs	r2, #0
 80020e0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80020e2:	7bfa      	ldrb	r2, [r7, #15]
 80020e4:	6879      	ldr	r1, [r7, #4]
 80020e6:	4613      	mov	r3, r2
 80020e8:	00db      	lsls	r3, r3, #3
 80020ea:	4413      	add	r3, r2
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	440b      	add	r3, r1
 80020f0:	3320      	adds	r3, #32
 80020f2:	2200      	movs	r2, #0
 80020f4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80020f6:	7bfa      	ldrb	r2, [r7, #15]
 80020f8:	6879      	ldr	r1, [r7, #4]
 80020fa:	4613      	mov	r3, r2
 80020fc:	00db      	lsls	r3, r3, #3
 80020fe:	4413      	add	r3, r2
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	440b      	add	r3, r1
 8002104:	3324      	adds	r3, #36	@ 0x24
 8002106:	2200      	movs	r2, #0
 8002108:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800210a:	7bfb      	ldrb	r3, [r7, #15]
 800210c:	3301      	adds	r3, #1
 800210e:	73fb      	strb	r3, [r7, #15]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	791b      	ldrb	r3, [r3, #4]
 8002114:	7bfa      	ldrb	r2, [r7, #15]
 8002116:	429a      	cmp	r2, r3
 8002118:	d3af      	bcc.n	800207a <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800211a:	2300      	movs	r3, #0
 800211c:	73fb      	strb	r3, [r7, #15]
 800211e:	e044      	b.n	80021aa <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002120:	7bfa      	ldrb	r2, [r7, #15]
 8002122:	6879      	ldr	r1, [r7, #4]
 8002124:	4613      	mov	r3, r2
 8002126:	00db      	lsls	r3, r3, #3
 8002128:	4413      	add	r3, r2
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	440b      	add	r3, r1
 800212e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002132:	2200      	movs	r2, #0
 8002134:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002136:	7bfa      	ldrb	r2, [r7, #15]
 8002138:	6879      	ldr	r1, [r7, #4]
 800213a:	4613      	mov	r3, r2
 800213c:	00db      	lsls	r3, r3, #3
 800213e:	4413      	add	r3, r2
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	440b      	add	r3, r1
 8002144:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002148:	7bfa      	ldrb	r2, [r7, #15]
 800214a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800214c:	7bfa      	ldrb	r2, [r7, #15]
 800214e:	6879      	ldr	r1, [r7, #4]
 8002150:	4613      	mov	r3, r2
 8002152:	00db      	lsls	r3, r3, #3
 8002154:	4413      	add	r3, r2
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	440b      	add	r3, r1
 800215a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800215e:	2200      	movs	r2, #0
 8002160:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002162:	7bfa      	ldrb	r2, [r7, #15]
 8002164:	6879      	ldr	r1, [r7, #4]
 8002166:	4613      	mov	r3, r2
 8002168:	00db      	lsls	r3, r3, #3
 800216a:	4413      	add	r3, r2
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	440b      	add	r3, r1
 8002170:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002174:	2200      	movs	r2, #0
 8002176:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002178:	7bfa      	ldrb	r2, [r7, #15]
 800217a:	6879      	ldr	r1, [r7, #4]
 800217c:	4613      	mov	r3, r2
 800217e:	00db      	lsls	r3, r3, #3
 8002180:	4413      	add	r3, r2
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	440b      	add	r3, r1
 8002186:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800218a:	2200      	movs	r2, #0
 800218c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800218e:	7bfa      	ldrb	r2, [r7, #15]
 8002190:	6879      	ldr	r1, [r7, #4]
 8002192:	4613      	mov	r3, r2
 8002194:	00db      	lsls	r3, r3, #3
 8002196:	4413      	add	r3, r2
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	440b      	add	r3, r1
 800219c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80021a0:	2200      	movs	r2, #0
 80021a2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021a4:	7bfb      	ldrb	r3, [r7, #15]
 80021a6:	3301      	adds	r3, #1
 80021a8:	73fb      	strb	r3, [r7, #15]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	791b      	ldrb	r3, [r3, #4]
 80021ae:	7bfa      	ldrb	r2, [r7, #15]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d3b5      	bcc.n	8002120 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6818      	ldr	r0, [r3, #0]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	7c1a      	ldrb	r2, [r3, #16]
 80021bc:	f88d 2000 	strb.w	r2, [sp]
 80021c0:	3304      	adds	r3, #4
 80021c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021c4:	f001 fed8 	bl	8003f78 <USB_DevInit>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d005      	beq.n	80021da <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2202      	movs	r2, #2
 80021d2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e013      	b.n	8002202 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2201      	movs	r2, #1
 80021e4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	7b1b      	ldrb	r3, [r3, #12]
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d102      	bne.n	80021f6 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f000 f80b 	bl	800220c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4618      	mov	r0, r3
 80021fc:	f002 f893 	bl	8004326 <USB_DevDisconnect>

  return HAL_OK;
 8002200:	2300      	movs	r3, #0
}
 8002202:	4618      	mov	r0, r3
 8002204:	3710      	adds	r7, #16
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
	...

0800220c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800220c:	b480      	push	{r7}
 800220e:	b085      	sub	sp, #20
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2201      	movs	r2, #1
 800221e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2200      	movs	r2, #0
 8002226:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	699b      	ldr	r3, [r3, #24]
 800222e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800223a:	4b05      	ldr	r3, [pc, #20]	@ (8002250 <HAL_PCDEx_ActivateLPM+0x44>)
 800223c:	4313      	orrs	r3, r2
 800223e:	68fa      	ldr	r2, [r7, #12]
 8002240:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002242:	2300      	movs	r3, #0
}
 8002244:	4618      	mov	r0, r3
 8002246:	3714      	adds	r7, #20
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr
 8002250:	10000003 	.word	0x10000003

08002254 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002258:	4b05      	ldr	r3, [pc, #20]	@ (8002270 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a04      	ldr	r2, [pc, #16]	@ (8002270 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800225e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002262:	6013      	str	r3, [r2, #0]
}
 8002264:	bf00      	nop
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	40007000 	.word	0x40007000

08002274 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b086      	sub	sp, #24
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800227c:	2300      	movs	r3, #0
 800227e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d101      	bne.n	800228a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e29b      	b.n	80027c2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0301 	and.w	r3, r3, #1
 8002292:	2b00      	cmp	r3, #0
 8002294:	f000 8087 	beq.w	80023a6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002298:	4b96      	ldr	r3, [pc, #600]	@ (80024f4 <HAL_RCC_OscConfig+0x280>)
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	f003 030c 	and.w	r3, r3, #12
 80022a0:	2b04      	cmp	r3, #4
 80022a2:	d00c      	beq.n	80022be <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022a4:	4b93      	ldr	r3, [pc, #588]	@ (80024f4 <HAL_RCC_OscConfig+0x280>)
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	f003 030c 	and.w	r3, r3, #12
 80022ac:	2b08      	cmp	r3, #8
 80022ae:	d112      	bne.n	80022d6 <HAL_RCC_OscConfig+0x62>
 80022b0:	4b90      	ldr	r3, [pc, #576]	@ (80024f4 <HAL_RCC_OscConfig+0x280>)
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022b8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80022bc:	d10b      	bne.n	80022d6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022be:	4b8d      	ldr	r3, [pc, #564]	@ (80024f4 <HAL_RCC_OscConfig+0x280>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d06c      	beq.n	80023a4 <HAL_RCC_OscConfig+0x130>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d168      	bne.n	80023a4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e275      	b.n	80027c2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022de:	d106      	bne.n	80022ee <HAL_RCC_OscConfig+0x7a>
 80022e0:	4b84      	ldr	r3, [pc, #528]	@ (80024f4 <HAL_RCC_OscConfig+0x280>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a83      	ldr	r2, [pc, #524]	@ (80024f4 <HAL_RCC_OscConfig+0x280>)
 80022e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022ea:	6013      	str	r3, [r2, #0]
 80022ec:	e02e      	b.n	800234c <HAL_RCC_OscConfig+0xd8>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d10c      	bne.n	8002310 <HAL_RCC_OscConfig+0x9c>
 80022f6:	4b7f      	ldr	r3, [pc, #508]	@ (80024f4 <HAL_RCC_OscConfig+0x280>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a7e      	ldr	r2, [pc, #504]	@ (80024f4 <HAL_RCC_OscConfig+0x280>)
 80022fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002300:	6013      	str	r3, [r2, #0]
 8002302:	4b7c      	ldr	r3, [pc, #496]	@ (80024f4 <HAL_RCC_OscConfig+0x280>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a7b      	ldr	r2, [pc, #492]	@ (80024f4 <HAL_RCC_OscConfig+0x280>)
 8002308:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800230c:	6013      	str	r3, [r2, #0]
 800230e:	e01d      	b.n	800234c <HAL_RCC_OscConfig+0xd8>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002318:	d10c      	bne.n	8002334 <HAL_RCC_OscConfig+0xc0>
 800231a:	4b76      	ldr	r3, [pc, #472]	@ (80024f4 <HAL_RCC_OscConfig+0x280>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a75      	ldr	r2, [pc, #468]	@ (80024f4 <HAL_RCC_OscConfig+0x280>)
 8002320:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002324:	6013      	str	r3, [r2, #0]
 8002326:	4b73      	ldr	r3, [pc, #460]	@ (80024f4 <HAL_RCC_OscConfig+0x280>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a72      	ldr	r2, [pc, #456]	@ (80024f4 <HAL_RCC_OscConfig+0x280>)
 800232c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002330:	6013      	str	r3, [r2, #0]
 8002332:	e00b      	b.n	800234c <HAL_RCC_OscConfig+0xd8>
 8002334:	4b6f      	ldr	r3, [pc, #444]	@ (80024f4 <HAL_RCC_OscConfig+0x280>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a6e      	ldr	r2, [pc, #440]	@ (80024f4 <HAL_RCC_OscConfig+0x280>)
 800233a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800233e:	6013      	str	r3, [r2, #0]
 8002340:	4b6c      	ldr	r3, [pc, #432]	@ (80024f4 <HAL_RCC_OscConfig+0x280>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a6b      	ldr	r2, [pc, #428]	@ (80024f4 <HAL_RCC_OscConfig+0x280>)
 8002346:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800234a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d013      	beq.n	800237c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002354:	f7fe fd98 	bl	8000e88 <HAL_GetTick>
 8002358:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800235a:	e008      	b.n	800236e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800235c:	f7fe fd94 	bl	8000e88 <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	2b64      	cmp	r3, #100	@ 0x64
 8002368:	d901      	bls.n	800236e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800236a:	2303      	movs	r3, #3
 800236c:	e229      	b.n	80027c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800236e:	4b61      	ldr	r3, [pc, #388]	@ (80024f4 <HAL_RCC_OscConfig+0x280>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d0f0      	beq.n	800235c <HAL_RCC_OscConfig+0xe8>
 800237a:	e014      	b.n	80023a6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800237c:	f7fe fd84 	bl	8000e88 <HAL_GetTick>
 8002380:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002382:	e008      	b.n	8002396 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002384:	f7fe fd80 	bl	8000e88 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	2b64      	cmp	r3, #100	@ 0x64
 8002390:	d901      	bls.n	8002396 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e215      	b.n	80027c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002396:	4b57      	ldr	r3, [pc, #348]	@ (80024f4 <HAL_RCC_OscConfig+0x280>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d1f0      	bne.n	8002384 <HAL_RCC_OscConfig+0x110>
 80023a2:	e000      	b.n	80023a6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0302 	and.w	r3, r3, #2
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d069      	beq.n	8002486 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023b2:	4b50      	ldr	r3, [pc, #320]	@ (80024f4 <HAL_RCC_OscConfig+0x280>)
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	f003 030c 	and.w	r3, r3, #12
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d00b      	beq.n	80023d6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023be:	4b4d      	ldr	r3, [pc, #308]	@ (80024f4 <HAL_RCC_OscConfig+0x280>)
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	f003 030c 	and.w	r3, r3, #12
 80023c6:	2b08      	cmp	r3, #8
 80023c8:	d11c      	bne.n	8002404 <HAL_RCC_OscConfig+0x190>
 80023ca:	4b4a      	ldr	r3, [pc, #296]	@ (80024f4 <HAL_RCC_OscConfig+0x280>)
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d116      	bne.n	8002404 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023d6:	4b47      	ldr	r3, [pc, #284]	@ (80024f4 <HAL_RCC_OscConfig+0x280>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 0302 	and.w	r3, r3, #2
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d005      	beq.n	80023ee <HAL_RCC_OscConfig+0x17a>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d001      	beq.n	80023ee <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e1e9      	b.n	80027c2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023ee:	4b41      	ldr	r3, [pc, #260]	@ (80024f4 <HAL_RCC_OscConfig+0x280>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	691b      	ldr	r3, [r3, #16]
 80023fa:	00db      	lsls	r3, r3, #3
 80023fc:	493d      	ldr	r1, [pc, #244]	@ (80024f4 <HAL_RCC_OscConfig+0x280>)
 80023fe:	4313      	orrs	r3, r2
 8002400:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002402:	e040      	b.n	8002486 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d023      	beq.n	8002454 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800240c:	4b39      	ldr	r3, [pc, #228]	@ (80024f4 <HAL_RCC_OscConfig+0x280>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a38      	ldr	r2, [pc, #224]	@ (80024f4 <HAL_RCC_OscConfig+0x280>)
 8002412:	f043 0301 	orr.w	r3, r3, #1
 8002416:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002418:	f7fe fd36 	bl	8000e88 <HAL_GetTick>
 800241c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800241e:	e008      	b.n	8002432 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002420:	f7fe fd32 	bl	8000e88 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	2b02      	cmp	r3, #2
 800242c:	d901      	bls.n	8002432 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e1c7      	b.n	80027c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002432:	4b30      	ldr	r3, [pc, #192]	@ (80024f4 <HAL_RCC_OscConfig+0x280>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0302 	and.w	r3, r3, #2
 800243a:	2b00      	cmp	r3, #0
 800243c:	d0f0      	beq.n	8002420 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800243e:	4b2d      	ldr	r3, [pc, #180]	@ (80024f4 <HAL_RCC_OscConfig+0x280>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	691b      	ldr	r3, [r3, #16]
 800244a:	00db      	lsls	r3, r3, #3
 800244c:	4929      	ldr	r1, [pc, #164]	@ (80024f4 <HAL_RCC_OscConfig+0x280>)
 800244e:	4313      	orrs	r3, r2
 8002450:	600b      	str	r3, [r1, #0]
 8002452:	e018      	b.n	8002486 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002454:	4b27      	ldr	r3, [pc, #156]	@ (80024f4 <HAL_RCC_OscConfig+0x280>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a26      	ldr	r2, [pc, #152]	@ (80024f4 <HAL_RCC_OscConfig+0x280>)
 800245a:	f023 0301 	bic.w	r3, r3, #1
 800245e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002460:	f7fe fd12 	bl	8000e88 <HAL_GetTick>
 8002464:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002466:	e008      	b.n	800247a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002468:	f7fe fd0e 	bl	8000e88 <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	2b02      	cmp	r3, #2
 8002474:	d901      	bls.n	800247a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e1a3      	b.n	80027c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800247a:	4b1e      	ldr	r3, [pc, #120]	@ (80024f4 <HAL_RCC_OscConfig+0x280>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0302 	and.w	r3, r3, #2
 8002482:	2b00      	cmp	r3, #0
 8002484:	d1f0      	bne.n	8002468 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0308 	and.w	r3, r3, #8
 800248e:	2b00      	cmp	r3, #0
 8002490:	d038      	beq.n	8002504 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	695b      	ldr	r3, [r3, #20]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d019      	beq.n	80024ce <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800249a:	4b16      	ldr	r3, [pc, #88]	@ (80024f4 <HAL_RCC_OscConfig+0x280>)
 800249c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800249e:	4a15      	ldr	r2, [pc, #84]	@ (80024f4 <HAL_RCC_OscConfig+0x280>)
 80024a0:	f043 0301 	orr.w	r3, r3, #1
 80024a4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024a6:	f7fe fcef 	bl	8000e88 <HAL_GetTick>
 80024aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024ac:	e008      	b.n	80024c0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024ae:	f7fe fceb 	bl	8000e88 <HAL_GetTick>
 80024b2:	4602      	mov	r2, r0
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d901      	bls.n	80024c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80024bc:	2303      	movs	r3, #3
 80024be:	e180      	b.n	80027c2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024c0:	4b0c      	ldr	r3, [pc, #48]	@ (80024f4 <HAL_RCC_OscConfig+0x280>)
 80024c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024c4:	f003 0302 	and.w	r3, r3, #2
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d0f0      	beq.n	80024ae <HAL_RCC_OscConfig+0x23a>
 80024cc:	e01a      	b.n	8002504 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024ce:	4b09      	ldr	r3, [pc, #36]	@ (80024f4 <HAL_RCC_OscConfig+0x280>)
 80024d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024d2:	4a08      	ldr	r2, [pc, #32]	@ (80024f4 <HAL_RCC_OscConfig+0x280>)
 80024d4:	f023 0301 	bic.w	r3, r3, #1
 80024d8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024da:	f7fe fcd5 	bl	8000e88 <HAL_GetTick>
 80024de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024e0:	e00a      	b.n	80024f8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024e2:	f7fe fcd1 	bl	8000e88 <HAL_GetTick>
 80024e6:	4602      	mov	r2, r0
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d903      	bls.n	80024f8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80024f0:	2303      	movs	r3, #3
 80024f2:	e166      	b.n	80027c2 <HAL_RCC_OscConfig+0x54e>
 80024f4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024f8:	4b92      	ldr	r3, [pc, #584]	@ (8002744 <HAL_RCC_OscConfig+0x4d0>)
 80024fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024fc:	f003 0302 	and.w	r3, r3, #2
 8002500:	2b00      	cmp	r3, #0
 8002502:	d1ee      	bne.n	80024e2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0304 	and.w	r3, r3, #4
 800250c:	2b00      	cmp	r3, #0
 800250e:	f000 80a4 	beq.w	800265a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002512:	4b8c      	ldr	r3, [pc, #560]	@ (8002744 <HAL_RCC_OscConfig+0x4d0>)
 8002514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002516:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d10d      	bne.n	800253a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800251e:	4b89      	ldr	r3, [pc, #548]	@ (8002744 <HAL_RCC_OscConfig+0x4d0>)
 8002520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002522:	4a88      	ldr	r2, [pc, #544]	@ (8002744 <HAL_RCC_OscConfig+0x4d0>)
 8002524:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002528:	6413      	str	r3, [r2, #64]	@ 0x40
 800252a:	4b86      	ldr	r3, [pc, #536]	@ (8002744 <HAL_RCC_OscConfig+0x4d0>)
 800252c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800252e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002532:	60bb      	str	r3, [r7, #8]
 8002534:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002536:	2301      	movs	r3, #1
 8002538:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800253a:	4b83      	ldr	r3, [pc, #524]	@ (8002748 <HAL_RCC_OscConfig+0x4d4>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002542:	2b00      	cmp	r3, #0
 8002544:	d118      	bne.n	8002578 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002546:	4b80      	ldr	r3, [pc, #512]	@ (8002748 <HAL_RCC_OscConfig+0x4d4>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a7f      	ldr	r2, [pc, #508]	@ (8002748 <HAL_RCC_OscConfig+0x4d4>)
 800254c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002550:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002552:	f7fe fc99 	bl	8000e88 <HAL_GetTick>
 8002556:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002558:	e008      	b.n	800256c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800255a:	f7fe fc95 	bl	8000e88 <HAL_GetTick>
 800255e:	4602      	mov	r2, r0
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	2b64      	cmp	r3, #100	@ 0x64
 8002566:	d901      	bls.n	800256c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002568:	2303      	movs	r3, #3
 800256a:	e12a      	b.n	80027c2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800256c:	4b76      	ldr	r3, [pc, #472]	@ (8002748 <HAL_RCC_OscConfig+0x4d4>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002574:	2b00      	cmp	r3, #0
 8002576:	d0f0      	beq.n	800255a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	2b01      	cmp	r3, #1
 800257e:	d106      	bne.n	800258e <HAL_RCC_OscConfig+0x31a>
 8002580:	4b70      	ldr	r3, [pc, #448]	@ (8002744 <HAL_RCC_OscConfig+0x4d0>)
 8002582:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002584:	4a6f      	ldr	r2, [pc, #444]	@ (8002744 <HAL_RCC_OscConfig+0x4d0>)
 8002586:	f043 0301 	orr.w	r3, r3, #1
 800258a:	6713      	str	r3, [r2, #112]	@ 0x70
 800258c:	e02d      	b.n	80025ea <HAL_RCC_OscConfig+0x376>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d10c      	bne.n	80025b0 <HAL_RCC_OscConfig+0x33c>
 8002596:	4b6b      	ldr	r3, [pc, #428]	@ (8002744 <HAL_RCC_OscConfig+0x4d0>)
 8002598:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800259a:	4a6a      	ldr	r2, [pc, #424]	@ (8002744 <HAL_RCC_OscConfig+0x4d0>)
 800259c:	f023 0301 	bic.w	r3, r3, #1
 80025a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80025a2:	4b68      	ldr	r3, [pc, #416]	@ (8002744 <HAL_RCC_OscConfig+0x4d0>)
 80025a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025a6:	4a67      	ldr	r2, [pc, #412]	@ (8002744 <HAL_RCC_OscConfig+0x4d0>)
 80025a8:	f023 0304 	bic.w	r3, r3, #4
 80025ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80025ae:	e01c      	b.n	80025ea <HAL_RCC_OscConfig+0x376>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	2b05      	cmp	r3, #5
 80025b6:	d10c      	bne.n	80025d2 <HAL_RCC_OscConfig+0x35e>
 80025b8:	4b62      	ldr	r3, [pc, #392]	@ (8002744 <HAL_RCC_OscConfig+0x4d0>)
 80025ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025bc:	4a61      	ldr	r2, [pc, #388]	@ (8002744 <HAL_RCC_OscConfig+0x4d0>)
 80025be:	f043 0304 	orr.w	r3, r3, #4
 80025c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80025c4:	4b5f      	ldr	r3, [pc, #380]	@ (8002744 <HAL_RCC_OscConfig+0x4d0>)
 80025c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025c8:	4a5e      	ldr	r2, [pc, #376]	@ (8002744 <HAL_RCC_OscConfig+0x4d0>)
 80025ca:	f043 0301 	orr.w	r3, r3, #1
 80025ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80025d0:	e00b      	b.n	80025ea <HAL_RCC_OscConfig+0x376>
 80025d2:	4b5c      	ldr	r3, [pc, #368]	@ (8002744 <HAL_RCC_OscConfig+0x4d0>)
 80025d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025d6:	4a5b      	ldr	r2, [pc, #364]	@ (8002744 <HAL_RCC_OscConfig+0x4d0>)
 80025d8:	f023 0301 	bic.w	r3, r3, #1
 80025dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80025de:	4b59      	ldr	r3, [pc, #356]	@ (8002744 <HAL_RCC_OscConfig+0x4d0>)
 80025e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025e2:	4a58      	ldr	r2, [pc, #352]	@ (8002744 <HAL_RCC_OscConfig+0x4d0>)
 80025e4:	f023 0304 	bic.w	r3, r3, #4
 80025e8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d015      	beq.n	800261e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025f2:	f7fe fc49 	bl	8000e88 <HAL_GetTick>
 80025f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025f8:	e00a      	b.n	8002610 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025fa:	f7fe fc45 	bl	8000e88 <HAL_GetTick>
 80025fe:	4602      	mov	r2, r0
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002608:	4293      	cmp	r3, r2
 800260a:	d901      	bls.n	8002610 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800260c:	2303      	movs	r3, #3
 800260e:	e0d8      	b.n	80027c2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002610:	4b4c      	ldr	r3, [pc, #304]	@ (8002744 <HAL_RCC_OscConfig+0x4d0>)
 8002612:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002614:	f003 0302 	and.w	r3, r3, #2
 8002618:	2b00      	cmp	r3, #0
 800261a:	d0ee      	beq.n	80025fa <HAL_RCC_OscConfig+0x386>
 800261c:	e014      	b.n	8002648 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800261e:	f7fe fc33 	bl	8000e88 <HAL_GetTick>
 8002622:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002624:	e00a      	b.n	800263c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002626:	f7fe fc2f 	bl	8000e88 <HAL_GetTick>
 800262a:	4602      	mov	r2, r0
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002634:	4293      	cmp	r3, r2
 8002636:	d901      	bls.n	800263c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002638:	2303      	movs	r3, #3
 800263a:	e0c2      	b.n	80027c2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800263c:	4b41      	ldr	r3, [pc, #260]	@ (8002744 <HAL_RCC_OscConfig+0x4d0>)
 800263e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002640:	f003 0302 	and.w	r3, r3, #2
 8002644:	2b00      	cmp	r3, #0
 8002646:	d1ee      	bne.n	8002626 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002648:	7dfb      	ldrb	r3, [r7, #23]
 800264a:	2b01      	cmp	r3, #1
 800264c:	d105      	bne.n	800265a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800264e:	4b3d      	ldr	r3, [pc, #244]	@ (8002744 <HAL_RCC_OscConfig+0x4d0>)
 8002650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002652:	4a3c      	ldr	r2, [pc, #240]	@ (8002744 <HAL_RCC_OscConfig+0x4d0>)
 8002654:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002658:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	699b      	ldr	r3, [r3, #24]
 800265e:	2b00      	cmp	r3, #0
 8002660:	f000 80ae 	beq.w	80027c0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002664:	4b37      	ldr	r3, [pc, #220]	@ (8002744 <HAL_RCC_OscConfig+0x4d0>)
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	f003 030c 	and.w	r3, r3, #12
 800266c:	2b08      	cmp	r3, #8
 800266e:	d06d      	beq.n	800274c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	699b      	ldr	r3, [r3, #24]
 8002674:	2b02      	cmp	r3, #2
 8002676:	d14b      	bne.n	8002710 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002678:	4b32      	ldr	r3, [pc, #200]	@ (8002744 <HAL_RCC_OscConfig+0x4d0>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a31      	ldr	r2, [pc, #196]	@ (8002744 <HAL_RCC_OscConfig+0x4d0>)
 800267e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002682:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002684:	f7fe fc00 	bl	8000e88 <HAL_GetTick>
 8002688:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800268a:	e008      	b.n	800269e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800268c:	f7fe fbfc 	bl	8000e88 <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	2b02      	cmp	r3, #2
 8002698:	d901      	bls.n	800269e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e091      	b.n	80027c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800269e:	4b29      	ldr	r3, [pc, #164]	@ (8002744 <HAL_RCC_OscConfig+0x4d0>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d1f0      	bne.n	800268c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	69da      	ldr	r2, [r3, #28]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6a1b      	ldr	r3, [r3, #32]
 80026b2:	431a      	orrs	r2, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026b8:	019b      	lsls	r3, r3, #6
 80026ba:	431a      	orrs	r2, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026c0:	085b      	lsrs	r3, r3, #1
 80026c2:	3b01      	subs	r3, #1
 80026c4:	041b      	lsls	r3, r3, #16
 80026c6:	431a      	orrs	r2, r3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026cc:	061b      	lsls	r3, r3, #24
 80026ce:	431a      	orrs	r2, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026d4:	071b      	lsls	r3, r3, #28
 80026d6:	491b      	ldr	r1, [pc, #108]	@ (8002744 <HAL_RCC_OscConfig+0x4d0>)
 80026d8:	4313      	orrs	r3, r2
 80026da:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026dc:	4b19      	ldr	r3, [pc, #100]	@ (8002744 <HAL_RCC_OscConfig+0x4d0>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a18      	ldr	r2, [pc, #96]	@ (8002744 <HAL_RCC_OscConfig+0x4d0>)
 80026e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80026e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026e8:	f7fe fbce 	bl	8000e88 <HAL_GetTick>
 80026ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026ee:	e008      	b.n	8002702 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026f0:	f7fe fbca 	bl	8000e88 <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d901      	bls.n	8002702 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e05f      	b.n	80027c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002702:	4b10      	ldr	r3, [pc, #64]	@ (8002744 <HAL_RCC_OscConfig+0x4d0>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d0f0      	beq.n	80026f0 <HAL_RCC_OscConfig+0x47c>
 800270e:	e057      	b.n	80027c0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002710:	4b0c      	ldr	r3, [pc, #48]	@ (8002744 <HAL_RCC_OscConfig+0x4d0>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a0b      	ldr	r2, [pc, #44]	@ (8002744 <HAL_RCC_OscConfig+0x4d0>)
 8002716:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800271a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800271c:	f7fe fbb4 	bl	8000e88 <HAL_GetTick>
 8002720:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002722:	e008      	b.n	8002736 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002724:	f7fe fbb0 	bl	8000e88 <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	2b02      	cmp	r3, #2
 8002730:	d901      	bls.n	8002736 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e045      	b.n	80027c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002736:	4b03      	ldr	r3, [pc, #12]	@ (8002744 <HAL_RCC_OscConfig+0x4d0>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d1f0      	bne.n	8002724 <HAL_RCC_OscConfig+0x4b0>
 8002742:	e03d      	b.n	80027c0 <HAL_RCC_OscConfig+0x54c>
 8002744:	40023800 	.word	0x40023800
 8002748:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800274c:	4b1f      	ldr	r3, [pc, #124]	@ (80027cc <HAL_RCC_OscConfig+0x558>)
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	699b      	ldr	r3, [r3, #24]
 8002756:	2b01      	cmp	r3, #1
 8002758:	d030      	beq.n	80027bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002764:	429a      	cmp	r2, r3
 8002766:	d129      	bne.n	80027bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002772:	429a      	cmp	r2, r3
 8002774:	d122      	bne.n	80027bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002776:	68fa      	ldr	r2, [r7, #12]
 8002778:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800277c:	4013      	ands	r3, r2
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002782:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002784:	4293      	cmp	r3, r2
 8002786:	d119      	bne.n	80027bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002792:	085b      	lsrs	r3, r3, #1
 8002794:	3b01      	subs	r3, #1
 8002796:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002798:	429a      	cmp	r2, r3
 800279a:	d10f      	bne.n	80027bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027a6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d107      	bne.n	80027bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027b6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d001      	beq.n	80027c0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e000      	b.n	80027c2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3718      	adds	r7, #24
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	40023800 	.word	0x40023800

080027d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80027da:	2300      	movs	r3, #0
 80027dc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d101      	bne.n	80027e8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e0d0      	b.n	800298a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027e8:	4b6a      	ldr	r3, [pc, #424]	@ (8002994 <HAL_RCC_ClockConfig+0x1c4>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 030f 	and.w	r3, r3, #15
 80027f0:	683a      	ldr	r2, [r7, #0]
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d910      	bls.n	8002818 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027f6:	4b67      	ldr	r3, [pc, #412]	@ (8002994 <HAL_RCC_ClockConfig+0x1c4>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f023 020f 	bic.w	r2, r3, #15
 80027fe:	4965      	ldr	r1, [pc, #404]	@ (8002994 <HAL_RCC_ClockConfig+0x1c4>)
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	4313      	orrs	r3, r2
 8002804:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002806:	4b63      	ldr	r3, [pc, #396]	@ (8002994 <HAL_RCC_ClockConfig+0x1c4>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 030f 	and.w	r3, r3, #15
 800280e:	683a      	ldr	r2, [r7, #0]
 8002810:	429a      	cmp	r2, r3
 8002812:	d001      	beq.n	8002818 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e0b8      	b.n	800298a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0302 	and.w	r3, r3, #2
 8002820:	2b00      	cmp	r3, #0
 8002822:	d020      	beq.n	8002866 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0304 	and.w	r3, r3, #4
 800282c:	2b00      	cmp	r3, #0
 800282e:	d005      	beq.n	800283c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002830:	4b59      	ldr	r3, [pc, #356]	@ (8002998 <HAL_RCC_ClockConfig+0x1c8>)
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	4a58      	ldr	r2, [pc, #352]	@ (8002998 <HAL_RCC_ClockConfig+0x1c8>)
 8002836:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800283a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0308 	and.w	r3, r3, #8
 8002844:	2b00      	cmp	r3, #0
 8002846:	d005      	beq.n	8002854 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002848:	4b53      	ldr	r3, [pc, #332]	@ (8002998 <HAL_RCC_ClockConfig+0x1c8>)
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	4a52      	ldr	r2, [pc, #328]	@ (8002998 <HAL_RCC_ClockConfig+0x1c8>)
 800284e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002852:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002854:	4b50      	ldr	r3, [pc, #320]	@ (8002998 <HAL_RCC_ClockConfig+0x1c8>)
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	494d      	ldr	r1, [pc, #308]	@ (8002998 <HAL_RCC_ClockConfig+0x1c8>)
 8002862:	4313      	orrs	r3, r2
 8002864:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0301 	and.w	r3, r3, #1
 800286e:	2b00      	cmp	r3, #0
 8002870:	d040      	beq.n	80028f4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	2b01      	cmp	r3, #1
 8002878:	d107      	bne.n	800288a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800287a:	4b47      	ldr	r3, [pc, #284]	@ (8002998 <HAL_RCC_ClockConfig+0x1c8>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d115      	bne.n	80028b2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e07f      	b.n	800298a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	2b02      	cmp	r3, #2
 8002890:	d107      	bne.n	80028a2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002892:	4b41      	ldr	r3, [pc, #260]	@ (8002998 <HAL_RCC_ClockConfig+0x1c8>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d109      	bne.n	80028b2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e073      	b.n	800298a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028a2:	4b3d      	ldr	r3, [pc, #244]	@ (8002998 <HAL_RCC_ClockConfig+0x1c8>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0302 	and.w	r3, r3, #2
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d101      	bne.n	80028b2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e06b      	b.n	800298a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028b2:	4b39      	ldr	r3, [pc, #228]	@ (8002998 <HAL_RCC_ClockConfig+0x1c8>)
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	f023 0203 	bic.w	r2, r3, #3
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	4936      	ldr	r1, [pc, #216]	@ (8002998 <HAL_RCC_ClockConfig+0x1c8>)
 80028c0:	4313      	orrs	r3, r2
 80028c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028c4:	f7fe fae0 	bl	8000e88 <HAL_GetTick>
 80028c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ca:	e00a      	b.n	80028e2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028cc:	f7fe fadc 	bl	8000e88 <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028da:	4293      	cmp	r3, r2
 80028dc:	d901      	bls.n	80028e2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80028de:	2303      	movs	r3, #3
 80028e0:	e053      	b.n	800298a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028e2:	4b2d      	ldr	r3, [pc, #180]	@ (8002998 <HAL_RCC_ClockConfig+0x1c8>)
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	f003 020c 	and.w	r2, r3, #12
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d1eb      	bne.n	80028cc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028f4:	4b27      	ldr	r3, [pc, #156]	@ (8002994 <HAL_RCC_ClockConfig+0x1c4>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 030f 	and.w	r3, r3, #15
 80028fc:	683a      	ldr	r2, [r7, #0]
 80028fe:	429a      	cmp	r2, r3
 8002900:	d210      	bcs.n	8002924 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002902:	4b24      	ldr	r3, [pc, #144]	@ (8002994 <HAL_RCC_ClockConfig+0x1c4>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f023 020f 	bic.w	r2, r3, #15
 800290a:	4922      	ldr	r1, [pc, #136]	@ (8002994 <HAL_RCC_ClockConfig+0x1c4>)
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	4313      	orrs	r3, r2
 8002910:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002912:	4b20      	ldr	r3, [pc, #128]	@ (8002994 <HAL_RCC_ClockConfig+0x1c4>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 030f 	and.w	r3, r3, #15
 800291a:	683a      	ldr	r2, [r7, #0]
 800291c:	429a      	cmp	r2, r3
 800291e:	d001      	beq.n	8002924 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e032      	b.n	800298a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0304 	and.w	r3, r3, #4
 800292c:	2b00      	cmp	r3, #0
 800292e:	d008      	beq.n	8002942 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002930:	4b19      	ldr	r3, [pc, #100]	@ (8002998 <HAL_RCC_ClockConfig+0x1c8>)
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	4916      	ldr	r1, [pc, #88]	@ (8002998 <HAL_RCC_ClockConfig+0x1c8>)
 800293e:	4313      	orrs	r3, r2
 8002940:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0308 	and.w	r3, r3, #8
 800294a:	2b00      	cmp	r3, #0
 800294c:	d009      	beq.n	8002962 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800294e:	4b12      	ldr	r3, [pc, #72]	@ (8002998 <HAL_RCC_ClockConfig+0x1c8>)
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	691b      	ldr	r3, [r3, #16]
 800295a:	00db      	lsls	r3, r3, #3
 800295c:	490e      	ldr	r1, [pc, #56]	@ (8002998 <HAL_RCC_ClockConfig+0x1c8>)
 800295e:	4313      	orrs	r3, r2
 8002960:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002962:	f000 f821 	bl	80029a8 <HAL_RCC_GetSysClockFreq>
 8002966:	4602      	mov	r2, r0
 8002968:	4b0b      	ldr	r3, [pc, #44]	@ (8002998 <HAL_RCC_ClockConfig+0x1c8>)
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	091b      	lsrs	r3, r3, #4
 800296e:	f003 030f 	and.w	r3, r3, #15
 8002972:	490a      	ldr	r1, [pc, #40]	@ (800299c <HAL_RCC_ClockConfig+0x1cc>)
 8002974:	5ccb      	ldrb	r3, [r1, r3]
 8002976:	fa22 f303 	lsr.w	r3, r2, r3
 800297a:	4a09      	ldr	r2, [pc, #36]	@ (80029a0 <HAL_RCC_ClockConfig+0x1d0>)
 800297c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800297e:	4b09      	ldr	r3, [pc, #36]	@ (80029a4 <HAL_RCC_ClockConfig+0x1d4>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4618      	mov	r0, r3
 8002984:	f7fe fa3c 	bl	8000e00 <HAL_InitTick>

  return HAL_OK;
 8002988:	2300      	movs	r3, #0
}
 800298a:	4618      	mov	r0, r3
 800298c:	3710      	adds	r7, #16
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	40023c00 	.word	0x40023c00
 8002998:	40023800 	.word	0x40023800
 800299c:	08004458 	.word	0x08004458
 80029a0:	20000008 	.word	0x20000008
 80029a4:	2000000c 	.word	0x2000000c

080029a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029ac:	b094      	sub	sp, #80	@ 0x50
 80029ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80029b0:	2300      	movs	r3, #0
 80029b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80029b4:	2300      	movs	r3, #0
 80029b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80029b8:	2300      	movs	r3, #0
 80029ba:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 80029bc:	2300      	movs	r3, #0
 80029be:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029c0:	4b79      	ldr	r3, [pc, #484]	@ (8002ba8 <HAL_RCC_GetSysClockFreq+0x200>)
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	f003 030c 	and.w	r3, r3, #12
 80029c8:	2b08      	cmp	r3, #8
 80029ca:	d00d      	beq.n	80029e8 <HAL_RCC_GetSysClockFreq+0x40>
 80029cc:	2b08      	cmp	r3, #8
 80029ce:	f200 80e1 	bhi.w	8002b94 <HAL_RCC_GetSysClockFreq+0x1ec>
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d002      	beq.n	80029dc <HAL_RCC_GetSysClockFreq+0x34>
 80029d6:	2b04      	cmp	r3, #4
 80029d8:	d003      	beq.n	80029e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80029da:	e0db      	b.n	8002b94 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029dc:	4b73      	ldr	r3, [pc, #460]	@ (8002bac <HAL_RCC_GetSysClockFreq+0x204>)
 80029de:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80029e0:	e0db      	b.n	8002b9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029e2:	4b73      	ldr	r3, [pc, #460]	@ (8002bb0 <HAL_RCC_GetSysClockFreq+0x208>)
 80029e4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80029e6:	e0d8      	b.n	8002b9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029e8:	4b6f      	ldr	r3, [pc, #444]	@ (8002ba8 <HAL_RCC_GetSysClockFreq+0x200>)
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80029f0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80029f2:	4b6d      	ldr	r3, [pc, #436]	@ (8002ba8 <HAL_RCC_GetSysClockFreq+0x200>)
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d063      	beq.n	8002ac6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029fe:	4b6a      	ldr	r3, [pc, #424]	@ (8002ba8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	099b      	lsrs	r3, r3, #6
 8002a04:	2200      	movs	r2, #0
 8002a06:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002a08:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002a0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a10:	633b      	str	r3, [r7, #48]	@ 0x30
 8002a12:	2300      	movs	r3, #0
 8002a14:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a16:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002a1a:	4622      	mov	r2, r4
 8002a1c:	462b      	mov	r3, r5
 8002a1e:	f04f 0000 	mov.w	r0, #0
 8002a22:	f04f 0100 	mov.w	r1, #0
 8002a26:	0159      	lsls	r1, r3, #5
 8002a28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a2c:	0150      	lsls	r0, r2, #5
 8002a2e:	4602      	mov	r2, r0
 8002a30:	460b      	mov	r3, r1
 8002a32:	4621      	mov	r1, r4
 8002a34:	1a51      	subs	r1, r2, r1
 8002a36:	6139      	str	r1, [r7, #16]
 8002a38:	4629      	mov	r1, r5
 8002a3a:	eb63 0301 	sbc.w	r3, r3, r1
 8002a3e:	617b      	str	r3, [r7, #20]
 8002a40:	f04f 0200 	mov.w	r2, #0
 8002a44:	f04f 0300 	mov.w	r3, #0
 8002a48:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a4c:	4659      	mov	r1, fp
 8002a4e:	018b      	lsls	r3, r1, #6
 8002a50:	4651      	mov	r1, sl
 8002a52:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a56:	4651      	mov	r1, sl
 8002a58:	018a      	lsls	r2, r1, #6
 8002a5a:	4651      	mov	r1, sl
 8002a5c:	ebb2 0801 	subs.w	r8, r2, r1
 8002a60:	4659      	mov	r1, fp
 8002a62:	eb63 0901 	sbc.w	r9, r3, r1
 8002a66:	f04f 0200 	mov.w	r2, #0
 8002a6a:	f04f 0300 	mov.w	r3, #0
 8002a6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a7a:	4690      	mov	r8, r2
 8002a7c:	4699      	mov	r9, r3
 8002a7e:	4623      	mov	r3, r4
 8002a80:	eb18 0303 	adds.w	r3, r8, r3
 8002a84:	60bb      	str	r3, [r7, #8]
 8002a86:	462b      	mov	r3, r5
 8002a88:	eb49 0303 	adc.w	r3, r9, r3
 8002a8c:	60fb      	str	r3, [r7, #12]
 8002a8e:	f04f 0200 	mov.w	r2, #0
 8002a92:	f04f 0300 	mov.w	r3, #0
 8002a96:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002a9a:	4629      	mov	r1, r5
 8002a9c:	024b      	lsls	r3, r1, #9
 8002a9e:	4621      	mov	r1, r4
 8002aa0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002aa4:	4621      	mov	r1, r4
 8002aa6:	024a      	lsls	r2, r1, #9
 8002aa8:	4610      	mov	r0, r2
 8002aaa:	4619      	mov	r1, r3
 8002aac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002aae:	2200      	movs	r2, #0
 8002ab0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002ab2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002ab4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002ab8:	f7fd fbbe 	bl	8000238 <__aeabi_uldivmod>
 8002abc:	4602      	mov	r2, r0
 8002abe:	460b      	mov	r3, r1
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ac4:	e058      	b.n	8002b78 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ac6:	4b38      	ldr	r3, [pc, #224]	@ (8002ba8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	099b      	lsrs	r3, r3, #6
 8002acc:	2200      	movs	r2, #0
 8002ace:	4618      	mov	r0, r3
 8002ad0:	4611      	mov	r1, r2
 8002ad2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002ad6:	623b      	str	r3, [r7, #32]
 8002ad8:	2300      	movs	r3, #0
 8002ada:	627b      	str	r3, [r7, #36]	@ 0x24
 8002adc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002ae0:	4642      	mov	r2, r8
 8002ae2:	464b      	mov	r3, r9
 8002ae4:	f04f 0000 	mov.w	r0, #0
 8002ae8:	f04f 0100 	mov.w	r1, #0
 8002aec:	0159      	lsls	r1, r3, #5
 8002aee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002af2:	0150      	lsls	r0, r2, #5
 8002af4:	4602      	mov	r2, r0
 8002af6:	460b      	mov	r3, r1
 8002af8:	4641      	mov	r1, r8
 8002afa:	ebb2 0a01 	subs.w	sl, r2, r1
 8002afe:	4649      	mov	r1, r9
 8002b00:	eb63 0b01 	sbc.w	fp, r3, r1
 8002b04:	f04f 0200 	mov.w	r2, #0
 8002b08:	f04f 0300 	mov.w	r3, #0
 8002b0c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002b10:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002b14:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002b18:	ebb2 040a 	subs.w	r4, r2, sl
 8002b1c:	eb63 050b 	sbc.w	r5, r3, fp
 8002b20:	f04f 0200 	mov.w	r2, #0
 8002b24:	f04f 0300 	mov.w	r3, #0
 8002b28:	00eb      	lsls	r3, r5, #3
 8002b2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b2e:	00e2      	lsls	r2, r4, #3
 8002b30:	4614      	mov	r4, r2
 8002b32:	461d      	mov	r5, r3
 8002b34:	4643      	mov	r3, r8
 8002b36:	18e3      	adds	r3, r4, r3
 8002b38:	603b      	str	r3, [r7, #0]
 8002b3a:	464b      	mov	r3, r9
 8002b3c:	eb45 0303 	adc.w	r3, r5, r3
 8002b40:	607b      	str	r3, [r7, #4]
 8002b42:	f04f 0200 	mov.w	r2, #0
 8002b46:	f04f 0300 	mov.w	r3, #0
 8002b4a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b4e:	4629      	mov	r1, r5
 8002b50:	028b      	lsls	r3, r1, #10
 8002b52:	4621      	mov	r1, r4
 8002b54:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b58:	4621      	mov	r1, r4
 8002b5a:	028a      	lsls	r2, r1, #10
 8002b5c:	4610      	mov	r0, r2
 8002b5e:	4619      	mov	r1, r3
 8002b60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b62:	2200      	movs	r2, #0
 8002b64:	61bb      	str	r3, [r7, #24]
 8002b66:	61fa      	str	r2, [r7, #28]
 8002b68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b6c:	f7fd fb64 	bl	8000238 <__aeabi_uldivmod>
 8002b70:	4602      	mov	r2, r0
 8002b72:	460b      	mov	r3, r1
 8002b74:	4613      	mov	r3, r2
 8002b76:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002b78:	4b0b      	ldr	r3, [pc, #44]	@ (8002ba8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	0c1b      	lsrs	r3, r3, #16
 8002b7e:	f003 0303 	and.w	r3, r3, #3
 8002b82:	3301      	adds	r3, #1
 8002b84:	005b      	lsls	r3, r3, #1
 8002b86:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002b88:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002b8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b90:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002b92:	e002      	b.n	8002b9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b94:	4b05      	ldr	r3, [pc, #20]	@ (8002bac <HAL_RCC_GetSysClockFreq+0x204>)
 8002b96:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002b98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3750      	adds	r7, #80	@ 0x50
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ba6:	bf00      	nop
 8002ba8:	40023800 	.word	0x40023800
 8002bac:	00f42400 	.word	0x00f42400
 8002bb0:	007a1200 	.word	0x007a1200

08002bb4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bb8:	4b03      	ldr	r3, [pc, #12]	@ (8002bc8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002bba:	681b      	ldr	r3, [r3, #0]
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr
 8002bc6:	bf00      	nop
 8002bc8:	20000008 	.word	0x20000008

08002bcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002bd0:	f7ff fff0 	bl	8002bb4 <HAL_RCC_GetHCLKFreq>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	4b05      	ldr	r3, [pc, #20]	@ (8002bec <HAL_RCC_GetPCLK1Freq+0x20>)
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	0a9b      	lsrs	r3, r3, #10
 8002bdc:	f003 0307 	and.w	r3, r3, #7
 8002be0:	4903      	ldr	r1, [pc, #12]	@ (8002bf0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002be2:	5ccb      	ldrb	r3, [r1, r3]
 8002be4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	40023800 	.word	0x40023800
 8002bf0:	08004468 	.word	0x08004468

08002bf4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002bf8:	f7ff ffdc 	bl	8002bb4 <HAL_RCC_GetHCLKFreq>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	4b05      	ldr	r3, [pc, #20]	@ (8002c14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	0b5b      	lsrs	r3, r3, #13
 8002c04:	f003 0307 	and.w	r3, r3, #7
 8002c08:	4903      	ldr	r1, [pc, #12]	@ (8002c18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c0a:	5ccb      	ldrb	r3, [r1, r3]
 8002c0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	40023800 	.word	0x40023800
 8002c18:	08004468 	.word	0x08004468

08002c1c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b088      	sub	sp, #32
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002c24:	2300      	movs	r3, #0
 8002c26:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002c30:	2300      	movs	r3, #0
 8002c32:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002c34:	2300      	movs	r3, #0
 8002c36:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0301 	and.w	r3, r3, #1
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d012      	beq.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002c44:	4b69      	ldr	r3, [pc, #420]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	4a68      	ldr	r2, [pc, #416]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c4a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002c4e:	6093      	str	r3, [r2, #8]
 8002c50:	4b66      	ldr	r3, [pc, #408]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c52:	689a      	ldr	r2, [r3, #8]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c58:	4964      	ldr	r1, [pc, #400]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d101      	bne.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002c66:	2301      	movs	r3, #1
 8002c68:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d017      	beq.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c76:	4b5d      	ldr	r3, [pc, #372]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c7c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c84:	4959      	ldr	r1, [pc, #356]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c86:	4313      	orrs	r3, r2
 8002c88:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c90:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002c94:	d101      	bne.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002c96:	2301      	movs	r3, #1
 8002c98:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d101      	bne.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d017      	beq.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002cb2:	4b4e      	ldr	r3, [pc, #312]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002cb8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cc0:	494a      	ldr	r1, [pc, #296]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ccc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002cd0:	d101      	bne.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d101      	bne.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d001      	beq.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 0320 	and.w	r3, r3, #32
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	f000 808b 	beq.w	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d00:	4b3a      	ldr	r3, [pc, #232]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d04:	4a39      	ldr	r2, [pc, #228]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d0a:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d0c:	4b37      	ldr	r3, [pc, #220]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d14:	60bb      	str	r3, [r7, #8]
 8002d16:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002d18:	4b35      	ldr	r3, [pc, #212]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a34      	ldr	r2, [pc, #208]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002d1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d22:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d24:	f7fe f8b0 	bl	8000e88 <HAL_GetTick>
 8002d28:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002d2a:	e008      	b.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d2c:	f7fe f8ac 	bl	8000e88 <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	2b64      	cmp	r3, #100	@ 0x64
 8002d38:	d901      	bls.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e38f      	b.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002d3e:	4b2c      	ldr	r3, [pc, #176]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d0f0      	beq.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d4a:	4b28      	ldr	r3, [pc, #160]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d52:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d035      	beq.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d62:	693a      	ldr	r2, [r7, #16]
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d02e      	beq.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d68:	4b20      	ldr	r3, [pc, #128]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d6c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d70:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d72:	4b1e      	ldr	r3, [pc, #120]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d76:	4a1d      	ldr	r2, [pc, #116]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d7c:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d7e:	4b1b      	ldr	r3, [pc, #108]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d82:	4a1a      	ldr	r2, [pc, #104]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d84:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d88:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002d8a:	4a18      	ldr	r2, [pc, #96]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002d90:	4b16      	ldr	r3, [pc, #88]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d94:	f003 0301 	and.w	r3, r3, #1
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d114      	bne.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d9c:	f7fe f874 	bl	8000e88 <HAL_GetTick>
 8002da0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002da2:	e00a      	b.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002da4:	f7fe f870 	bl	8000e88 <HAL_GetTick>
 8002da8:	4602      	mov	r2, r0
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d901      	bls.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e351      	b.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dba:	4b0c      	ldr	r3, [pc, #48]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dbe:	f003 0302 	and.w	r3, r3, #2
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d0ee      	beq.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002dce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002dd2:	d111      	bne.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002dd4:	4b05      	ldr	r3, [pc, #20]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002de0:	4b04      	ldr	r3, [pc, #16]	@ (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002de2:	400b      	ands	r3, r1
 8002de4:	4901      	ldr	r1, [pc, #4]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002de6:	4313      	orrs	r3, r2
 8002de8:	608b      	str	r3, [r1, #8]
 8002dea:	e00b      	b.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002dec:	40023800 	.word	0x40023800
 8002df0:	40007000 	.word	0x40007000
 8002df4:	0ffffcff 	.word	0x0ffffcff
 8002df8:	4bac      	ldr	r3, [pc, #688]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	4aab      	ldr	r2, [pc, #684]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dfe:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002e02:	6093      	str	r3, [r2, #8]
 8002e04:	4ba9      	ldr	r3, [pc, #676]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e06:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e10:	49a6      	ldr	r1, [pc, #664]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e12:	4313      	orrs	r3, r2
 8002e14:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0310 	and.w	r3, r3, #16
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d010      	beq.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002e22:	4ba2      	ldr	r3, [pc, #648]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e24:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002e28:	4aa0      	ldr	r2, [pc, #640]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e2a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002e2e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002e32:	4b9e      	ldr	r3, [pc, #632]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e34:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e3c:	499b      	ldr	r1, [pc, #620]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d00a      	beq.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e50:	4b96      	ldr	r3, [pc, #600]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e56:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002e5e:	4993      	ldr	r1, [pc, #588]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e60:	4313      	orrs	r3, r2
 8002e62:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d00a      	beq.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e72:	4b8e      	ldr	r3, [pc, #568]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e78:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002e80:	498a      	ldr	r1, [pc, #552]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e82:	4313      	orrs	r3, r2
 8002e84:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d00a      	beq.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e94:	4b85      	ldr	r3, [pc, #532]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e9a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ea2:	4982      	ldr	r1, [pc, #520]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d00a      	beq.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002eb6:	4b7d      	ldr	r3, [pc, #500]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002eb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ebc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ec4:	4979      	ldr	r1, [pc, #484]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d00a      	beq.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ed8:	4b74      	ldr	r3, [pc, #464]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ede:	f023 0203 	bic.w	r2, r3, #3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ee6:	4971      	ldr	r1, [pc, #452]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d00a      	beq.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002efa:	4b6c      	ldr	r3, [pc, #432]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002efc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f00:	f023 020c 	bic.w	r2, r3, #12
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f08:	4968      	ldr	r1, [pc, #416]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d00a      	beq.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002f1c:	4b63      	ldr	r3, [pc, #396]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f22:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f2a:	4960      	ldr	r1, [pc, #384]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d00a      	beq.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002f3e:	4b5b      	ldr	r3, [pc, #364]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f44:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f4c:	4957      	ldr	r1, [pc, #348]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d00a      	beq.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002f60:	4b52      	ldr	r3, [pc, #328]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f66:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f6e:	494f      	ldr	r1, [pc, #316]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f70:	4313      	orrs	r3, r2
 8002f72:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d00a      	beq.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002f82:	4b4a      	ldr	r3, [pc, #296]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f88:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f90:	4946      	ldr	r1, [pc, #280]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f92:	4313      	orrs	r3, r2
 8002f94:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d00a      	beq.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002fa4:	4b41      	ldr	r3, [pc, #260]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002faa:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fb2:	493e      	ldr	r1, [pc, #248]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d00a      	beq.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002fc6:	4b39      	ldr	r3, [pc, #228]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fcc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fd4:	4935      	ldr	r1, [pc, #212]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d00a      	beq.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002fe8:	4b30      	ldr	r3, [pc, #192]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fee:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002ff6:	492d      	ldr	r1, [pc, #180]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d011      	beq.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800300a:	4b28      	ldr	r3, [pc, #160]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800300c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003010:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003018:	4924      	ldr	r1, [pc, #144]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800301a:	4313      	orrs	r3, r2
 800301c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003024:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003028:	d101      	bne.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800302a:	2301      	movs	r3, #1
 800302c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0308 	and.w	r3, r3, #8
 8003036:	2b00      	cmp	r3, #0
 8003038:	d001      	beq.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800303a:	2301      	movs	r3, #1
 800303c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d00a      	beq.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800304a:	4b18      	ldr	r3, [pc, #96]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800304c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003050:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003058:	4914      	ldr	r1, [pc, #80]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800305a:	4313      	orrs	r3, r2
 800305c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003068:	2b00      	cmp	r3, #0
 800306a:	d00b      	beq.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800306c:	4b0f      	ldr	r3, [pc, #60]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800306e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003072:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800307c:	490b      	ldr	r1, [pc, #44]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800307e:	4313      	orrs	r3, r2
 8003080:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800308c:	2b00      	cmp	r3, #0
 800308e:	d00f      	beq.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003090:	4b06      	ldr	r3, [pc, #24]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003092:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003096:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80030a0:	4902      	ldr	r1, [pc, #8]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030a2:	4313      	orrs	r3, r2
 80030a4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80030a8:	e002      	b.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80030aa:	bf00      	nop
 80030ac:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d00b      	beq.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80030bc:	4b8a      	ldr	r3, [pc, #552]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80030c2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030cc:	4986      	ldr	r1, [pc, #536]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030ce:	4313      	orrs	r3, r2
 80030d0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d00b      	beq.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80030e0:	4b81      	ldr	r3, [pc, #516]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80030e6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80030f0:	497d      	ldr	r1, [pc, #500]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030f2:	4313      	orrs	r3, r2
 80030f4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80030f8:	69fb      	ldr	r3, [r7, #28]
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d006      	beq.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003106:	2b00      	cmp	r3, #0
 8003108:	f000 80d6 	beq.w	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800310c:	4b76      	ldr	r3, [pc, #472]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a75      	ldr	r2, [pc, #468]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003112:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003116:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003118:	f7fd feb6 	bl	8000e88 <HAL_GetTick>
 800311c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800311e:	e008      	b.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003120:	f7fd feb2 	bl	8000e88 <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	2b64      	cmp	r3, #100	@ 0x64
 800312c:	d901      	bls.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e195      	b.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003132:	4b6d      	ldr	r3, [pc, #436]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d1f0      	bne.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0301 	and.w	r3, r3, #1
 8003146:	2b00      	cmp	r3, #0
 8003148:	d021      	beq.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x572>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800314e:	2b00      	cmp	r3, #0
 8003150:	d11d      	bne.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003152:	4b65      	ldr	r3, [pc, #404]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003154:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003158:	0c1b      	lsrs	r3, r3, #16
 800315a:	f003 0303 	and.w	r3, r3, #3
 800315e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003160:	4b61      	ldr	r3, [pc, #388]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003162:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003166:	0e1b      	lsrs	r3, r3, #24
 8003168:	f003 030f 	and.w	r3, r3, #15
 800316c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	019a      	lsls	r2, r3, #6
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	041b      	lsls	r3, r3, #16
 8003178:	431a      	orrs	r2, r3
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	061b      	lsls	r3, r3, #24
 800317e:	431a      	orrs	r2, r3
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	071b      	lsls	r3, r3, #28
 8003186:	4958      	ldr	r1, [pc, #352]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003188:	4313      	orrs	r3, r2
 800318a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d004      	beq.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800319e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80031a2:	d00a      	beq.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d02e      	beq.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031b4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80031b8:	d129      	bne.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80031ba:	4b4b      	ldr	r3, [pc, #300]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80031c0:	0c1b      	lsrs	r3, r3, #16
 80031c2:	f003 0303 	and.w	r3, r3, #3
 80031c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80031c8:	4b47      	ldr	r3, [pc, #284]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80031ce:	0f1b      	lsrs	r3, r3, #28
 80031d0:	f003 0307 	and.w	r3, r3, #7
 80031d4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	019a      	lsls	r2, r3, #6
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	041b      	lsls	r3, r3, #16
 80031e0:	431a      	orrs	r2, r3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	68db      	ldr	r3, [r3, #12]
 80031e6:	061b      	lsls	r3, r3, #24
 80031e8:	431a      	orrs	r2, r3
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	071b      	lsls	r3, r3, #28
 80031ee:	493e      	ldr	r1, [pc, #248]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031f0:	4313      	orrs	r3, r2
 80031f2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80031f6:	4b3c      	ldr	r3, [pc, #240]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80031fc:	f023 021f 	bic.w	r2, r3, #31
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003204:	3b01      	subs	r3, #1
 8003206:	4938      	ldr	r1, [pc, #224]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003208:	4313      	orrs	r3, r2
 800320a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d01d      	beq.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800321a:	4b33      	ldr	r3, [pc, #204]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800321c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003220:	0e1b      	lsrs	r3, r3, #24
 8003222:	f003 030f 	and.w	r3, r3, #15
 8003226:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003228:	4b2f      	ldr	r3, [pc, #188]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800322a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800322e:	0f1b      	lsrs	r3, r3, #28
 8003230:	f003 0307 	and.w	r3, r3, #7
 8003234:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	019a      	lsls	r2, r3, #6
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	691b      	ldr	r3, [r3, #16]
 8003240:	041b      	lsls	r3, r3, #16
 8003242:	431a      	orrs	r2, r3
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	061b      	lsls	r3, r3, #24
 8003248:	431a      	orrs	r2, r3
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	071b      	lsls	r3, r3, #28
 800324e:	4926      	ldr	r1, [pc, #152]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003250:	4313      	orrs	r3, r2
 8003252:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d011      	beq.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	019a      	lsls	r2, r3, #6
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	691b      	ldr	r3, [r3, #16]
 800326c:	041b      	lsls	r3, r3, #16
 800326e:	431a      	orrs	r2, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	061b      	lsls	r3, r3, #24
 8003276:	431a      	orrs	r2, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	071b      	lsls	r3, r3, #28
 800327e:	491a      	ldr	r1, [pc, #104]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003280:	4313      	orrs	r3, r2
 8003282:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003286:	4b18      	ldr	r3, [pc, #96]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a17      	ldr	r2, [pc, #92]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800328c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003290:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003292:	f7fd fdf9 	bl	8000e88 <HAL_GetTick>
 8003296:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003298:	e008      	b.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800329a:	f7fd fdf5 	bl	8000e88 <HAL_GetTick>
 800329e:	4602      	mov	r2, r0
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	1ad3      	subs	r3, r2, r3
 80032a4:	2b64      	cmp	r3, #100	@ 0x64
 80032a6:	d901      	bls.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80032a8:	2303      	movs	r3, #3
 80032aa:	e0d8      	b.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80032ac:	4b0e      	ldr	r3, [pc, #56]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d0f0      	beq.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80032b8:	69bb      	ldr	r3, [r7, #24]
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	f040 80ce 	bne.w	800345c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80032c0:	4b09      	ldr	r3, [pc, #36]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a08      	ldr	r2, [pc, #32]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80032ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032cc:	f7fd fddc 	bl	8000e88 <HAL_GetTick>
 80032d0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80032d2:	e00b      	b.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80032d4:	f7fd fdd8 	bl	8000e88 <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	2b64      	cmp	r3, #100	@ 0x64
 80032e0:	d904      	bls.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e0bb      	b.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x842>
 80032e6:	bf00      	nop
 80032e8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80032ec:	4b5e      	ldr	r3, [pc, #376]	@ (8003468 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80032f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80032f8:	d0ec      	beq.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d003      	beq.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800330a:	2b00      	cmp	r3, #0
 800330c:	d009      	beq.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003316:	2b00      	cmp	r3, #0
 8003318:	d02e      	beq.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800331e:	2b00      	cmp	r3, #0
 8003320:	d12a      	bne.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003322:	4b51      	ldr	r3, [pc, #324]	@ (8003468 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003324:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003328:	0c1b      	lsrs	r3, r3, #16
 800332a:	f003 0303 	and.w	r3, r3, #3
 800332e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003330:	4b4d      	ldr	r3, [pc, #308]	@ (8003468 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003332:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003336:	0f1b      	lsrs	r3, r3, #28
 8003338:	f003 0307 	and.w	r3, r3, #7
 800333c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	695b      	ldr	r3, [r3, #20]
 8003342:	019a      	lsls	r2, r3, #6
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	041b      	lsls	r3, r3, #16
 8003348:	431a      	orrs	r2, r3
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	699b      	ldr	r3, [r3, #24]
 800334e:	061b      	lsls	r3, r3, #24
 8003350:	431a      	orrs	r2, r3
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	071b      	lsls	r3, r3, #28
 8003356:	4944      	ldr	r1, [pc, #272]	@ (8003468 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003358:	4313      	orrs	r3, r2
 800335a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800335e:	4b42      	ldr	r3, [pc, #264]	@ (8003468 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003360:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003364:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800336c:	3b01      	subs	r3, #1
 800336e:	021b      	lsls	r3, r3, #8
 8003370:	493d      	ldr	r1, [pc, #244]	@ (8003468 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003372:	4313      	orrs	r3, r2
 8003374:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d022      	beq.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003388:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800338c:	d11d      	bne.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800338e:	4b36      	ldr	r3, [pc, #216]	@ (8003468 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003390:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003394:	0e1b      	lsrs	r3, r3, #24
 8003396:	f003 030f 	and.w	r3, r3, #15
 800339a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800339c:	4b32      	ldr	r3, [pc, #200]	@ (8003468 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800339e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033a2:	0f1b      	lsrs	r3, r3, #28
 80033a4:	f003 0307 	and.w	r3, r3, #7
 80033a8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	695b      	ldr	r3, [r3, #20]
 80033ae:	019a      	lsls	r2, r3, #6
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6a1b      	ldr	r3, [r3, #32]
 80033b4:	041b      	lsls	r3, r3, #16
 80033b6:	431a      	orrs	r2, r3
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	061b      	lsls	r3, r3, #24
 80033bc:	431a      	orrs	r2, r3
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	071b      	lsls	r3, r3, #28
 80033c2:	4929      	ldr	r1, [pc, #164]	@ (8003468 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033c4:	4313      	orrs	r3, r2
 80033c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0308 	and.w	r3, r3, #8
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d028      	beq.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80033d6:	4b24      	ldr	r3, [pc, #144]	@ (8003468 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033dc:	0e1b      	lsrs	r3, r3, #24
 80033de:	f003 030f 	and.w	r3, r3, #15
 80033e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80033e4:	4b20      	ldr	r3, [pc, #128]	@ (8003468 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033ea:	0c1b      	lsrs	r3, r3, #16
 80033ec:	f003 0303 	and.w	r3, r3, #3
 80033f0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	695b      	ldr	r3, [r3, #20]
 80033f6:	019a      	lsls	r2, r3, #6
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	041b      	lsls	r3, r3, #16
 80033fc:	431a      	orrs	r2, r3
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	061b      	lsls	r3, r3, #24
 8003402:	431a      	orrs	r2, r3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	69db      	ldr	r3, [r3, #28]
 8003408:	071b      	lsls	r3, r3, #28
 800340a:	4917      	ldr	r1, [pc, #92]	@ (8003468 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800340c:	4313      	orrs	r3, r2
 800340e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003412:	4b15      	ldr	r3, [pc, #84]	@ (8003468 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003414:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003418:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003420:	4911      	ldr	r1, [pc, #68]	@ (8003468 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003422:	4313      	orrs	r3, r2
 8003424:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003428:	4b0f      	ldr	r3, [pc, #60]	@ (8003468 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a0e      	ldr	r2, [pc, #56]	@ (8003468 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800342e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003432:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003434:	f7fd fd28 	bl	8000e88 <HAL_GetTick>
 8003438:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800343a:	e008      	b.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800343c:	f7fd fd24 	bl	8000e88 <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	2b64      	cmp	r3, #100	@ 0x64
 8003448:	d901      	bls.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e007      	b.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800344e:	4b06      	ldr	r3, [pc, #24]	@ (8003468 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003456:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800345a:	d1ef      	bne.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800345c:	2300      	movs	r3, #0
}
 800345e:	4618      	mov	r0, r3
 8003460:	3720      	adds	r7, #32
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	40023800 	.word	0x40023800

0800346c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b082      	sub	sp, #8
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d101      	bne.n	800347e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e040      	b.n	8003500 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003482:	2b00      	cmp	r3, #0
 8003484:	d106      	bne.n	8003494 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f7fd fb32 	bl	8000af8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2224      	movs	r2, #36	@ 0x24
 8003498:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f022 0201 	bic.w	r2, r2, #1
 80034a8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d002      	beq.n	80034b8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f000 fa8c 	bl	80039d0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	f000 f825 	bl	8003508 <UART_SetConfig>
 80034be:	4603      	mov	r3, r0
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d101      	bne.n	80034c8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e01b      	b.n	8003500 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	685a      	ldr	r2, [r3, #4]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80034d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	689a      	ldr	r2, [r3, #8]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80034e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f042 0201 	orr.w	r2, r2, #1
 80034f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f000 fb0b 	bl	8003b14 <UART_CheckIdleState>
 80034fe:	4603      	mov	r3, r0
}
 8003500:	4618      	mov	r0, r3
 8003502:	3708      	adds	r7, #8
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}

08003508 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b088      	sub	sp, #32
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003510:	2300      	movs	r3, #0
 8003512:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	689a      	ldr	r2, [r3, #8]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	691b      	ldr	r3, [r3, #16]
 800351c:	431a      	orrs	r2, r3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	695b      	ldr	r3, [r3, #20]
 8003522:	431a      	orrs	r2, r3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	69db      	ldr	r3, [r3, #28]
 8003528:	4313      	orrs	r3, r2
 800352a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	4ba6      	ldr	r3, [pc, #664]	@ (80037cc <UART_SetConfig+0x2c4>)
 8003534:	4013      	ands	r3, r2
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	6812      	ldr	r2, [r2, #0]
 800353a:	6979      	ldr	r1, [r7, #20]
 800353c:	430b      	orrs	r3, r1
 800353e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	68da      	ldr	r2, [r3, #12]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	430a      	orrs	r2, r1
 8003554:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	699b      	ldr	r3, [r3, #24]
 800355a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6a1b      	ldr	r3, [r3, #32]
 8003560:	697a      	ldr	r2, [r7, #20]
 8003562:	4313      	orrs	r3, r2
 8003564:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	697a      	ldr	r2, [r7, #20]
 8003576:	430a      	orrs	r2, r1
 8003578:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a94      	ldr	r2, [pc, #592]	@ (80037d0 <UART_SetConfig+0x2c8>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d120      	bne.n	80035c6 <UART_SetConfig+0xbe>
 8003584:	4b93      	ldr	r3, [pc, #588]	@ (80037d4 <UART_SetConfig+0x2cc>)
 8003586:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800358a:	f003 0303 	and.w	r3, r3, #3
 800358e:	2b03      	cmp	r3, #3
 8003590:	d816      	bhi.n	80035c0 <UART_SetConfig+0xb8>
 8003592:	a201      	add	r2, pc, #4	@ (adr r2, 8003598 <UART_SetConfig+0x90>)
 8003594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003598:	080035a9 	.word	0x080035a9
 800359c:	080035b5 	.word	0x080035b5
 80035a0:	080035af 	.word	0x080035af
 80035a4:	080035bb 	.word	0x080035bb
 80035a8:	2301      	movs	r3, #1
 80035aa:	77fb      	strb	r3, [r7, #31]
 80035ac:	e150      	b.n	8003850 <UART_SetConfig+0x348>
 80035ae:	2302      	movs	r3, #2
 80035b0:	77fb      	strb	r3, [r7, #31]
 80035b2:	e14d      	b.n	8003850 <UART_SetConfig+0x348>
 80035b4:	2304      	movs	r3, #4
 80035b6:	77fb      	strb	r3, [r7, #31]
 80035b8:	e14a      	b.n	8003850 <UART_SetConfig+0x348>
 80035ba:	2308      	movs	r3, #8
 80035bc:	77fb      	strb	r3, [r7, #31]
 80035be:	e147      	b.n	8003850 <UART_SetConfig+0x348>
 80035c0:	2310      	movs	r3, #16
 80035c2:	77fb      	strb	r3, [r7, #31]
 80035c4:	e144      	b.n	8003850 <UART_SetConfig+0x348>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a83      	ldr	r2, [pc, #524]	@ (80037d8 <UART_SetConfig+0x2d0>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d132      	bne.n	8003636 <UART_SetConfig+0x12e>
 80035d0:	4b80      	ldr	r3, [pc, #512]	@ (80037d4 <UART_SetConfig+0x2cc>)
 80035d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035d6:	f003 030c 	and.w	r3, r3, #12
 80035da:	2b0c      	cmp	r3, #12
 80035dc:	d828      	bhi.n	8003630 <UART_SetConfig+0x128>
 80035de:	a201      	add	r2, pc, #4	@ (adr r2, 80035e4 <UART_SetConfig+0xdc>)
 80035e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035e4:	08003619 	.word	0x08003619
 80035e8:	08003631 	.word	0x08003631
 80035ec:	08003631 	.word	0x08003631
 80035f0:	08003631 	.word	0x08003631
 80035f4:	08003625 	.word	0x08003625
 80035f8:	08003631 	.word	0x08003631
 80035fc:	08003631 	.word	0x08003631
 8003600:	08003631 	.word	0x08003631
 8003604:	0800361f 	.word	0x0800361f
 8003608:	08003631 	.word	0x08003631
 800360c:	08003631 	.word	0x08003631
 8003610:	08003631 	.word	0x08003631
 8003614:	0800362b 	.word	0x0800362b
 8003618:	2300      	movs	r3, #0
 800361a:	77fb      	strb	r3, [r7, #31]
 800361c:	e118      	b.n	8003850 <UART_SetConfig+0x348>
 800361e:	2302      	movs	r3, #2
 8003620:	77fb      	strb	r3, [r7, #31]
 8003622:	e115      	b.n	8003850 <UART_SetConfig+0x348>
 8003624:	2304      	movs	r3, #4
 8003626:	77fb      	strb	r3, [r7, #31]
 8003628:	e112      	b.n	8003850 <UART_SetConfig+0x348>
 800362a:	2308      	movs	r3, #8
 800362c:	77fb      	strb	r3, [r7, #31]
 800362e:	e10f      	b.n	8003850 <UART_SetConfig+0x348>
 8003630:	2310      	movs	r3, #16
 8003632:	77fb      	strb	r3, [r7, #31]
 8003634:	e10c      	b.n	8003850 <UART_SetConfig+0x348>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a68      	ldr	r2, [pc, #416]	@ (80037dc <UART_SetConfig+0x2d4>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d120      	bne.n	8003682 <UART_SetConfig+0x17a>
 8003640:	4b64      	ldr	r3, [pc, #400]	@ (80037d4 <UART_SetConfig+0x2cc>)
 8003642:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003646:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800364a:	2b30      	cmp	r3, #48	@ 0x30
 800364c:	d013      	beq.n	8003676 <UART_SetConfig+0x16e>
 800364e:	2b30      	cmp	r3, #48	@ 0x30
 8003650:	d814      	bhi.n	800367c <UART_SetConfig+0x174>
 8003652:	2b20      	cmp	r3, #32
 8003654:	d009      	beq.n	800366a <UART_SetConfig+0x162>
 8003656:	2b20      	cmp	r3, #32
 8003658:	d810      	bhi.n	800367c <UART_SetConfig+0x174>
 800365a:	2b00      	cmp	r3, #0
 800365c:	d002      	beq.n	8003664 <UART_SetConfig+0x15c>
 800365e:	2b10      	cmp	r3, #16
 8003660:	d006      	beq.n	8003670 <UART_SetConfig+0x168>
 8003662:	e00b      	b.n	800367c <UART_SetConfig+0x174>
 8003664:	2300      	movs	r3, #0
 8003666:	77fb      	strb	r3, [r7, #31]
 8003668:	e0f2      	b.n	8003850 <UART_SetConfig+0x348>
 800366a:	2302      	movs	r3, #2
 800366c:	77fb      	strb	r3, [r7, #31]
 800366e:	e0ef      	b.n	8003850 <UART_SetConfig+0x348>
 8003670:	2304      	movs	r3, #4
 8003672:	77fb      	strb	r3, [r7, #31]
 8003674:	e0ec      	b.n	8003850 <UART_SetConfig+0x348>
 8003676:	2308      	movs	r3, #8
 8003678:	77fb      	strb	r3, [r7, #31]
 800367a:	e0e9      	b.n	8003850 <UART_SetConfig+0x348>
 800367c:	2310      	movs	r3, #16
 800367e:	77fb      	strb	r3, [r7, #31]
 8003680:	e0e6      	b.n	8003850 <UART_SetConfig+0x348>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a56      	ldr	r2, [pc, #344]	@ (80037e0 <UART_SetConfig+0x2d8>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d120      	bne.n	80036ce <UART_SetConfig+0x1c6>
 800368c:	4b51      	ldr	r3, [pc, #324]	@ (80037d4 <UART_SetConfig+0x2cc>)
 800368e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003692:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003696:	2bc0      	cmp	r3, #192	@ 0xc0
 8003698:	d013      	beq.n	80036c2 <UART_SetConfig+0x1ba>
 800369a:	2bc0      	cmp	r3, #192	@ 0xc0
 800369c:	d814      	bhi.n	80036c8 <UART_SetConfig+0x1c0>
 800369e:	2b80      	cmp	r3, #128	@ 0x80
 80036a0:	d009      	beq.n	80036b6 <UART_SetConfig+0x1ae>
 80036a2:	2b80      	cmp	r3, #128	@ 0x80
 80036a4:	d810      	bhi.n	80036c8 <UART_SetConfig+0x1c0>
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d002      	beq.n	80036b0 <UART_SetConfig+0x1a8>
 80036aa:	2b40      	cmp	r3, #64	@ 0x40
 80036ac:	d006      	beq.n	80036bc <UART_SetConfig+0x1b4>
 80036ae:	e00b      	b.n	80036c8 <UART_SetConfig+0x1c0>
 80036b0:	2300      	movs	r3, #0
 80036b2:	77fb      	strb	r3, [r7, #31]
 80036b4:	e0cc      	b.n	8003850 <UART_SetConfig+0x348>
 80036b6:	2302      	movs	r3, #2
 80036b8:	77fb      	strb	r3, [r7, #31]
 80036ba:	e0c9      	b.n	8003850 <UART_SetConfig+0x348>
 80036bc:	2304      	movs	r3, #4
 80036be:	77fb      	strb	r3, [r7, #31]
 80036c0:	e0c6      	b.n	8003850 <UART_SetConfig+0x348>
 80036c2:	2308      	movs	r3, #8
 80036c4:	77fb      	strb	r3, [r7, #31]
 80036c6:	e0c3      	b.n	8003850 <UART_SetConfig+0x348>
 80036c8:	2310      	movs	r3, #16
 80036ca:	77fb      	strb	r3, [r7, #31]
 80036cc:	e0c0      	b.n	8003850 <UART_SetConfig+0x348>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a44      	ldr	r2, [pc, #272]	@ (80037e4 <UART_SetConfig+0x2dc>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d125      	bne.n	8003724 <UART_SetConfig+0x21c>
 80036d8:	4b3e      	ldr	r3, [pc, #248]	@ (80037d4 <UART_SetConfig+0x2cc>)
 80036da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80036e6:	d017      	beq.n	8003718 <UART_SetConfig+0x210>
 80036e8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80036ec:	d817      	bhi.n	800371e <UART_SetConfig+0x216>
 80036ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80036f2:	d00b      	beq.n	800370c <UART_SetConfig+0x204>
 80036f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80036f8:	d811      	bhi.n	800371e <UART_SetConfig+0x216>
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d003      	beq.n	8003706 <UART_SetConfig+0x1fe>
 80036fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003702:	d006      	beq.n	8003712 <UART_SetConfig+0x20a>
 8003704:	e00b      	b.n	800371e <UART_SetConfig+0x216>
 8003706:	2300      	movs	r3, #0
 8003708:	77fb      	strb	r3, [r7, #31]
 800370a:	e0a1      	b.n	8003850 <UART_SetConfig+0x348>
 800370c:	2302      	movs	r3, #2
 800370e:	77fb      	strb	r3, [r7, #31]
 8003710:	e09e      	b.n	8003850 <UART_SetConfig+0x348>
 8003712:	2304      	movs	r3, #4
 8003714:	77fb      	strb	r3, [r7, #31]
 8003716:	e09b      	b.n	8003850 <UART_SetConfig+0x348>
 8003718:	2308      	movs	r3, #8
 800371a:	77fb      	strb	r3, [r7, #31]
 800371c:	e098      	b.n	8003850 <UART_SetConfig+0x348>
 800371e:	2310      	movs	r3, #16
 8003720:	77fb      	strb	r3, [r7, #31]
 8003722:	e095      	b.n	8003850 <UART_SetConfig+0x348>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a2f      	ldr	r2, [pc, #188]	@ (80037e8 <UART_SetConfig+0x2e0>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d125      	bne.n	800377a <UART_SetConfig+0x272>
 800372e:	4b29      	ldr	r3, [pc, #164]	@ (80037d4 <UART_SetConfig+0x2cc>)
 8003730:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003734:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003738:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800373c:	d017      	beq.n	800376e <UART_SetConfig+0x266>
 800373e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003742:	d817      	bhi.n	8003774 <UART_SetConfig+0x26c>
 8003744:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003748:	d00b      	beq.n	8003762 <UART_SetConfig+0x25a>
 800374a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800374e:	d811      	bhi.n	8003774 <UART_SetConfig+0x26c>
 8003750:	2b00      	cmp	r3, #0
 8003752:	d003      	beq.n	800375c <UART_SetConfig+0x254>
 8003754:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003758:	d006      	beq.n	8003768 <UART_SetConfig+0x260>
 800375a:	e00b      	b.n	8003774 <UART_SetConfig+0x26c>
 800375c:	2301      	movs	r3, #1
 800375e:	77fb      	strb	r3, [r7, #31]
 8003760:	e076      	b.n	8003850 <UART_SetConfig+0x348>
 8003762:	2302      	movs	r3, #2
 8003764:	77fb      	strb	r3, [r7, #31]
 8003766:	e073      	b.n	8003850 <UART_SetConfig+0x348>
 8003768:	2304      	movs	r3, #4
 800376a:	77fb      	strb	r3, [r7, #31]
 800376c:	e070      	b.n	8003850 <UART_SetConfig+0x348>
 800376e:	2308      	movs	r3, #8
 8003770:	77fb      	strb	r3, [r7, #31]
 8003772:	e06d      	b.n	8003850 <UART_SetConfig+0x348>
 8003774:	2310      	movs	r3, #16
 8003776:	77fb      	strb	r3, [r7, #31]
 8003778:	e06a      	b.n	8003850 <UART_SetConfig+0x348>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a1b      	ldr	r2, [pc, #108]	@ (80037ec <UART_SetConfig+0x2e4>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d138      	bne.n	80037f6 <UART_SetConfig+0x2ee>
 8003784:	4b13      	ldr	r3, [pc, #76]	@ (80037d4 <UART_SetConfig+0x2cc>)
 8003786:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800378a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800378e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003792:	d017      	beq.n	80037c4 <UART_SetConfig+0x2bc>
 8003794:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003798:	d82a      	bhi.n	80037f0 <UART_SetConfig+0x2e8>
 800379a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800379e:	d00b      	beq.n	80037b8 <UART_SetConfig+0x2b0>
 80037a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037a4:	d824      	bhi.n	80037f0 <UART_SetConfig+0x2e8>
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d003      	beq.n	80037b2 <UART_SetConfig+0x2aa>
 80037aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037ae:	d006      	beq.n	80037be <UART_SetConfig+0x2b6>
 80037b0:	e01e      	b.n	80037f0 <UART_SetConfig+0x2e8>
 80037b2:	2300      	movs	r3, #0
 80037b4:	77fb      	strb	r3, [r7, #31]
 80037b6:	e04b      	b.n	8003850 <UART_SetConfig+0x348>
 80037b8:	2302      	movs	r3, #2
 80037ba:	77fb      	strb	r3, [r7, #31]
 80037bc:	e048      	b.n	8003850 <UART_SetConfig+0x348>
 80037be:	2304      	movs	r3, #4
 80037c0:	77fb      	strb	r3, [r7, #31]
 80037c2:	e045      	b.n	8003850 <UART_SetConfig+0x348>
 80037c4:	2308      	movs	r3, #8
 80037c6:	77fb      	strb	r3, [r7, #31]
 80037c8:	e042      	b.n	8003850 <UART_SetConfig+0x348>
 80037ca:	bf00      	nop
 80037cc:	efff69f3 	.word	0xefff69f3
 80037d0:	40011000 	.word	0x40011000
 80037d4:	40023800 	.word	0x40023800
 80037d8:	40004400 	.word	0x40004400
 80037dc:	40004800 	.word	0x40004800
 80037e0:	40004c00 	.word	0x40004c00
 80037e4:	40005000 	.word	0x40005000
 80037e8:	40011400 	.word	0x40011400
 80037ec:	40007800 	.word	0x40007800
 80037f0:	2310      	movs	r3, #16
 80037f2:	77fb      	strb	r3, [r7, #31]
 80037f4:	e02c      	b.n	8003850 <UART_SetConfig+0x348>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a72      	ldr	r2, [pc, #456]	@ (80039c4 <UART_SetConfig+0x4bc>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d125      	bne.n	800384c <UART_SetConfig+0x344>
 8003800:	4b71      	ldr	r3, [pc, #452]	@ (80039c8 <UART_SetConfig+0x4c0>)
 8003802:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003806:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800380a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800380e:	d017      	beq.n	8003840 <UART_SetConfig+0x338>
 8003810:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003814:	d817      	bhi.n	8003846 <UART_SetConfig+0x33e>
 8003816:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800381a:	d00b      	beq.n	8003834 <UART_SetConfig+0x32c>
 800381c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003820:	d811      	bhi.n	8003846 <UART_SetConfig+0x33e>
 8003822:	2b00      	cmp	r3, #0
 8003824:	d003      	beq.n	800382e <UART_SetConfig+0x326>
 8003826:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800382a:	d006      	beq.n	800383a <UART_SetConfig+0x332>
 800382c:	e00b      	b.n	8003846 <UART_SetConfig+0x33e>
 800382e:	2300      	movs	r3, #0
 8003830:	77fb      	strb	r3, [r7, #31]
 8003832:	e00d      	b.n	8003850 <UART_SetConfig+0x348>
 8003834:	2302      	movs	r3, #2
 8003836:	77fb      	strb	r3, [r7, #31]
 8003838:	e00a      	b.n	8003850 <UART_SetConfig+0x348>
 800383a:	2304      	movs	r3, #4
 800383c:	77fb      	strb	r3, [r7, #31]
 800383e:	e007      	b.n	8003850 <UART_SetConfig+0x348>
 8003840:	2308      	movs	r3, #8
 8003842:	77fb      	strb	r3, [r7, #31]
 8003844:	e004      	b.n	8003850 <UART_SetConfig+0x348>
 8003846:	2310      	movs	r3, #16
 8003848:	77fb      	strb	r3, [r7, #31]
 800384a:	e001      	b.n	8003850 <UART_SetConfig+0x348>
 800384c:	2310      	movs	r3, #16
 800384e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	69db      	ldr	r3, [r3, #28]
 8003854:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003858:	d15b      	bne.n	8003912 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800385a:	7ffb      	ldrb	r3, [r7, #31]
 800385c:	2b08      	cmp	r3, #8
 800385e:	d828      	bhi.n	80038b2 <UART_SetConfig+0x3aa>
 8003860:	a201      	add	r2, pc, #4	@ (adr r2, 8003868 <UART_SetConfig+0x360>)
 8003862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003866:	bf00      	nop
 8003868:	0800388d 	.word	0x0800388d
 800386c:	08003895 	.word	0x08003895
 8003870:	0800389d 	.word	0x0800389d
 8003874:	080038b3 	.word	0x080038b3
 8003878:	080038a3 	.word	0x080038a3
 800387c:	080038b3 	.word	0x080038b3
 8003880:	080038b3 	.word	0x080038b3
 8003884:	080038b3 	.word	0x080038b3
 8003888:	080038ab 	.word	0x080038ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800388c:	f7ff f99e 	bl	8002bcc <HAL_RCC_GetPCLK1Freq>
 8003890:	61b8      	str	r0, [r7, #24]
        break;
 8003892:	e013      	b.n	80038bc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003894:	f7ff f9ae 	bl	8002bf4 <HAL_RCC_GetPCLK2Freq>
 8003898:	61b8      	str	r0, [r7, #24]
        break;
 800389a:	e00f      	b.n	80038bc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800389c:	4b4b      	ldr	r3, [pc, #300]	@ (80039cc <UART_SetConfig+0x4c4>)
 800389e:	61bb      	str	r3, [r7, #24]
        break;
 80038a0:	e00c      	b.n	80038bc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038a2:	f7ff f881 	bl	80029a8 <HAL_RCC_GetSysClockFreq>
 80038a6:	61b8      	str	r0, [r7, #24]
        break;
 80038a8:	e008      	b.n	80038bc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80038ae:	61bb      	str	r3, [r7, #24]
        break;
 80038b0:	e004      	b.n	80038bc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80038b2:	2300      	movs	r3, #0
 80038b4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	77bb      	strb	r3, [r7, #30]
        break;
 80038ba:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80038bc:	69bb      	ldr	r3, [r7, #24]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d074      	beq.n	80039ac <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80038c2:	69bb      	ldr	r3, [r7, #24]
 80038c4:	005a      	lsls	r2, r3, #1
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	085b      	lsrs	r3, r3, #1
 80038cc:	441a      	add	r2, r3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80038d6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	2b0f      	cmp	r3, #15
 80038dc:	d916      	bls.n	800390c <UART_SetConfig+0x404>
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038e4:	d212      	bcs.n	800390c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	b29b      	uxth	r3, r3
 80038ea:	f023 030f 	bic.w	r3, r3, #15
 80038ee:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	085b      	lsrs	r3, r3, #1
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	f003 0307 	and.w	r3, r3, #7
 80038fa:	b29a      	uxth	r2, r3
 80038fc:	89fb      	ldrh	r3, [r7, #14]
 80038fe:	4313      	orrs	r3, r2
 8003900:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	89fa      	ldrh	r2, [r7, #14]
 8003908:	60da      	str	r2, [r3, #12]
 800390a:	e04f      	b.n	80039ac <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	77bb      	strb	r3, [r7, #30]
 8003910:	e04c      	b.n	80039ac <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003912:	7ffb      	ldrb	r3, [r7, #31]
 8003914:	2b08      	cmp	r3, #8
 8003916:	d828      	bhi.n	800396a <UART_SetConfig+0x462>
 8003918:	a201      	add	r2, pc, #4	@ (adr r2, 8003920 <UART_SetConfig+0x418>)
 800391a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800391e:	bf00      	nop
 8003920:	08003945 	.word	0x08003945
 8003924:	0800394d 	.word	0x0800394d
 8003928:	08003955 	.word	0x08003955
 800392c:	0800396b 	.word	0x0800396b
 8003930:	0800395b 	.word	0x0800395b
 8003934:	0800396b 	.word	0x0800396b
 8003938:	0800396b 	.word	0x0800396b
 800393c:	0800396b 	.word	0x0800396b
 8003940:	08003963 	.word	0x08003963
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003944:	f7ff f942 	bl	8002bcc <HAL_RCC_GetPCLK1Freq>
 8003948:	61b8      	str	r0, [r7, #24]
        break;
 800394a:	e013      	b.n	8003974 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800394c:	f7ff f952 	bl	8002bf4 <HAL_RCC_GetPCLK2Freq>
 8003950:	61b8      	str	r0, [r7, #24]
        break;
 8003952:	e00f      	b.n	8003974 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003954:	4b1d      	ldr	r3, [pc, #116]	@ (80039cc <UART_SetConfig+0x4c4>)
 8003956:	61bb      	str	r3, [r7, #24]
        break;
 8003958:	e00c      	b.n	8003974 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800395a:	f7ff f825 	bl	80029a8 <HAL_RCC_GetSysClockFreq>
 800395e:	61b8      	str	r0, [r7, #24]
        break;
 8003960:	e008      	b.n	8003974 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003962:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003966:	61bb      	str	r3, [r7, #24]
        break;
 8003968:	e004      	b.n	8003974 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800396a:	2300      	movs	r3, #0
 800396c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	77bb      	strb	r3, [r7, #30]
        break;
 8003972:	bf00      	nop
    }

    if (pclk != 0U)
 8003974:	69bb      	ldr	r3, [r7, #24]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d018      	beq.n	80039ac <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	085a      	lsrs	r2, r3, #1
 8003980:	69bb      	ldr	r3, [r7, #24]
 8003982:	441a      	add	r2, r3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	fbb2 f3f3 	udiv	r3, r2, r3
 800398c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	2b0f      	cmp	r3, #15
 8003992:	d909      	bls.n	80039a8 <UART_SetConfig+0x4a0>
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800399a:	d205      	bcs.n	80039a8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	b29a      	uxth	r2, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	60da      	str	r2, [r3, #12]
 80039a6:	e001      	b.n	80039ac <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2200      	movs	r2, #0
 80039b6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80039b8:	7fbb      	ldrb	r3, [r7, #30]
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3720      	adds	r7, #32
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	40007c00 	.word	0x40007c00
 80039c8:	40023800 	.word	0x40023800
 80039cc:	00f42400 	.word	0x00f42400

080039d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b083      	sub	sp, #12
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039dc:	f003 0308 	and.w	r3, r3, #8
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d00a      	beq.n	80039fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	430a      	orrs	r2, r1
 80039f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039fe:	f003 0301 	and.w	r3, r3, #1
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d00a      	beq.n	8003a1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	430a      	orrs	r2, r1
 8003a1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a20:	f003 0302 	and.w	r3, r3, #2
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d00a      	beq.n	8003a3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	430a      	orrs	r2, r1
 8003a3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a42:	f003 0304 	and.w	r3, r3, #4
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d00a      	beq.n	8003a60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	430a      	orrs	r2, r1
 8003a5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a64:	f003 0310 	and.w	r3, r3, #16
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d00a      	beq.n	8003a82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	430a      	orrs	r2, r1
 8003a80:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a86:	f003 0320 	and.w	r3, r3, #32
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d00a      	beq.n	8003aa4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	430a      	orrs	r2, r1
 8003aa2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aa8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d01a      	beq.n	8003ae6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	430a      	orrs	r2, r1
 8003ac4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ace:	d10a      	bne.n	8003ae6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	430a      	orrs	r2, r1
 8003ae4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d00a      	beq.n	8003b08 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	430a      	orrs	r2, r1
 8003b06:	605a      	str	r2, [r3, #4]
  }
}
 8003b08:	bf00      	nop
 8003b0a:	370c      	adds	r7, #12
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr

08003b14 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b098      	sub	sp, #96	@ 0x60
 8003b18:	af02      	add	r7, sp, #8
 8003b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003b24:	f7fd f9b0 	bl	8000e88 <HAL_GetTick>
 8003b28:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 0308 	and.w	r3, r3, #8
 8003b34:	2b08      	cmp	r3, #8
 8003b36:	d12e      	bne.n	8003b96 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b38:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003b3c:	9300      	str	r3, [sp, #0]
 8003b3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b40:	2200      	movs	r2, #0
 8003b42:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f000 f88c 	bl	8003c64 <UART_WaitOnFlagUntilTimeout>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d021      	beq.n	8003b96 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b5a:	e853 3f00 	ldrex	r3, [r3]
 8003b5e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003b60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b62:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b66:	653b      	str	r3, [r7, #80]	@ 0x50
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b70:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b72:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b74:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003b76:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003b78:	e841 2300 	strex	r3, r2, [r1]
 8003b7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003b7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d1e6      	bne.n	8003b52 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2220      	movs	r2, #32
 8003b88:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e062      	b.n	8003c5c <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 0304 	and.w	r3, r3, #4
 8003ba0:	2b04      	cmp	r3, #4
 8003ba2:	d149      	bne.n	8003c38 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ba4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003ba8:	9300      	str	r3, [sp, #0]
 8003baa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bac:	2200      	movs	r2, #0
 8003bae:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f000 f856 	bl	8003c64 <UART_WaitOnFlagUntilTimeout>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d03c      	beq.n	8003c38 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bc6:	e853 3f00 	ldrex	r3, [r3]
 8003bca:	623b      	str	r3, [r7, #32]
   return(result);
 8003bcc:	6a3b      	ldr	r3, [r7, #32]
 8003bce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003bd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	461a      	mov	r2, r3
 8003bda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003bdc:	633b      	str	r3, [r7, #48]	@ 0x30
 8003bde:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003be0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003be2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003be4:	e841 2300 	strex	r3, r2, [r1]
 8003be8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003bea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d1e6      	bne.n	8003bbe <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	3308      	adds	r3, #8
 8003bf6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	e853 3f00 	ldrex	r3, [r3]
 8003bfe:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f023 0301 	bic.w	r3, r3, #1
 8003c06:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	3308      	adds	r3, #8
 8003c0e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003c10:	61fa      	str	r2, [r7, #28]
 8003c12:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c14:	69b9      	ldr	r1, [r7, #24]
 8003c16:	69fa      	ldr	r2, [r7, #28]
 8003c18:	e841 2300 	strex	r3, r2, [r1]
 8003c1c:	617b      	str	r3, [r7, #20]
   return(result);
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d1e5      	bne.n	8003bf0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2220      	movs	r2, #32
 8003c28:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c34:	2303      	movs	r3, #3
 8003c36:	e011      	b.n	8003c5c <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2220      	movs	r2, #32
 8003c3c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2220      	movs	r2, #32
 8003c42:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003c5a:	2300      	movs	r3, #0
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3758      	adds	r7, #88	@ 0x58
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}

08003c64 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b084      	sub	sp, #16
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	60f8      	str	r0, [r7, #12]
 8003c6c:	60b9      	str	r1, [r7, #8]
 8003c6e:	603b      	str	r3, [r7, #0]
 8003c70:	4613      	mov	r3, r2
 8003c72:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c74:	e04f      	b.n	8003d16 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c76:	69bb      	ldr	r3, [r7, #24]
 8003c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c7c:	d04b      	beq.n	8003d16 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c7e:	f7fd f903 	bl	8000e88 <HAL_GetTick>
 8003c82:	4602      	mov	r2, r0
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	1ad3      	subs	r3, r2, r3
 8003c88:	69ba      	ldr	r2, [r7, #24]
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d302      	bcc.n	8003c94 <UART_WaitOnFlagUntilTimeout+0x30>
 8003c8e:	69bb      	ldr	r3, [r7, #24]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d101      	bne.n	8003c98 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003c94:	2303      	movs	r3, #3
 8003c96:	e04e      	b.n	8003d36 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0304 	and.w	r3, r3, #4
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d037      	beq.n	8003d16 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	2b80      	cmp	r3, #128	@ 0x80
 8003caa:	d034      	beq.n	8003d16 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	2b40      	cmp	r3, #64	@ 0x40
 8003cb0:	d031      	beq.n	8003d16 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	69db      	ldr	r3, [r3, #28]
 8003cb8:	f003 0308 	and.w	r3, r3, #8
 8003cbc:	2b08      	cmp	r3, #8
 8003cbe:	d110      	bne.n	8003ce2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	2208      	movs	r2, #8
 8003cc6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003cc8:	68f8      	ldr	r0, [r7, #12]
 8003cca:	f000 f838 	bl	8003d3e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2208      	movs	r2, #8
 8003cd2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e029      	b.n	8003d36 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	69db      	ldr	r3, [r3, #28]
 8003ce8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003cec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003cf0:	d111      	bne.n	8003d16 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003cfa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003cfc:	68f8      	ldr	r0, [r7, #12]
 8003cfe:	f000 f81e 	bl	8003d3e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2220      	movs	r2, #32
 8003d06:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	e00f      	b.n	8003d36 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	69da      	ldr	r2, [r3, #28]
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	4013      	ands	r3, r2
 8003d20:	68ba      	ldr	r2, [r7, #8]
 8003d22:	429a      	cmp	r2, r3
 8003d24:	bf0c      	ite	eq
 8003d26:	2301      	moveq	r3, #1
 8003d28:	2300      	movne	r3, #0
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	461a      	mov	r2, r3
 8003d2e:	79fb      	ldrb	r3, [r7, #7]
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d0a0      	beq.n	8003c76 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d34:	2300      	movs	r3, #0
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3710      	adds	r7, #16
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}

08003d3e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d3e:	b480      	push	{r7}
 8003d40:	b095      	sub	sp, #84	@ 0x54
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d4e:	e853 3f00 	ldrex	r3, [r3]
 8003d52:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003d54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d56:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	461a      	mov	r2, r3
 8003d62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d64:	643b      	str	r3, [r7, #64]	@ 0x40
 8003d66:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d68:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003d6a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003d6c:	e841 2300 	strex	r3, r2, [r1]
 8003d70:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003d72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d1e6      	bne.n	8003d46 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	3308      	adds	r3, #8
 8003d7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d80:	6a3b      	ldr	r3, [r7, #32]
 8003d82:	e853 3f00 	ldrex	r3, [r3]
 8003d86:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d88:	69fb      	ldr	r3, [r7, #28]
 8003d8a:	f023 0301 	bic.w	r3, r3, #1
 8003d8e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	3308      	adds	r3, #8
 8003d96:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003d98:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003d9a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d9c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003da0:	e841 2300 	strex	r3, r2, [r1]
 8003da4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d1e5      	bne.n	8003d78 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d118      	bne.n	8003de6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	e853 3f00 	ldrex	r3, [r3]
 8003dc0:	60bb      	str	r3, [r7, #8]
   return(result);
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	f023 0310 	bic.w	r3, r3, #16
 8003dc8:	647b      	str	r3, [r7, #68]	@ 0x44
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	461a      	mov	r2, r3
 8003dd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003dd2:	61bb      	str	r3, [r7, #24]
 8003dd4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dd6:	6979      	ldr	r1, [r7, #20]
 8003dd8:	69ba      	ldr	r2, [r7, #24]
 8003dda:	e841 2300 	strex	r3, r2, [r1]
 8003dde:	613b      	str	r3, [r7, #16]
   return(result);
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d1e6      	bne.n	8003db4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2220      	movs	r2, #32
 8003dea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2200      	movs	r2, #0
 8003df8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003dfa:	bf00      	nop
 8003dfc:	3754      	adds	r7, #84	@ 0x54
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr
	...

08003e08 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003e08:	b084      	sub	sp, #16
 8003e0a:	b580      	push	{r7, lr}
 8003e0c:	b084      	sub	sp, #16
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	6078      	str	r0, [r7, #4]
 8003e12:	f107 001c 	add.w	r0, r7, #28
 8003e16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003e1a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d121      	bne.n	8003e66 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e26:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	68da      	ldr	r2, [r3, #12]
 8003e32:	4b21      	ldr	r3, [pc, #132]	@ (8003eb8 <USB_CoreInit+0xb0>)
 8003e34:	4013      	ands	r3, r2
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	68db      	ldr	r3, [r3, #12]
 8003e3e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003e46:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d105      	bne.n	8003e5a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f000 fa92 	bl	8004384 <USB_CoreReset>
 8003e60:	4603      	mov	r3, r0
 8003e62:	73fb      	strb	r3, [r7, #15]
 8003e64:	e010      	b.n	8003e88 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	68db      	ldr	r3, [r3, #12]
 8003e6a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f000 fa86 	bl	8004384 <USB_CoreReset>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e80:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8003e88:	7fbb      	ldrb	r3, [r7, #30]
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d10b      	bne.n	8003ea6 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	f043 0206 	orr.w	r2, r3, #6
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	f043 0220 	orr.w	r2, r3, #32
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003ea6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3710      	adds	r7, #16
 8003eac:	46bd      	mov	sp, r7
 8003eae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003eb2:	b004      	add	sp, #16
 8003eb4:	4770      	bx	lr
 8003eb6:	bf00      	nop
 8003eb8:	ffbdffbf 	.word	0xffbdffbf

08003ebc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b083      	sub	sp, #12
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	f023 0201 	bic.w	r2, r3, #1
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003ed0:	2300      	movs	r3, #0
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	370c      	adds	r7, #12
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	4770      	bx	lr

08003ede <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003ede:	b580      	push	{r7, lr}
 8003ee0:	b084      	sub	sp, #16
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	6078      	str	r0, [r7, #4]
 8003ee6:	460b      	mov	r3, r1
 8003ee8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003eea:	2300      	movs	r3, #0
 8003eec:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003efa:	78fb      	ldrb	r3, [r7, #3]
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d115      	bne.n	8003f2c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003f0c:	200a      	movs	r0, #10
 8003f0e:	f7fc ffc7 	bl	8000ea0 <HAL_Delay>
      ms += 10U;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	330a      	adds	r3, #10
 8003f16:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f000 fa25 	bl	8004368 <USB_GetMode>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d01e      	beq.n	8003f62 <USB_SetCurrentMode+0x84>
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2bc7      	cmp	r3, #199	@ 0xc7
 8003f28:	d9f0      	bls.n	8003f0c <USB_SetCurrentMode+0x2e>
 8003f2a:	e01a      	b.n	8003f62 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003f2c:	78fb      	ldrb	r3, [r7, #3]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d115      	bne.n	8003f5e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003f3e:	200a      	movs	r0, #10
 8003f40:	f7fc ffae 	bl	8000ea0 <HAL_Delay>
      ms += 10U;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	330a      	adds	r3, #10
 8003f48:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f000 fa0c 	bl	8004368 <USB_GetMode>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d005      	beq.n	8003f62 <USB_SetCurrentMode+0x84>
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2bc7      	cmp	r3, #199	@ 0xc7
 8003f5a:	d9f0      	bls.n	8003f3e <USB_SetCurrentMode+0x60>
 8003f5c:	e001      	b.n	8003f62 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e005      	b.n	8003f6e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2bc8      	cmp	r3, #200	@ 0xc8
 8003f66:	d101      	bne.n	8003f6c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e000      	b.n	8003f6e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003f6c:	2300      	movs	r3, #0
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3710      	adds	r7, #16
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}
	...

08003f78 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003f78:	b084      	sub	sp, #16
 8003f7a:	b580      	push	{r7, lr}
 8003f7c:	b086      	sub	sp, #24
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6078      	str	r0, [r7, #4]
 8003f82:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8003f86:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003f92:	2300      	movs	r3, #0
 8003f94:	613b      	str	r3, [r7, #16]
 8003f96:	e009      	b.n	8003fac <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003f98:	687a      	ldr	r2, [r7, #4]
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	3340      	adds	r3, #64	@ 0x40
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	4413      	add	r3, r2
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	3301      	adds	r3, #1
 8003faa:	613b      	str	r3, [r7, #16]
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	2b0e      	cmp	r3, #14
 8003fb0:	d9f2      	bls.n	8003f98 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003fb2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d11c      	bne.n	8003ff4 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	68fa      	ldr	r2, [r7, #12]
 8003fc4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003fc8:	f043 0302 	orr.w	r3, r3, #2
 8003fcc:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fd2:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	601a      	str	r2, [r3, #0]
 8003ff2:	e005      	b.n	8004000 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ff8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004006:	461a      	mov	r2, r3
 8004008:	2300      	movs	r3, #0
 800400a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800400c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004010:	2b01      	cmp	r3, #1
 8004012:	d10d      	bne.n	8004030 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004014:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004018:	2b00      	cmp	r3, #0
 800401a:	d104      	bne.n	8004026 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800401c:	2100      	movs	r1, #0
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f000 f968 	bl	80042f4 <USB_SetDevSpeed>
 8004024:	e008      	b.n	8004038 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004026:	2101      	movs	r1, #1
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f000 f963 	bl	80042f4 <USB_SetDevSpeed>
 800402e:	e003      	b.n	8004038 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004030:	2103      	movs	r1, #3
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f000 f95e 	bl	80042f4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004038:	2110      	movs	r1, #16
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f000 f8fa 	bl	8004234 <USB_FlushTxFifo>
 8004040:	4603      	mov	r3, r0
 8004042:	2b00      	cmp	r3, #0
 8004044:	d001      	beq.n	800404a <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f000 f924 	bl	8004298 <USB_FlushRxFifo>
 8004050:	4603      	mov	r3, r0
 8004052:	2b00      	cmp	r3, #0
 8004054:	d001      	beq.n	800405a <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004060:	461a      	mov	r2, r3
 8004062:	2300      	movs	r3, #0
 8004064:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800406c:	461a      	mov	r2, r3
 800406e:	2300      	movs	r3, #0
 8004070:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004078:	461a      	mov	r2, r3
 800407a:	2300      	movs	r3, #0
 800407c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800407e:	2300      	movs	r3, #0
 8004080:	613b      	str	r3, [r7, #16]
 8004082:	e043      	b.n	800410c <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	015a      	lsls	r2, r3, #5
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	4413      	add	r3, r2
 800408c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004096:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800409a:	d118      	bne.n	80040ce <USB_DevInit+0x156>
    {
      if (i == 0U)
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d10a      	bne.n	80040b8 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	015a      	lsls	r2, r3, #5
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	4413      	add	r3, r2
 80040aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040ae:	461a      	mov	r2, r3
 80040b0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80040b4:	6013      	str	r3, [r2, #0]
 80040b6:	e013      	b.n	80040e0 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	015a      	lsls	r2, r3, #5
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	4413      	add	r3, r2
 80040c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040c4:	461a      	mov	r2, r3
 80040c6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80040ca:	6013      	str	r3, [r2, #0]
 80040cc:	e008      	b.n	80040e0 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	015a      	lsls	r2, r3, #5
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	4413      	add	r3, r2
 80040d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040da:	461a      	mov	r2, r3
 80040dc:	2300      	movs	r3, #0
 80040de:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	015a      	lsls	r2, r3, #5
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	4413      	add	r3, r2
 80040e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040ec:	461a      	mov	r2, r3
 80040ee:	2300      	movs	r3, #0
 80040f0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	015a      	lsls	r2, r3, #5
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	4413      	add	r3, r2
 80040fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040fe:	461a      	mov	r2, r3
 8004100:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004104:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	3301      	adds	r3, #1
 800410a:	613b      	str	r3, [r7, #16]
 800410c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004110:	461a      	mov	r2, r3
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	4293      	cmp	r3, r2
 8004116:	d3b5      	bcc.n	8004084 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004118:	2300      	movs	r3, #0
 800411a:	613b      	str	r3, [r7, #16]
 800411c:	e043      	b.n	80041a6 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	015a      	lsls	r2, r3, #5
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	4413      	add	r3, r2
 8004126:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004130:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004134:	d118      	bne.n	8004168 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d10a      	bne.n	8004152 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	015a      	lsls	r2, r3, #5
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	4413      	add	r3, r2
 8004144:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004148:	461a      	mov	r2, r3
 800414a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800414e:	6013      	str	r3, [r2, #0]
 8004150:	e013      	b.n	800417a <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	015a      	lsls	r2, r3, #5
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	4413      	add	r3, r2
 800415a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800415e:	461a      	mov	r2, r3
 8004160:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004164:	6013      	str	r3, [r2, #0]
 8004166:	e008      	b.n	800417a <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	015a      	lsls	r2, r3, #5
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	4413      	add	r3, r2
 8004170:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004174:	461a      	mov	r2, r3
 8004176:	2300      	movs	r3, #0
 8004178:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	015a      	lsls	r2, r3, #5
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	4413      	add	r3, r2
 8004182:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004186:	461a      	mov	r2, r3
 8004188:	2300      	movs	r3, #0
 800418a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	015a      	lsls	r2, r3, #5
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	4413      	add	r3, r2
 8004194:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004198:	461a      	mov	r2, r3
 800419a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800419e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	3301      	adds	r3, #1
 80041a4:	613b      	str	r3, [r7, #16]
 80041a6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80041aa:	461a      	mov	r2, r3
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d3b5      	bcc.n	800411e <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041b8:	691b      	ldr	r3, [r3, #16]
 80041ba:	68fa      	ldr	r2, [r7, #12]
 80041bc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80041c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80041c4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2200      	movs	r2, #0
 80041ca:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80041d2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80041d4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d105      	bne.n	80041e8 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	699b      	ldr	r3, [r3, #24]
 80041e0:	f043 0210 	orr.w	r2, r3, #16
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	699a      	ldr	r2, [r3, #24]
 80041ec:	4b0f      	ldr	r3, [pc, #60]	@ (800422c <USB_DevInit+0x2b4>)
 80041ee:	4313      	orrs	r3, r2
 80041f0:	687a      	ldr	r2, [r7, #4]
 80041f2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80041f4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d005      	beq.n	8004208 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	699b      	ldr	r3, [r3, #24]
 8004200:	f043 0208 	orr.w	r2, r3, #8
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004208:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800420c:	2b01      	cmp	r3, #1
 800420e:	d105      	bne.n	800421c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	699a      	ldr	r2, [r3, #24]
 8004214:	4b06      	ldr	r3, [pc, #24]	@ (8004230 <USB_DevInit+0x2b8>)
 8004216:	4313      	orrs	r3, r2
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800421c:	7dfb      	ldrb	r3, [r7, #23]
}
 800421e:	4618      	mov	r0, r3
 8004220:	3718      	adds	r7, #24
 8004222:	46bd      	mov	sp, r7
 8004224:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004228:	b004      	add	sp, #16
 800422a:	4770      	bx	lr
 800422c:	803c3800 	.word	0x803c3800
 8004230:	40000004 	.word	0x40000004

08004234 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004234:	b480      	push	{r7}
 8004236:	b085      	sub	sp, #20
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800423e:	2300      	movs	r3, #0
 8004240:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	3301      	adds	r3, #1
 8004246:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800424e:	d901      	bls.n	8004254 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004250:	2303      	movs	r3, #3
 8004252:	e01b      	b.n	800428c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	691b      	ldr	r3, [r3, #16]
 8004258:	2b00      	cmp	r3, #0
 800425a:	daf2      	bge.n	8004242 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800425c:	2300      	movs	r3, #0
 800425e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	019b      	lsls	r3, r3, #6
 8004264:	f043 0220 	orr.w	r2, r3, #32
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	3301      	adds	r3, #1
 8004270:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004278:	d901      	bls.n	800427e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	e006      	b.n	800428c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	691b      	ldr	r3, [r3, #16]
 8004282:	f003 0320 	and.w	r3, r3, #32
 8004286:	2b20      	cmp	r3, #32
 8004288:	d0f0      	beq.n	800426c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800428a:	2300      	movs	r3, #0
}
 800428c:	4618      	mov	r0, r3
 800428e:	3714      	adds	r7, #20
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr

08004298 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004298:	b480      	push	{r7}
 800429a:	b085      	sub	sp, #20
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80042a0:	2300      	movs	r3, #0
 80042a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	3301      	adds	r3, #1
 80042a8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80042b0:	d901      	bls.n	80042b6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80042b2:	2303      	movs	r3, #3
 80042b4:	e018      	b.n	80042e8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	691b      	ldr	r3, [r3, #16]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	daf2      	bge.n	80042a4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80042be:	2300      	movs	r3, #0
 80042c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2210      	movs	r2, #16
 80042c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	3301      	adds	r3, #1
 80042cc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80042d4:	d901      	bls.n	80042da <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	e006      	b.n	80042e8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	691b      	ldr	r3, [r3, #16]
 80042de:	f003 0310 	and.w	r3, r3, #16
 80042e2:	2b10      	cmp	r3, #16
 80042e4:	d0f0      	beq.n	80042c8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80042e6:	2300      	movs	r3, #0
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3714      	adds	r7, #20
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr

080042f4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b085      	sub	sp, #20
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	460b      	mov	r3, r1
 80042fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	78fb      	ldrb	r3, [r7, #3]
 800430e:	68f9      	ldr	r1, [r7, #12]
 8004310:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004314:	4313      	orrs	r3, r2
 8004316:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004318:	2300      	movs	r3, #0
}
 800431a:	4618      	mov	r0, r3
 800431c:	3714      	adds	r7, #20
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr

08004326 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004326:	b480      	push	{r7}
 8004328:	b085      	sub	sp, #20
 800432a:	af00      	add	r7, sp, #0
 800432c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	68fa      	ldr	r2, [r7, #12]
 800433c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004340:	f023 0303 	bic.w	r3, r3, #3
 8004344:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	68fa      	ldr	r2, [r7, #12]
 8004350:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004354:	f043 0302 	orr.w	r3, r3, #2
 8004358:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800435a:	2300      	movs	r3, #0
}
 800435c:	4618      	mov	r0, r3
 800435e:	3714      	adds	r7, #20
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr

08004368 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004368:	b480      	push	{r7}
 800436a:	b083      	sub	sp, #12
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	695b      	ldr	r3, [r3, #20]
 8004374:	f003 0301 	and.w	r3, r3, #1
}
 8004378:	4618      	mov	r0, r3
 800437a:	370c      	adds	r7, #12
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr

08004384 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004384:	b480      	push	{r7}
 8004386:	b085      	sub	sp, #20
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800438c:	2300      	movs	r3, #0
 800438e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	3301      	adds	r3, #1
 8004394:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800439c:	d901      	bls.n	80043a2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800439e:	2303      	movs	r3, #3
 80043a0:	e01b      	b.n	80043da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	691b      	ldr	r3, [r3, #16]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	daf2      	bge.n	8004390 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80043aa:	2300      	movs	r3, #0
 80043ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	691b      	ldr	r3, [r3, #16]
 80043b2:	f043 0201 	orr.w	r2, r3, #1
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	3301      	adds	r3, #1
 80043be:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80043c6:	d901      	bls.n	80043cc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80043c8:	2303      	movs	r3, #3
 80043ca:	e006      	b.n	80043da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	691b      	ldr	r3, [r3, #16]
 80043d0:	f003 0301 	and.w	r3, r3, #1
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d0f0      	beq.n	80043ba <USB_CoreReset+0x36>

  return HAL_OK;
 80043d8:	2300      	movs	r3, #0
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3714      	adds	r7, #20
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr

080043e6 <memset>:
 80043e6:	4402      	add	r2, r0
 80043e8:	4603      	mov	r3, r0
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d100      	bne.n	80043f0 <memset+0xa>
 80043ee:	4770      	bx	lr
 80043f0:	f803 1b01 	strb.w	r1, [r3], #1
 80043f4:	e7f9      	b.n	80043ea <memset+0x4>
	...

080043f8 <__libc_init_array>:
 80043f8:	b570      	push	{r4, r5, r6, lr}
 80043fa:	4d0d      	ldr	r5, [pc, #52]	@ (8004430 <__libc_init_array+0x38>)
 80043fc:	4c0d      	ldr	r4, [pc, #52]	@ (8004434 <__libc_init_array+0x3c>)
 80043fe:	1b64      	subs	r4, r4, r5
 8004400:	10a4      	asrs	r4, r4, #2
 8004402:	2600      	movs	r6, #0
 8004404:	42a6      	cmp	r6, r4
 8004406:	d109      	bne.n	800441c <__libc_init_array+0x24>
 8004408:	4d0b      	ldr	r5, [pc, #44]	@ (8004438 <__libc_init_array+0x40>)
 800440a:	4c0c      	ldr	r4, [pc, #48]	@ (800443c <__libc_init_array+0x44>)
 800440c:	f000 f818 	bl	8004440 <_init>
 8004410:	1b64      	subs	r4, r4, r5
 8004412:	10a4      	asrs	r4, r4, #2
 8004414:	2600      	movs	r6, #0
 8004416:	42a6      	cmp	r6, r4
 8004418:	d105      	bne.n	8004426 <__libc_init_array+0x2e>
 800441a:	bd70      	pop	{r4, r5, r6, pc}
 800441c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004420:	4798      	blx	r3
 8004422:	3601      	adds	r6, #1
 8004424:	e7ee      	b.n	8004404 <__libc_init_array+0xc>
 8004426:	f855 3b04 	ldr.w	r3, [r5], #4
 800442a:	4798      	blx	r3
 800442c:	3601      	adds	r6, #1
 800442e:	e7f2      	b.n	8004416 <__libc_init_array+0x1e>
 8004430:	08004478 	.word	0x08004478
 8004434:	08004478 	.word	0x08004478
 8004438:	08004478 	.word	0x08004478
 800443c:	0800447c 	.word	0x0800447c

08004440 <_init>:
 8004440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004442:	bf00      	nop
 8004444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004446:	bc08      	pop	{r3}
 8004448:	469e      	mov	lr, r3
 800444a:	4770      	bx	lr

0800444c <_fini>:
 800444c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800444e:	bf00      	nop
 8004450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004452:	bc08      	pop	{r3}
 8004454:	469e      	mov	lr, r3
 8004456:	4770      	bx	lr
